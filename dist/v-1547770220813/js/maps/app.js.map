{"version":3,"sources":["coffee/app.coffee","coffee/classes.coffee","coffee/utils.coffee","coffee/modules/controllerMixins.coffee","coffee/modules/admin.coffee","coffee/modules/auth.coffee","coffee/modules/backlog.coffee","coffee/modules/base.coffee","coffee/modules/common.coffee","coffee/modules/detail.coffee","coffee/modules/epics.coffee","coffee/modules/events.coffee","coffee/modules/feedback.coffee","coffee/modules/integrations.coffee","coffee/modules/issues.coffee","coffee/modules/kanban.coffee","coffee/modules/plugins.coffee","coffee/modules/projects.coffee","coffee/modules/related-tasks.coffee","coffee/modules/resources.coffee","coffee/modules/search.coffee","coffee/modules/taskboard.coffee","coffee/modules/tasks.coffee","coffee/modules/team.coffee","coffee/modules/user-settings.coffee","coffee/modules/userstories.coffee","coffee/modules/wiki.coffee","coffee/modules/common/analytics.coffee","coffee/modules/common/bind-scope.coffee","coffee/modules/common/compile-html.directive.coffee","coffee/modules/common/components.coffee","coffee/modules/common/confirm.coffee","coffee/modules/common/custom-field-values.coffee","coffee/modules/common/emojis.coffee","coffee/modules/common/estimation.coffee","coffee/modules/common/filters.coffee","coffee/modules/common/lightboxes.coffee","coffee/modules/common/loader.coffee","coffee/modules/common/loading.coffee","coffee/modules/common/popovers.coffee","coffee/modules/common/raven-logger.coffee","coffee/modules/common/sections.coffee","coffee/modules/common/tags.coffee","coffee/modules/backlog/lightboxes.coffee","coffee/modules/backlog/main.coffee","coffee/modules/backlog/sortable.coffee","coffee/modules/backlog/sprints.coffee","coffee/modules/taskboard/charts.coffee","coffee/modules/taskboard/lightboxes.coffee","coffee/modules/taskboard/main.coffee","coffee/modules/taskboard/sortable.coffee","coffee/modules/taskboard/taskboard-issues.coffee","coffee/modules/taskboard/taskboard-tasks.coffee","coffee/modules/kanban/kanban-usertories.coffee","coffee/modules/kanban/main.coffee","coffee/modules/kanban/sortable.coffee","coffee/modules/epics/detail.coffee","coffee/modules/issues/detail.coffee","coffee/modules/issues/lightboxes.coffee","coffee/modules/issues/list.coffee","coffee/modules/userstories/detail.coffee","coffee/modules/tasks/detail.coffee","coffee/modules/team/main.coffee","coffee/modules/wiki/main.coffee","coffee/modules/wiki/nav.coffee","coffee/modules/wiki/pages-list.coffee","coffee/modules/admin/lightboxes.coffee","coffee/modules/admin/memberships.coffee","coffee/modules/admin/nav.coffee","coffee/modules/admin/project-profile.coffee","coffee/modules/admin/project-values.coffee","coffee/modules/admin/roles.coffee","coffee/modules/admin/third-parties.coffee","coffee/modules/projects/lightboxes.coffee","coffee/modules/base/bind.coffee","coffee/modules/base/conf.coffee","coffee/modules/base/contrib.coffee","coffee/modules/base/filters.coffee","coffee/modules/base/http.coffee","coffee/modules/base/location.coffee","coffee/modules/base/model.coffee","coffee/modules/base/navurls.coffee","coffee/modules/base/repository.coffee","coffee/modules/base/storage.coffee","coffee/modules/base/urls.coffee","coffee/modules/resources/custom-attributes-values.coffee","coffee/modules/resources/custom-attributes.coffee","coffee/modules/resources/epics.coffee","coffee/modules/resources/history.coffee","coffee/modules/resources/invitations.coffee","coffee/modules/resources/issues.coffee","coffee/modules/resources/kanban.coffee","coffee/modules/resources/locales.coffee","coffee/modules/resources/mdrender.coffee","coffee/modules/resources/memberships.coffee","coffee/modules/resources/modules.coffee","coffee/modules/resources/notify-policies.coffee","coffee/modules/resources/projects.coffee","coffee/modules/resources/roles.coffee","coffee/modules/resources/search.coffee","coffee/modules/resources/sprints.coffee","coffee/modules/resources/tasks.coffee","coffee/modules/resources/user-project-settings.coffee","coffee/modules/resources/user-settings.coffee","coffee/modules/resources/users.coffee","coffee/modules/resources/userstories.coffee","coffee/modules/resources/webhooklogs.coffee","coffee/modules/resources/webhooks.coffee","coffee/modules/resources/wiki.coffee","coffee/modules/user-settings/change-password.coffee","coffee/modules/user-settings/lightboxes.coffee","coffee/modules/user-settings/live-notifications.coffee","coffee/modules/user-settings/main.coffee","coffee/modules/user-settings/nav.coffee","coffee/modules/user-settings/notifications.coffee","coffee/modules/user-settings/user-project-settings.coffee","coffee/modules/user-settings/web-notifications.coffee","modules/components/components.module.coffee","modules/discover/discover.module.coffee","modules/external-apps/external-apps.module.coffee","modules/history/history.module.coffee","modules/home/home.module.coffee","modules/navigation-bar/navigation-bar.module.coffee","modules/notifications/notifications.module.coffee","modules/profile/profile.module.coffee","modules/projects/projects.module.coffee","modules/resources/resources.module.coffee","modules/user-timeline/user-timeline.module.coffee","modules/utils/utils.module.coffee","modules/wiki/history/wiki-history.module.coffee","modules/components/assigned-to/assigned-item/assigned-item.directive.coffee","modules/components/assigned-to/assigned-to-selector/assigned-to-selector.controller.coffee","modules/components/assigned-to/assigned-to-selector/assigned-to-selector.directive.coffee","modules/components/assigned-to/assigned-to.controller.coffee","modules/components/assigned-to/assigned-to.directive.coffee","modules/components/assigned/assigned-to-inline.directive.coffee","modules/components/assigned/assigned-to.directive.coffee","modules/components/assigned/assigned-users-inline.directive.coffee","modules/components/assigned/assigned-users.directive.coffee","modules/components/attachment-link/attachment-link.directive.coffee","modules/components/attachment/attachment-gallery.directive.coffee","modules/components/attachment/attachment.controller.coffee","modules/components/attachment/attachment.directive.coffee","modules/components/attachments-drop/attachments-drop.directive.coffee","modules/components/attachments-full/attachments-full.controller.coffee","modules/components/attachments-full/attachments-full.directive.coffee","modules/components/attachments-full/attachments-full.service.coffee","modules/components/attachments-preview/attachments-preview.controller.coffee","modules/components/attachments-preview/attachments-preview.directive.coffee","modules/components/attachments-preview/attachments-preview.service.coffee","modules/components/attachments-simple/attachments-simple.controller.coffee","modules/components/attachments-simple/attachments-simple.directive.coffee","modules/components/attachments-sortable/attachments-sortable.directive.coffee","modules/components/auto-select/auto-select.directive.coffee","modules/components/avatar/avatar.directive.coffee","modules/components/belong-to-epics/belong-to-epics.directive.coffee","modules/components/bind-code.directive.coffee","modules/components/board-zoom/board-zoom.directive.coffee","modules/components/card-slideshow/card-slideshow.controller.coffee","modules/components/card-slideshow/card-slideshow.directive.coffee","modules/components/card/card.controller.coffee","modules/components/card/card.directive.coffee","modules/components/click-input-file.directive.coffee","modules/components/color-selector/color-selector.controller.coffee","modules/components/color-selector/color-selector.directive.coffee","modules/components/detail/header/detail-header.controller.coffee","modules/components/detail/header/detail-header.directive.coffee","modules/components/due-date/due-date-controller.coffee","modules/components/due-date/due-date-popover.directive.coffee","modules/components/due-date/due-date.directive.coffee","modules/components/file-change/file-change.directive.coffee","modules/components/filter/filter-remote.service.coffee","modules/components/filter/filter-slide-down.directive.coffee","modules/components/filter/filter.controller.coffee","modules/components/filter/filter.directive.coffee","modules/components/joy-ride/joy-ride.directive.coffee","modules/components/joy-ride/joy-ride.service.coffee","modules/components/kanban-board-zoom/kanban-board-zoom.directive.coffee","modules/components/live-announcement/live-announcement.directive.coffee","modules/components/live-announcement/live-announcement.service.coffee","modules/components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.controller.coffee","modules/components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.directive.coffee","modules/components/move-to-sprint/move-to-sprint.controller.coffee","modules/components/move-to-sprint/move-to-sprint.directive.coffee","modules/components/project-logo-big-src/project-logo-big-src.directive.coffee","modules/components/project-logo-small-src/project-logo-small-src.directive.coffee","modules/components/project-menu/project-menu.controller.coffee","modules/components/project-menu/project-menu.directive.coffee","modules/components/search-list/search-list.directive.coffee","modules/components/tags/tag-dropdown/tag-dropdown.directive.coffee","modules/components/tags/tag-line-common/tag-line-common.controller.coffee","modules/components/tags/tag-line-common/tag-line-common.directive.coffee","modules/components/tags/tag-line-detail/tag-line-detail.controller.coffee","modules/components/tags/tag-line-detail/tag-line-detail.directive.coffee","modules/components/tags/tag-line.service.coffee","modules/components/tags/tag/tag.directive.coffee","modules/components/taskboard-zoom/taskboard-zoom.directive.coffee","modules/components/tasks-sortable/tasks-sortable.directive.coffee","modules/components/terms-announcement/terms-announcement.directive.coffee","modules/components/terms-announcement/terms-announcement.service.coffee","modules/components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.directive.coffee","modules/components/tips/tips.directive.coffee","modules/components/tribe-button/tribe-button.directive.coffee","modules/components/tribe-button/tribe-linked.directive.coffee","modules/components/vote-button/vote-button.controller.coffee","modules/components/vote-button/vote-button.directive.coffee","modules/components/watch-button/watch-button.controller.coffee","modules/components/watch-button/watch-button.directive.coffee","modules/components/wysiwyg/comment-edit-wysiwyg.directive.coffee","modules/components/wysiwyg/comment-wysiwyg.directive.coffee","modules/components/wysiwyg/custom-field-edit-wysiwyg.directive.coffee","modules/components/wysiwyg/item-wysiwyg.directive.coffee","modules/components/wysiwyg/wysiwyg-code-hightlighter.service.coffee","modules/components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.directive.coffee","modules/components/wysiwyg/wysiwyg-mention.service.coffee","modules/components/wysiwyg/wysiwyg.directive.coffee","modules/components/wysiwyg/wysiwyg.service.coffee","modules/discover/components/discover-home-order-by/discover-home-order-by.controller.coffee","modules/discover/components/discover-home-order-by/discover-home-order-by.directive.coffee","modules/discover/components/discover-search-bar/discover-search-bar.controller.coffee","modules/discover/components/discover-search-bar/discover-search-bar.directive.coffee","modules/discover/components/discover-search-list-header/discover-search-list-header.controller.coffee","modules/discover/components/discover-search-list-header/discover-search-list-header.directive.coffee","modules/discover/components/featured-projects/featured-projects.controller.coffee","modules/discover/components/featured-projects/featured-projects.directive.coffee","modules/discover/components/highlighted/highlighted.directive.coffee","modules/discover/components/most-active/most-active.controller.coffee","modules/discover/components/most-active/most-active.directive.coffee","modules/discover/components/most-liked/most-liked.controller.coffee","modules/discover/components/most-liked/most-liked.directive.coffee","modules/discover/discover-home/discover-home.controller.coffee","modules/discover/discover-search/discover-search.controller.coffee","modules/discover/discover-search/discover-search.directive.coffee","modules/discover/services/discover-projects.service.coffee","modules/epics/create-epic/create-epic.controller.coffee","modules/epics/create-epic/create-epic.directive.coffee","modules/epics/dashboard/epic-row/epic-row.controller.coffee","modules/epics/dashboard/epic-row/epic-row.directive.coffee","modules/epics/dashboard/epics-dashboard.controller.coffee","modules/epics/dashboard/epics-sortable/epics-sortable.directive.coffee","modules/epics/dashboard/epics-table/epics-table.controller.coffee","modules/epics/dashboard/epics-table/epics-table.directive.coffee","modules/epics/dashboard/story-row/story-row.controller.coffee","modules/epics/dashboard/story-row/story-row.directive.coffee","modules/epics/epics.service.coffee","modules/epics/related-userstories/related-userstories-controller.coffee","modules/epics/related-userstories/related-userstories-create/related-userstories-create.controller.coffee","modules/epics/related-userstories/related-userstories-create/related-userstories-create.directive.coffee","modules/epics/related-userstories/related-userstories-sortable/related-userstories-sortable.directive.coffee","modules/epics/related-userstories/related-userstories.directive.coffee","modules/epics/related-userstories/related-userstory-row/related-userstory-row.controller.coffee","modules/epics/related-userstories/related-userstory-row/related-userstory-row.directive.coffee","modules/external-apps/external-app.controller.coffee","modules/external-apps/external-app.service.coffee","modules/feedback/feedback.service.coffee","modules/history/activity/activity.service.coffee","modules/history/comments/comment.controller.coffee","modules/history/comments/comment.directive.coffee","modules/history/comments/comments.controller.coffee","modules/history/comments/comments.directive.coffee","modules/history/history-lightbox/comment-history-lightbox.controller.coffee","modules/history/history-lightbox/comment-history-lightbox.directive.coffee","modules/history/history-lightbox/history-entry.directive.coffee","modules/history/history-tabs/history-tabs.directive.coffee","modules/history/history.controller.coffee","modules/history/history.directive.coffee","modules/history/history/history-diff.controller.coffee","modules/history/history/history-diff.directive.coffee","modules/history/history/history.directive.coffee","modules/home/duties/duty.directive.coffee","modules/home/home.controller.coffee","modules/home/home.service.coffee","modules/home/projects/home-project-list.directive.coffee","modules/home/working-on/working-on.controller.coffee","modules/home/working-on/working-on.directive.coffee","modules/invite-members/invite-members-form/invite-members-form.controller.coffee","modules/invite-members/invite-members-form/invite-members-form.directive.coffee","modules/invite-members/lightbox-add-members.controller.coffee","modules/invite-members/lightbox-add-members.directive.coffee","modules/invite-members/suggest-add-members/suggest-add-members.controller.coffee","modules/invite-members/suggest-add-members/suggest-add-members.directive.coffee","modules/navigation-bar/dropdown-notifications/dropdown-notifications.directive.coffee","modules/navigation-bar/dropdown-project-list/dropdown-project-list.directive.coffee","modules/navigation-bar/dropdown-user/dropdown-user.directive.coffee","modules/navigation-bar/navigation-bar.directive.coffee","modules/navigation-bar/navigation-bar.service.coffee","modules/notifications/notifications-list/notifications-list.directive.coffee","modules/notifications/notifications.controller.coffee","modules/notifications/notifications.service.coffee","modules/profile/profile-bar/profile-bar.controller.coffee","modules/profile/profile-bar/profile-bar.directive.coffee","modules/profile/profile-contacts/profile-contacts.controller.coffee","modules/profile/profile-contacts/profile-contacts.directive.coffee","modules/profile/profile-favs/items/items.directive.coffee","modules/profile/profile-favs/profile-favs.controller.coffee","modules/profile/profile-favs/profile-favs.directive.coffee","modules/profile/profile-hints/profile-hints.controller.coffee","modules/profile/profile-hints/profile-hints.directive.coffee","modules/profile/profile-projects/profile-projects.controller.coffee","modules/profile/profile-projects/profile-projects.directive.coffee","modules/profile/profile-tab/profile-tab.directive.coffee","modules/profile/profile-tabs/profile-tabs.controller.coffee","modules/profile/profile-tabs/profile-tabs.directive.coffee","modules/profile/profile.controller.coffee","modules/projects/components/blocked-project-explanation.directive.coffee","modules/projects/components/contact-project-button/contact-project-button.controller.coffee","modules/projects/components/contact-project-button/contact-project-button.directive.coffee","modules/projects/components/lb-contact-project/lb-contact-project.controller.coffee","modules/projects/components/lb-contact-project/lb-contact-project.directive.coffee","modules/projects/components/like-project-button/like-project-button.controller.coffee","modules/projects/components/like-project-button/like-project-button.directive.coffee","modules/projects/components/like-project-button/like-project-button.service.coffee","modules/projects/components/sort-projects.directive.coffee","modules/projects/components/watch-project-button/watch-project-button.controller.coffee","modules/projects/components/watch-project-button/watch-project-button.directive.coffee","modules/projects/components/watch-project-button/watch-project-button.service.coffee","modules/projects/create/asana-import/asana-import-project-form/asana-import-project-form.controller.coffee","modules/projects/create/asana-import/asana-import-project-form/asana-import-project-form.directive.coffee","modules/projects/create/asana-import/asana-import.controller.coffee","modules/projects/create/asana-import/asana-import.directive.coffee","modules/projects/create/asana-import/asana-import.service.coffee","modules/projects/create/create-project-form/create-project-form.controller.coffee","modules/projects/create/create-project-form/create-project-form.directive.coffee","modules/projects/create/create-project-members-restrictions/create-project-members-restrictions.directive.coffee","modules/projects/create/create-project-restrictions/create-project-restrictions.directive.coffee","modules/projects/create/create-project.controller.coffee","modules/projects/create/duplicate/duplicate-project.controller.coffee","modules/projects/create/duplicate/duplicate-project.directive.coffee","modules/projects/create/github-import/github-import-project-form/github-import-project-form.controller.coffee","modules/projects/create/github-import/github-import-project-form/github-import-project-form.directive.coffee","modules/projects/create/github-import/github-import.controller.coffee","modules/projects/create/github-import/github-import.directive.coffee","modules/projects/create/github-import/github-import.service.coffee","modules/projects/create/import-project-members/import-project-members.controller.coffee","modules/projects/create/import-project-members/import-project-members.directive.coffee","modules/projects/create/import-project-selector/import-project-selector.controller.coffee","modules/projects/create/import-project-selector/import-project-selector.directive.coffee","modules/projects/create/import-taiga/import-taiga.controller.coffee","modules/projects/create/import-taiga/import-taiga.directive.coffee","modules/projects/create/import/import-project-error-lb.directive.coffee","modules/projects/create/import/import-project.controller.coffee","modules/projects/create/import/import-project.directive.coffee","modules/projects/create/import/import-project.service.coffee","modules/projects/create/invite-members/invite-members.controller.coffee","modules/projects/create/invite-members/invite-members.directive.coffee","modules/projects/create/invite-members/single-member/single-member.directive.coffee","modules/projects/create/jira-import/jira-import-project-form/jira-import-project-form.controller.coffee","modules/projects/create/jira-import/jira-import-project-form/jira-import-project-form.directive.coffee","modules/projects/create/jira-import/jira-import.controller.coffee","modules/projects/create/jira-import/jira-import.directive.coffee","modules/projects/create/jira-import/jira-import.service.coffee","modules/projects/create/select-import-user-lightbox/select-import-user-lightbox.controller.coffee","modules/projects/create/select-import-user-lightbox/select-import-user-lightbox.directive.coffee","modules/projects/create/trello-import/trello-import-project-form/trello-import-project-form.controller.coffee","modules/projects/create/trello-import/trello-import-project-form/trello-import-project-form.directive.coffee","modules/projects/create/trello-import/trello-import.controller.coffee","modules/projects/create/trello-import/trello-import.directive.coffee","modules/projects/create/trello-import/trello-import.service.coffee","modules/projects/create/warning-user-import-lightbox/warning-user-import-lightbox.directive.coffee","modules/projects/listing/projects-listing.controller.coffee","modules/projects/project/project-router.controller.coffee","modules/projects/project/project.controller.coffee","modules/projects/projects.service.coffee","modules/projects/transfer/cant-own-project-explanation.directive.coffee","modules/projects/transfer/transfer-project.controller.coffee","modules/projects/transfer/transfer-project.directive.coffee","modules/resources/attachments-resource.service.coffee","modules/resources/epics-resource.service.coffee","modules/resources/external-apps-resource.service.coffee","modules/resources/history-resource.service.coffee","modules/resources/importers-resource.service.coffee","modules/resources/issues-resource.service.coffee","modules/resources/projects-resource.service.coffee","modules/resources/resources.coffee","modules/resources/stats-resource.service.coffee","modules/resources/tasks-resource.service.coffee","modules/resources/user-resource.service.coffee","modules/resources/users-resource.service.coffee","modules/resources/userstories-resource.service.coffee","modules/services/app-meta.service.coffee","modules/services/attachments.service.coffee","modules/services/avatar.service.coffee","modules/services/check-permissions.service.coffee","modules/services/current-user.service.coffee","modules/services/error-handling.service.coffee","modules/services/lightbox-factory.service.coffee","modules/services/paginate-response.service.coffee","modules/services/project-logo.service.coffee","modules/services/project.service.coffee","modules/services/theme.service.coffee","modules/services/user-activity.service.coffee","modules/services/user-list.service.coffee","modules/services/user.service.coffee","modules/services/xhrError.service.coffee","modules/user-timeline/user-timeline-attachment/user-timeline-attachment.directive.coffee","modules/user-timeline/user-timeline-item/user-timeline-item-title.service.coffee","modules/user-timeline/user-timeline-item/user-timeline-item-type.service.coffee","modules/user-timeline/user-timeline-item/user-timeline-item.directive.coffee","modules/user-timeline/user-timeline-pagination-sequence/user-timeline-pagination-sequence.service.coffee","modules/user-timeline/user-timeline/user-timeline.controller.coffee","modules/user-timeline/user-timeline/user-timeline.directive.coffee","modules/user-timeline/user-timeline/user-timeline.service.coffee","modules/utils/isolate-click.directive.coffee","modules/wiki/history/wiki-history-diff.directive.coffee","modules/wiki/history/wiki-history-entry.directive.coffee","modules/wiki/history/wiki-history.controller.coffee","modules/wiki/history/wiki-history.directive.coffee"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7slajbjuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3djWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrzpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzmlvjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjytnzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlrvzvvhgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzlrtzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvlncvtgyptmhyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpnhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjvxzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttjvjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlxlpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACptGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrrthnxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrkhzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznxlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjttrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtlhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzhrpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvtthTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: app.coffee\r\n###\r\n\r\n@taiga = taiga = {}\r\ntaiga.emojis = window.emojis\r\n@.taigaContribPlugins = @.taigaContribPlugins or window.taigaContribPlugins or []\r\n\r\n# Generic function for generate hash from a arbitrary length\r\n# collection of parameters.\r\ntaiga.generateHash = (components=[]) ->\r\n    components = _.map(components, (x) -> JSON.stringify(x))\r\n    return hex_sha1(components.join(\":\"))\r\n\r\n\r\ntaiga.generateUniqueSessionIdentifier = ->\r\n    date = (new Date()).getTime()\r\n    randomNumber = Math.floor(Math.random() * 0x9000000)\r\n    return taiga.generateHash([date, randomNumber])\r\n\r\n\r\ntaiga.sessionId = taiga.generateUniqueSessionIdentifier()\r\n\r\n\r\nconfigure = ($routeProvider, $locationProvider, $httpProvider, $provide, $tgEventsProvider,\r\n             $compileProvider, $translateProvider, $translatePartialLoaderProvider, $animateProvider) ->\r\n\r\n    $animateProvider.classNameFilter(/^(?:(?!ng-animate-disabled).)*$/)\r\n\r\n    # wait until the translation is ready to resolve the page\r\n    originalWhen = $routeProvider.when\r\n\r\n    $routeProvider.when = (path, route) ->\r\n        route.resolve || (route.resolve = {})\r\n        angular.extend(route.resolve, {\r\n            languageLoad: [\"$q\", \"$translate\", ($q, $translate) ->\r\n                deferred = $q.defer()\r\n\r\n                $translate().then () -> deferred.resolve()\r\n\r\n                return deferred.promise\r\n            ],\r\n            projectLoaded: [\"$q\", \"tgProjectService\", \"$route\", ($q, projectService, $route) ->\r\n                deferred = $q.defer()\r\n\r\n                projectService.setSection($route.current.$$route?.section)\r\n\r\n                if $route.current.params.pslug\r\n                    projectService.setProjectBySlug($route.current.params.pslug).then(deferred.resolve)\r\n                else\r\n                    projectService.cleanProject()\r\n                    deferred.resolve()\r\n\r\n                return deferred.promise\r\n            ]\r\n        })\r\n\r\n        return originalWhen.call($routeProvider, path, route)\r\n\r\n    # Home\r\n    $routeProvider.when(\"/\",\r\n        {\r\n            templateUrl: \"home/home.html\",\r\n            controller: \"Home\",\r\n            controllerAs: \"vm\"\r\n            loader: true,\r\n            title: \"HOME.PAGE_TITLE\",\r\n            loader: true,\r\n            description: \"HOME.PAGE_DESCRIPTION\",\r\n            joyride: \"dashboard\"\r\n        }\r\n    )\r\n\r\n    # Discover\r\n    $routeProvider.when(\"/discover\",\r\n        {\r\n            templateUrl: \"discover/discover-home/discover-home.html\",\r\n            controller: \"DiscoverHome\",\r\n            controllerAs: \"vm\",\r\n            title: \"PROJECT.NAVIGATION.DISCOVER\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/discover/search\",\r\n        {\r\n            templateUrl: \"discover/discover-search/discover-search.html\",\r\n            title: \"PROJECT.NAVIGATION.DISCOVER\",\r\n            loader: true,\r\n            controller: \"DiscoverSearch\",\r\n            controllerAs: \"vm\",\r\n            reloadOnSearch: false\r\n        }\r\n    )\r\n\r\n    # My Projects\r\n    $routeProvider.when(\"/projects/\",\r\n        {\r\n            templateUrl: \"projects/listing/projects-listing.html\",\r\n            access: {\r\n                requiresLogin: true\r\n            },\r\n            title: \"PROJECTS.PAGE_TITLE\",\r\n            description: \"PROJECTS.PAGE_DESCRIPTION\",\r\n            loader: true,\r\n            controller: \"ProjectsListing\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    # Project\r\n    $routeProvider.when(\"/project/new\",\r\n        {\r\n            title: \"PROJECT.CREATE.TITLE\",\r\n            templateUrl: \"projects/create/create-project.html\",\r\n            loader: true,\r\n            controller: \"CreateProjectCtrl\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    # Project - scrum\r\n    $routeProvider.when(\"/project/new/scrum\",\r\n        {\r\n            title: \"PROJECT.CREATE.TITLE\",\r\n            template: \"<tg-create-project-form type=\\\"scrum\\\"></tg-create-project-form>\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    # Project - kanban\r\n    $routeProvider.when(\"/project/new/kanban\",\r\n        {\r\n            title: \"PROJECT.CREATE.TITLE\",\r\n            template: \"<tg-create-project-form type=\\\"kanban\\\"></tg-create-project-form>\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    # Project - duplicate\r\n    $routeProvider.when(\"/project/new/duplicate\",\r\n        {\r\n            title: \"PROJECT.CREATE.TITLE\",\r\n            template: \"<tg-duplicate-project></tg-duplicate-project>\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    # Project - import\r\n    $routeProvider.when(\"/project/new/import/:platform?\",\r\n        {\r\n            title: \"PROJECT.CREATE.TITLE\",\r\n            template: \"<tg-import-project></tg-import-project>\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    # Project\r\n    $routeProvider.when(\"/project/:pslug/\",\r\n        {\r\n            template: \"\",\r\n            loader: true,\r\n            controller: \"ProjectRouter\"\r\n        }\r\n    )\r\n\r\n    # Project\r\n    $routeProvider.when(\"/project/:pslug/timeline\",\r\n        {\r\n            templateUrl: \"projects/project/project.html\",\r\n            loader: true,\r\n            controller: \"Project\",\r\n            controllerAs: \"vm\"\r\n            section: \"project-timeline\"\r\n        }\r\n    )\r\n\r\n    # Project ref detail\r\n    $routeProvider.when(\"/project/:pslug/t/:ref\",\r\n        {\r\n            loader: true,\r\n            controller: \"DetailController\",\r\n            template: \"\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/project/:pslug/search\",\r\n        {\r\n            templateUrl: \"search/search.html\",\r\n            reloadOnSearch: false,\r\n            section: \"search\",\r\n            loader: true\r\n        }\r\n    )\r\n\r\n    # Epics\r\n    $routeProvider.when(\"/project/:pslug/epics\",\r\n    {\r\n            section: \"epics\",\r\n            templateUrl: \"epics/dashboard/epics-dashboard.html\",\r\n            loader: true,\r\n            controller: \"EpicsDashboardCtrl\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/project/:pslug/epic/:epicref\",\r\n        {\r\n            templateUrl: \"epic/epic-detail.html\",\r\n            loader: true,\r\n            section: \"epics\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/project/:pslug/backlog\",\r\n        {\r\n            templateUrl: \"backlog/backlog.html\",\r\n            loader: true,\r\n            section: \"backlog\",\r\n            joyride: \"backlog\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/project/:pslug/kanban\",\r\n        {\r\n            templateUrl: \"kanban/kanban.html\",\r\n            loader: true,\r\n            section: \"kanban\",\r\n            joyride: \"kanban\"\r\n        }\r\n    )\r\n\r\n    # Milestone\r\n    $routeProvider.when(\"/project/:pslug/taskboard/:sslug\",\r\n        {\r\n            templateUrl: \"taskboard/taskboard.html\",\r\n            loader: true,\r\n            section: \"backlog\"\r\n        }\r\n    )\r\n\r\n    # User stories\r\n    $routeProvider.when(\"/project/:pslug/us/:usref\",\r\n        {\r\n            templateUrl: \"us/us-detail.html\",\r\n            loader: true,\r\n            section: \"backlog-kanban\"\r\n        }\r\n    )\r\n\r\n    # Tasks\r\n    $routeProvider.when(\"/project/:pslug/task/:taskref\",\r\n        {\r\n            templateUrl: \"task/task-detail.html\",\r\n            loader: true,\r\n            section: \"backlog-kanban\"\r\n        }\r\n    )\r\n\r\n    # Wiki\r\n    $routeProvider.when(\"/project/:pslug/wiki\",\r\n        {redirectTo: (params) -> \"/project/#{params.pslug}/wiki/home\"}, )\r\n    $routeProvider.when(\"/project/:pslug/wiki-list\",\r\n        {\r\n            templateUrl: \"wiki/wiki-list.html\",\r\n            loader: true,\r\n            section: \"wiki\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/wiki/:slug\",\r\n        {\r\n            templateUrl: \"wiki/wiki.html\",\r\n            loader: true,\r\n            section: \"wiki\"\r\n        }\r\n    )\r\n\r\n    # Team\r\n    $routeProvider.when(\"/project/:pslug/team\",\r\n        {\r\n            templateUrl: \"team/team.html\",\r\n            loader: true,\r\n            section: \"team\"\r\n        }\r\n    )\r\n\r\n    # Issues\r\n    $routeProvider.when(\"/project/:pslug/issues\",\r\n        {\r\n            templateUrl: \"issue/issues.html\",\r\n            loader: true,\r\n            section: \"issues\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/issue/:issueref\",\r\n        {\r\n            templateUrl: \"issue/issues-detail.html\",\r\n            loader: true,\r\n            section: \"issues\"\r\n        }\r\n    )\r\n\r\n    # Admin - Project Profile\r\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/details\",\r\n        {\r\n            templateUrl: \"admin/admin-project-profile.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/default-values\",\r\n        {\r\n            templateUrl: \"admin/admin-project-default-values.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/modules\",\r\n        {\r\n            templateUrl: \"admin/admin-project-modules.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/export\",\r\n        {\r\n            templateUrl: \"admin/admin-project-export.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/reports\",\r\n        {\r\n            templateUrl: \"admin/admin-project-reports.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/status\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-status.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/points\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-points.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/priorities\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-priorities.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/severities\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-severities.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/types\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-types.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/custom-fields\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-custom-fields.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/tags\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-tags.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/project-values/due-dates\",\r\n        {\r\n            templateUrl: \"admin/admin-project-values-due-dates.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/memberships\",\r\n        {\r\n            templateUrl: \"admin/admin-memberships.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    # Admin - Roles\r\n    $routeProvider.when(\"/project/:pslug/admin/roles\",\r\n        {\r\n            templateUrl: \"admin/admin-roles.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n\r\n    # Admin - Third Parties\r\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/webhooks\",\r\n        {\r\n            templateUrl: \"admin/admin-third-parties-webhooks.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/github\",\r\n        {\r\n            templateUrl: \"admin/admin-third-parties-github.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/gitlab\",\r\n        {\r\n            templateUrl: \"admin/admin-third-parties-gitlab.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/bitbucket\",\r\n        {\r\n            templateUrl: \"admin/admin-third-parties-bitbucket.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/gogs\",\r\n        {\r\n            templateUrl: \"admin/admin-third-parties-gogs.html\",\r\n            section: \"admin\"\r\n        }\r\n    )\r\n    # Admin - Contrib Plugins\r\n    $routeProvider.when(\"/project/:pslug/admin/contrib/:plugin\",\r\n        {templateUrl: \"contrib/main.html\"})\r\n\r\n    # Transfer project\r\n    $routeProvider.when(\"/project/:pslug/transfer/:token\",\r\n        {\r\n            templateUrl: \"projects/transfer/transfer-page.html\",\r\n            loader: true,\r\n            controller: \"Project\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    # User settings\r\n    $routeProvider.when(\"/user-settings/user-profile\",\r\n        {templateUrl: \"user/user-profile.html\"})\r\n    $routeProvider.when(\"/user-settings/user-change-password\",\r\n        {templateUrl: \"user/user-change-password.html\"})\r\n    $routeProvider.when(\"/user-settings/user-project-settings\",\r\n        {templateUrl: \"user/user-project-settings.html\"})\r\n    $routeProvider.when(\"/user-settings/mail-notifications\",\r\n        {templateUrl: \"user/mail-notifications.html\"})\r\n    $routeProvider.when(\"/user-settings/live-notifications\",\r\n        {templateUrl: \"user/live-notifications.html\"})\r\n    $routeProvider.when(\"/user-settings/web-notifications\",\r\n        {templateUrl: \"user/web-notifications.html\"})\r\n    $routeProvider.when(\"/change-email/:email_token\",\r\n        {templateUrl: \"user/change-email.html\"})\r\n    $routeProvider.when(\"/cancel-account/:cancel_token\",\r\n        {templateUrl: \"user/cancel-account.html\"})\r\n\r\n    # UserSettings - Contrib Plugins\r\n    $routeProvider.when(\"/user-settings/contrib/:plugin\",\r\n        {templateUrl: \"contrib/user-settings.html\"})\r\n\r\n    # User profile\r\n    $routeProvider.when(\"/profile\",\r\n        {\r\n            templateUrl: \"profile/profile.html\",\r\n            loader: true,\r\n            access: {\r\n                requiresLogin: true\r\n            },\r\n            controller: \"Profile\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    # Notifications\r\n    $routeProvider.when(\"/notifications\",\r\n        {\r\n            templateUrl: \"notifications/notifications.html\",\r\n            loader: true,\r\n            access: {\r\n                requiresLogin: true\r\n            },\r\n            controller: \"Notifications\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    $routeProvider.when(\"/profile/:slug\",\r\n        {\r\n            templateUrl: \"profile/profile.html\",\r\n            loader: true,\r\n            controller: \"Profile\",\r\n            controllerAs: \"vm\"\r\n        }\r\n    )\r\n\r\n    # Auth\r\n    $routeProvider.when(\"/login\",\r\n        {\r\n            templateUrl: \"auth/login.html\",\r\n            title: \"LOGIN.PAGE_TITLE\",\r\n            description: \"LOGIN.PAGE_DESCRIPTION\",\r\n            disableHeader: true,\r\n            controller: \"LoginPage\",\r\n        }\r\n    )\r\n    $routeProvider.when(\"/register\",\r\n        {\r\n            templateUrl: \"auth/register.html\",\r\n            title: \"REGISTER.PAGE_TITLE\",\r\n            description: \"REGISTER.PAGE_DESCRIPTION\",\r\n            disableHeader: true\r\n        }\r\n    )\r\n    $routeProvider.when(\"/forgot-password\",\r\n        {\r\n            templateUrl: \"auth/forgot-password.html\",\r\n            title: \"FORGOT_PASSWORD.PAGE_TITLE\",\r\n            description: \"FORGOT_PASSWORD.PAGE_DESCRIPTION\",\r\n            disableHeader: true\r\n        }\r\n    )\r\n    $routeProvider.when(\"/change-password/:token\",\r\n        {\r\n            templateUrl: \"auth/change-password-from-recovery.html\",\r\n            title: \"CHANGE_PASSWORD.PAGE_TITLE\",\r\n            description: \"CHANGE_PASSWORD.PAGE_TITLE\",\r\n            disableHeader: true\r\n        }\r\n    )\r\n    $routeProvider.when(\"/invitation/:token\",\r\n        {\r\n            templateUrl: \"auth/invitation.html\",\r\n            title: \"INVITATION.PAGE_TITLE\",\r\n            description: \"INVITATION.PAGE_DESCRIPTION\",\r\n            disableHeader: true\r\n        }\r\n    )\r\n    $routeProvider.when(\"/external-apps\",\r\n        {\r\n            templateUrl: \"external-apps/external-app.html\",\r\n            title: \"EXTERNAL_APP.PAGE_TITLE\",\r\n            description: \"EXTERNAL_APP.PAGE_DESCRIPTION\",\r\n            controller: \"ExternalApp\",\r\n            controllerAs: \"vm\",\r\n            disableHeader: true,\r\n            mobileViewport: true\r\n        }\r\n    )\r\n\r\n    # Errors/Exceptions\r\n    $routeProvider.when(\"/blocked-project/:pslug/\",\r\n        {\r\n            templateUrl: \"projects/project/blocked-project.html\",\r\n            loader: true,\r\n        }\r\n    )\r\n    $routeProvider.when(\"/error\",\r\n        {templateUrl: \"error/error.html\"})\r\n    $routeProvider.when(\"/not-found\",\r\n        {templateUrl: \"error/not-found.html\"})\r\n    $routeProvider.when(\"/permission-denied\",\r\n        {templateUrl: \"error/permission-denied.html\"})\r\n\r\n    $routeProvider.otherwise({templateUrl: \"error/not-found.html\"})\r\n    $locationProvider.html5Mode({enabled: true, requireBase: false})\r\n\r\n    defaultHeaders = {\r\n        \"Content-Type\": \"application/json\"\r\n        \"Accept-Language\": window.taigaConfig.defaultLanguage || \"en\"\r\n        \"X-Session-Id\": taiga.sessionId\r\n    }\r\n\r\n    $httpProvider.defaults.headers.delete = defaultHeaders\r\n    $httpProvider.defaults.headers.patch = defaultHeaders\r\n    $httpProvider.defaults.headers.post = defaultHeaders\r\n    $httpProvider.defaults.headers.put = defaultHeaders\r\n    $httpProvider.defaults.headers.get = {\r\n        \"X-Session-Id\": taiga.sessionId\r\n    }\r\n\r\n    $httpProvider.useApplyAsync(true)\r\n\r\n    $tgEventsProvider.setSessionId(taiga.sessionId)\r\n\r\n    # Add next param when user try to access to a secction need auth permissions.\r\n    authHttpIntercept = ($q, $location, $navUrls, $lightboxService, errorHandlingService) ->\r\n        httpResponseError = (response) ->\r\n            if response.status == 0 || (response.status == -1 && !response.config.cancelable)\r\n                $lightboxService.closeAll()\r\n\r\n                errorHandlingService.error()\r\n            else if response.status == 401 and $location.url().indexOf('/login') == -1\r\n                nextUrl = $location.url()\r\n                search = $location.search()\r\n\r\n                if search.force_next\r\n                    $location.url($navUrls.resolve(\"login\"))\r\n                        .search(\"force_next\", search.force_next)\r\n                else\r\n                    $location.url($navUrls.resolve(\"login\"))\r\n                        .search({\r\n                            \"unauthorized\": true\r\n                            \"next\": nextUrl\r\n                        })\r\n\r\n            return $q.reject(response)\r\n\r\n        return {\r\n            responseError: httpResponseError\r\n        }\r\n\r\n    $provide.factory(\"authHttpIntercept\", [\"$q\", \"$location\", \"$tgNavUrls\", \"lightboxService\",\r\n                                           \"tgErrorHandlingService\", authHttpIntercept])\r\n\r\n    $httpProvider.interceptors.push(\"authHttpIntercept\")\r\n\r\n\r\n    loaderIntercept = ($q, loaderService) ->\r\n        return {\r\n            request: (config) ->\r\n                loaderService.logRequest()\r\n\r\n                return config\r\n\r\n            requestError: (rejection) ->\r\n                loaderService.logResponse()\r\n\r\n                return $q.reject(rejection)\r\n\r\n            responseError: (rejection) ->\r\n                loaderService.logResponse()\r\n\r\n                return $q.reject(rejection)\r\n\r\n            response: (response) ->\r\n                loaderService.logResponse()\r\n\r\n                return response\r\n        }\r\n\r\n\r\n    $provide.factory(\"loaderIntercept\", [\"$q\", \"tgLoader\", loaderIntercept])\r\n\r\n    $httpProvider.interceptors.push(\"loaderIntercept\")\r\n\r\n    # If there is an error in the version throw a notify error.\r\n    # IMPROVEiMENT: Move this version error handler to USs, issues and tasks repository\r\n    versionCheckHttpIntercept = ($q) ->\r\n        httpResponseError = (response) ->\r\n            if response.status == 400 && response.data.version\r\n                # HACK: to prevent circular dependencies with [$tgConfirm, $translate]\r\n                $injector = angular.element(\"body\").injector()\r\n                $injector.invoke([\"$tgConfirm\", \"$translate\", ($confirm, $translate) =>\r\n                    versionErrorMsg = $translate.instant(\"ERROR.VERSION_ERROR\")\r\n                    $confirm.notify(\"error\", versionErrorMsg, null, 10000)\r\n                ])\r\n\r\n            return $q.reject(response)\r\n\r\n        return {responseError: httpResponseError}\r\n\r\n    $provide.factory(\"versionCheckHttpIntercept\", [\"$q\", versionCheckHttpIntercept])\r\n\r\n    $httpProvider.interceptors.push(\"versionCheckHttpIntercept\")\r\n\r\n\r\n    blockingIntercept = ($q, errorHandlingService) ->\r\n        # API calls can return blocked elements and in that situation the user will be redirected\r\n        # to the blocked project page\r\n        # This can happens in two scenarios\r\n        # - An ok response containing a blocked_code in the data\r\n        # - An error reponse when updating/creating/deleting including a 451 error code\r\n        redirectToBlockedPage = ->\r\n            errorHandlingService.block()\r\n\r\n        responseOk = (response) ->\r\n            if response.data.blocked_code\r\n                redirectToBlockedPage()\r\n\r\n            return response\r\n\r\n        responseError = (response) ->\r\n            if response.status == 451\r\n                redirectToBlockedPage()\r\n\r\n            return $q.reject(response)\r\n\r\n        return {\r\n            response: responseOk\r\n            responseError: responseError\r\n        }\r\n\r\n    $provide.factory(\"blockingIntercept\", [\"$q\", \"tgErrorHandlingService\", blockingIntercept])\r\n\r\n    $httpProvider.interceptors.push(\"blockingIntercept\")\r\n\r\n\r\n    $compileProvider.debugInfoEnabled(window.taigaConfig.debugInfo || false)\r\n\r\n    if localStorage.userInfo\r\n        userInfo = JSON.parse(localStorage.userInfo)\r\n\r\n    # i18n\r\n    preferedLangCode = userInfo?.lang || window.taigaConfig.defaultLanguage || \"en\"\r\n\r\n    $translatePartialLoaderProvider.addPart('taiga')\r\n    $translateProvider\r\n        .useLoader('$translatePartialLoader', {\r\n            urlTemplate: '/' + window._version + '/locales/{part}/locale-{lang}.json'\r\n        })\r\n        .useSanitizeValueStrategy('escapeParameters')\r\n        .addInterpolation('$translateMessageFormatInterpolation')\r\n        .preferredLanguage(preferedLangCode)\r\n\r\n    $translateProvider.fallbackLanguage(preferedLangCode)\r\n\r\n    # decoratos plugins\r\n    decorators = window.getDecorators()\r\n\r\n    _.each decorators, (decorator) ->\r\n        $provide.decorator decorator.provider, decorator.decorator\r\n\r\n\r\ni18nInit = (lang, $translate) ->\r\n    # i18n - moment.js\r\n    moment.locale(lang)\r\n\r\n    if (lang != 'en') # en is the default, the file doesn't exist\r\n        ljs.load \"/#{window._version}/locales/moment-locales/\" + lang + \".js\"\r\n\r\n    # i18n - checksley.js\r\n    messages = {\r\n        defaultMessage: $translate.instant(\"COMMON.FORM_ERRORS.DEFAULT_MESSAGE\")\r\n        type: {\r\n            email: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_EMAIL\")\r\n            url: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_URL\")\r\n            urlstrict: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_URLSTRICT\")\r\n            number: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_NUMBER\")\r\n            digits: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_DIGITS\")\r\n            dateIso: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_DATEISO\")\r\n            alphanum: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_ALPHANUM\")\r\n            phone: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_PHONE\")\r\n        }\r\n        notnull: $translate.instant(\"COMMON.FORM_ERRORS.NOTNULL\")\r\n        notblank: $translate.instant(\"COMMON.FORM_ERRORS.NOT_BLANK\")\r\n        required: $translate.instant(\"COMMON.FORM_ERRORS.REQUIRED\")\r\n        regexp: $translate.instant(\"COMMON.FORM_ERRORS.REGEXP\")\r\n        min: $translate.instant(\"COMMON.FORM_ERRORS.MIN\")\r\n        max: $translate.instant(\"COMMON.FORM_ERRORS.MAX\")\r\n        range: $translate.instant(\"COMMON.FORM_ERRORS.RANGE\")\r\n        minlength: $translate.instant(\"COMMON.FORM_ERRORS.MIN_LENGTH\")\r\n        maxlength: $translate.instant(\"COMMON.FORM_ERRORS.MAX_LENGTH\")\r\n        rangelength: $translate.instant(\"COMMON.FORM_ERRORS.RANGE_LENGTH\")\r\n        mincheck: $translate.instant(\"COMMON.FORM_ERRORS.MIN_CHECK\")\r\n        maxcheck: $translate.instant(\"COMMON.FORM_ERRORS.MAX_CHECK\")\r\n        rangecheck: $translate.instant(\"COMMON.FORM_ERRORS.RANGE_CHECK\")\r\n        equalto: $translate.instant(\"COMMON.FORM_ERRORS.EQUAL_TO\")\r\n        linewidth: $translate.instant(\"COMMON.FORM_ERRORS.LINEWIDTH\") # Extra validator\r\n        pikaday: $translate.instant(\"COMMON.FORM_ERRORS.PIKADAY\") # Extra validator\r\n    }\r\n    checksley.updateMessages('default', messages)\r\n\r\n\r\ninit = ($log, $rootscope, $auth, $events, $analytics, $translate, $location, $navUrls, appMetaService,\r\n        loaderService, navigationBarService, errorHandlingService, lightboxService, $tgConfig,\r\n        projectService) ->\r\n    $log.debug(\"Initialize application\")\r\n\r\n    $rootscope.$on '$translatePartialLoaderStructureChanged', () ->\r\n        $translate.refresh()\r\n\r\n    # Checksley - Extra validators\r\n    validators = {\r\n        linewidth: (val, width) ->\r\n            lines = taiga.nl2br(val).split(\"<br />\")\r\n\r\n            valid = _.every lines, (line) ->\r\n                line.length < width\r\n\r\n            return valid\r\n        pikaday: (val) ->\r\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n            return moment(val, prettyDate).isValid()\r\n        url: (val) ->\r\n            re_weburl = new RegExp(\r\n                \"^\" +\r\n                    # protocol identifier\r\n                    \"(?:(?:https?|ftp)://)\" +\r\n                    # user:pass authentication\r\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n                    \"(?:\" +\r\n                    # IP address exclusion\r\n                    # private & local networks\r\n                    \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n                    \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n                    \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\r\n                    # IP address dotted notation octets\r\n                    # excludes loopback network 0.0.0.0\r\n                    # excludes reserved space >= 224.0.0.0\r\n                    # excludes network & broacast addresses\r\n                    # (first & last IP address of each class)\r\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n                \"|\" +\r\n                    # host name\r\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n                    # domain name\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n                    # TLD identifier\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n                    # TLD may end with dot\r\n                    \"\\\\.?\" +\r\n                    \")\" +\r\n                    # port number\r\n                    \"(?::\\\\d{2,5})?\" +\r\n                    # resource path\r\n                    \"(?:[/?#]\\\\S*)?\" +\r\n                \"$\", \"i\"\r\n            )\r\n            return re_weburl.test(val)\r\n\r\n    }\r\n    checksley.updateValidators(validators)\r\n\r\n    # Taiga Plugins\r\n    $rootscope.contribPlugins = @.taigaContribPlugins\r\n    $rootscope.adminPlugins = _.filter(@.taigaContribPlugins, {\"type\": \"admin\"})\r\n    $rootscope.userSettingsPlugins = _.filter(@.taigaContribPlugins, {\"type\": \"userSettings\"})\r\n\r\n    $rootscope.$on \"$translateChangeEnd\", (e, ctx) ->\r\n        lang = ctx.language\r\n        i18nInit(lang, $translate)\r\n        # RTL\r\n        rtlLanguages = $tgConfig.get(\"rtlLanguages\", [])\r\n        $rootscope.isRTL = rtlLanguages.indexOf(lang) > -1\r\n\r\n    # bluebird\r\n    Promise.setScheduler (cb) ->\r\n        $rootscope.$evalAsync(cb)\r\n\r\n    $events.setupConnection()\r\n\r\n    # Load user\r\n    if $auth.isAuthenticated()\r\n        user = $auth.getUser()\r\n        $auth.showTerms()\r\n    # Analytics\r\n    $analytics.initialize()\r\n\r\n    # Initialize error handling service when location change start\r\n    $rootscope.$on '$locationChangeStart',  (event) ->\r\n        errorHandlingService.init()\r\n\r\n        if projectService.project?.get('blocked_code')\r\n            projectService.setProject(null)\r\n            errorHandlingService.block()\r\n\r\n        if lightboxService.getLightboxOpen().length\r\n            event.preventDefault();\r\n\r\n            lightboxService.closeAll()\r\n\r\n    # On the first page load the loader is painted in `$routeChangeSuccess`\r\n    # because we need to hide the tg-navigation-bar.\r\n    # In the other cases the loader is in `$routeChangeSuccess`\r\n    # because `location.noreload` prevent to execute this event.\r\n    un = $rootscope.$on '$routeChangeStart',  (event, next) ->\r\n        if next.loader\r\n            loaderService.start(true)\r\n\r\n        un()\r\n\r\n    $rootscope.$on '$routeChangeSuccess', (event, next) ->\r\n        if next.loader\r\n            loaderService.start(true)\r\n\r\n        if next.access && next.access.requiresLogin\r\n            if !$auth.isAuthenticated()\r\n                $location.path($navUrls.resolve(\"login\"))\r\n\r\n        if next.title or next.description\r\n            title = $translate.instant(next.title or \"\")\r\n            description = $translate.instant(next.description or \"\")\r\n            appMetaService.setAll(title, description)\r\n\r\n        if next.mobileViewport\r\n            appMetaService.addMobileViewport()\r\n        else\r\n            appMetaService.removeMobileViewport()\r\n\r\n        if next.disableHeader\r\n            navigationBarService.disableHeader()\r\n        else\r\n            navigationBarService.enableHeader()\r\n\r\n# Config for infinite scroll\r\nangular.module('infinite-scroll').value('THROTTLE_MILLISECONDS', 500)\r\n\r\n# Load modules\r\npluginsWithModule = _.filter(@.taigaContribPlugins, (plugin) -> plugin.module)\r\npluginsModules = _.map(pluginsWithModule, (plugin) -> plugin.module)\r\n\r\nmodules = [\r\n    # Main Global Modules\r\n    \"taigaBase\",\r\n    \"taigaCommon\",\r\n    \"taigaResources\",\r\n    \"taigaResources2\",\r\n    \"taigaAuth\",\r\n    \"taigaEvents\",\r\n\r\n    # Specific Modules\r\n    \"taigaHome\",\r\n    \"taigaNavigationBar\",\r\n    \"taigaProjects\",\r\n    \"taigaRelatedTasks\",\r\n    \"taigaBacklog\",\r\n    \"taigaTaskboard\",\r\n    \"taigaKanban\",\r\n    \"taigaIssues\",\r\n    \"taigaUserStories\",\r\n    \"taigaTasks\",\r\n    \"taigaTeam\",\r\n    \"taigaWiki\",\r\n    \"taigaSearch\",\r\n    \"taigaAdmin\",\r\n    \"taigaProject\",\r\n    \"taigaUserSettings\",\r\n    \"taigaFeedback\",\r\n    \"taigaPlugins\",\r\n    \"taigaIntegrations\",\r\n    \"taigaComponents\",\r\n\r\n    # new modules\r\n    \"taigaProfile\",\r\n    \"taigaHome\",\r\n    \"taigaUserTimeline\",\r\n    \"taigaExternalApps\",\r\n    \"taigaDiscover\",\r\n    \"taigaHistory\",\r\n    \"taigaNotifications\",\r\n    \"taigaWikiHistory\",\r\n    \"taigaEpics\",\r\n    \"taigaUtils\"\r\n\r\n    # template cache\r\n    \"templates\",\r\n\r\n    # Vendor modules\r\n    \"ngSanitize\",\r\n    \"ngRoute\",\r\n    \"ngAnimate\",\r\n    \"ngAria\",\r\n    \"pascalprecht.translate\",\r\n    \"infinite-scroll\",\r\n    \"tgRepeat\"\r\n].concat(pluginsModules)\r\n\r\n# Main module definition\r\nmodule = angular.module(\"taiga\", modules)\r\n\r\nmodule.config([\r\n    \"$routeProvider\",\r\n    \"$locationProvider\",\r\n    \"$httpProvider\",\r\n    \"$provide\",\r\n    \"$tgEventsProvider\",\r\n    \"$compileProvider\",\r\n    \"$translateProvider\",\r\n    \"$translatePartialLoaderProvider\",\r\n    \"$animateProvider\",\r\n    configure\r\n])\r\n\r\nmodule.run([\r\n    \"$log\",\r\n    \"$rootScope\",\r\n    \"$tgAuth\",\r\n    \"$tgEvents\",\r\n    \"$tgAnalytics\",\r\n    \"$translate\",\r\n    \"$tgLocation\",\r\n    \"$tgNavUrls\",\r\n    \"tgAppMetaService\",\r\n    \"tgLoader\",\r\n    \"tgNavigationBarService\",\r\n    \"tgErrorHandlingService\",\r\n    \"lightboxService\",\r\n    \"$tgConfig\",\r\n    \"tgProjectService\",\r\n    init\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: classes.coffee\r\n###\r\n\r\nclass TaigaBase\r\nclass TaigaService extends TaigaBase\r\nclass TaigaController extends TaigaBase\r\n    onInitialDataError: (xhr) =>\r\n        if xhr\r\n            if xhr.status == 404\r\n                @errorHandlingService.notfound()\r\n            else if xhr.status == 403\r\n                @errorHandlingService.permissionDenied()\r\n\r\n        return @q.reject(xhr)\r\n\r\n@.taiga.Base = TaigaBase\r\n@.taiga.Service = TaigaService\r\n@.taiga.Controller = TaigaController\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: utils.coffee\r\n###\r\n\r\naddClass = (el, className) ->\r\n    if (el.classList)\r\n        el.classList.add(className)\r\n    else\r\n        el.className += ' ' + className\r\n\r\n\r\nnl2br = (str) =>\r\n    breakTag = '<br />'\r\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2')\r\n\r\n\r\nbindMethods = (object) =>\r\n    dependencies = _.keys(object)\r\n\r\n    methods = []\r\n\r\n    _.forIn object, (value, key) =>\r\n        if key not in dependencies && _.isFunction(value)\r\n            methods.push(key)\r\n\r\n    _.bindAll(object, methods)\r\n\r\n\r\nbindOnce = (scope, attr, continuation) =>\r\n    val = scope.$eval(attr)\r\n    if val != undefined\r\n        return continuation(val)\r\n\r\n    delBind = null\r\n    delBind = scope.$watch attr, (val) ->\r\n        return if val is undefined\r\n        continuation(val)\r\n        delBind() if delBind\r\n\r\n\r\nmixOf = (base, mixins...) ->\r\n    class Mixed extends base\r\n\r\n    for mixin in mixins by -1 #earlier mixins override later ones\r\n        for name, method of mixin::\r\n            Mixed::[name] = method\r\n    Mixed\r\n\r\n\r\ntrim = (data, char) ->\r\n    return _.trim(data, char)\r\n\r\n\r\nslugify = (data) ->\r\n    return data.toString().toLowerCase().trim()\r\n        .replace(/\\s+/g, '-')\r\n        .replace(/&/g, '-and-')\r\n        .replace(/[^\\w\\-]+/g, '')\r\n        .replace(/\\-\\-+/g, '-')\r\n\r\n\r\nunslugify = (data) ->\r\n    if data\r\n        return _.capitalize(data.replace(/-/g, ' '))\r\n    return data\r\n\r\n\r\ntoggleText = (element, texts) ->\r\n    nextTextPosition = element.data('nextTextPosition')\r\n    nextTextPosition = 0 if not nextTextPosition? or nextTextPosition >= texts.length\r\n    text = texts[nextTextPosition]\r\n    element.data('nextTextPosition', nextTextPosition + 1)\r\n    element.text(text)\r\n\r\n\r\ngroupBy = (coll, pred) ->\r\n    result = {}\r\n    for item in coll\r\n        result[pred(item)] = item\r\n\r\n    return result\r\n\r\n\r\ntimeout = (wait, continuation) ->\r\n    return window.setTimeout(continuation, wait)\r\n\r\n\r\ncancelTimeout = (timeoutVar) ->\r\n    window.clearTimeout(timeoutVar)\r\n\r\n\r\nscopeDefer = (scope, func) ->\r\n    _.defer =>\r\n        scope.$apply(func)\r\n\r\n\r\ntoString = (value) ->\r\n    if _.isNumber(value)\r\n        return value + \"\"\r\n    else if _.isString(value)\r\n        return value\r\n    else if _.isPlainObject(value)\r\n        return JSON.stringify(value)\r\n    else if _.isUndefined(value)\r\n        return \"\"\r\n    return value.toString()\r\n\r\n\r\njoinStr = (str, coll) ->\r\n    return coll.join(str)\r\n\r\n\r\ndebounce = (wait, func) ->\r\n    return _.debounce(func, wait, {leading: true, trailing: false})\r\n\r\n\r\ndebounceLeading = (wait, func) ->\r\n    return _.debounce(func, wait, {leading: false, trailing: true})\r\n\r\n\r\nstartswith = (str1, str2) ->\r\n    return _.startsWith(str1, str2)\r\n\r\n\r\ntruncate = (str, maxLength, suffix=\"...\") ->\r\n    return str if (typeof str != \"string\") and not (str instanceof String)\r\n\r\n    out = str.slice(0)\r\n\r\n    if out.length > maxLength\r\n        out = out.substring(0, maxLength + 1)\r\n        out = out.substring(0, Math.min(out.length, out.lastIndexOf(\" \")))\r\n        out = out + suffix\r\n\r\n    return out\r\n\r\n\r\nsizeFormat = (input, precision=1) ->\r\n    if isNaN(parseFloat(input)) or not isFinite(input)\r\n        return \"-\"\r\n\r\n    if input == 0\r\n        return \"0 bytes\"\r\n\r\n    units = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"]\r\n    number = Math.floor(Math.log(input) / Math.log(1024))\r\n    if number > 5\r\n        number = 5\r\n    size = (input / Math.pow(1024, number)).toFixed(precision)\r\n    return  \"#{size} #{units[number]}\"\r\n\r\n\r\nstripTags = (str, exception) ->\r\n    if exception\r\n        pattern = new RegExp('<(?!' + exception + '\\s*\\/?)[^>]+>', 'gi')\r\n        return String(str).replace(pattern, '')\r\n    else\r\n        return String(str).replace(/<\\/?[^>]+>/g, '')\r\n\r\n\r\nreplaceTags = (str, tags, replace) ->\r\n    # open tag\r\n    pattern = new RegExp('<(' + tags + ')>', 'gi')\r\n    str = str.replace(pattern, '<' + replace + '>')\r\n\r\n    # close tag\r\n    pattern = new RegExp('<\\/(' + tags + ')>', 'gi')\r\n    str = str.replace(pattern, '</' + replace + '>')\r\n\r\n    return str\r\n\r\n\r\ndefineImmutableProperty = (obj, name, fn) =>\r\n    Object.defineProperty obj, name, {\r\n        get: () =>\r\n            if !_.isFunction(fn)\r\n                throw \"defineImmutableProperty third param must be a function\"\r\n\r\n            fn_result = fn()\r\n            if fn_result && _.isObject(fn_result)\r\n                if fn_result.size == undefined\r\n                    throw \"defineImmutableProperty must return immutable data\"\r\n\r\n            return fn_result\r\n    }\r\n\r\n\r\n_.mixin\r\n    removeKeys: (obj, keys) ->\r\n        _.chain([keys]).flatten().reduce(\r\n            (obj, key) ->\r\n                delete obj[key]; obj\r\n            , obj).value()\r\n\r\n    cartesianProduct: ->\r\n        _.reduceRight(\r\n            arguments, (a,b) ->\r\n                _.flatten(_.map(a, (x) -> _.map b, (y) -> [y].concat(x)), true)\r\n            , [ [] ])\r\n\r\n\r\nisImage = (name) ->\r\n    return name.match(/\\.(jpe?g|png|gif|gifv|webm|svg|psd)/i) != null\r\n\r\nisEmail = (name) ->\r\n    return name? and name.match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) != null\r\n\r\nisPdf = (name) ->\r\n    return name.match(/\\.(pdf)/i) != null\r\n\r\n\r\npatch = (oldImmutable, newImmutable) ->\r\n    pathObj = {}\r\n\r\n    newImmutable.forEach (newValue, key) ->\r\n        if newValue != oldImmutable.get(key)\r\n            if newValue.toJS\r\n                pathObj[key] = newValue.toJS()\r\n            else\r\n                pathObj[key] = newValue\r\n\r\n    return pathObj\r\n\r\nDEFAULT_COLOR_LIST = [\r\n    '#fce94f', '#edd400', '#c4a000', '#8ae234', '#73d216', '#4e9a06', '#d3d7cf',\r\n    '#fcaf3e', '#f57900', '#ce5c00', '#729fcf', '#3465a4', '#204a87', '#888a85',\r\n    '#ad7fa8', '#75507b', '#5c3566', '#ef2929', '#cc0000', '#a40000', '#222222'\r\n]\r\n\r\ngetRandomDefaultColor = () ->\r\n    return _.sample(DEFAULT_COLOR_LIST)\r\n\r\ngetDefaulColorList = () ->\r\n    return _.clone(DEFAULT_COLOR_LIST)\r\n\r\ngetMatches = (string, regex, index) ->\r\n    index || (index = 1)\r\n    matches = []\r\n    match = null\r\n\r\n    while match = regex.exec(string)\r\n        if index == -1\r\n            matches.push(match)\r\n        else\r\n            matches.push(match[index])\r\n\r\n    return matches\r\n\r\nrandomInt = (start, end) ->\r\n    interval = end - start\r\n    return start + Math.floor(Math.random()*(interval+1))\r\n\r\nnormalizeString = (string) ->\r\n    normalizedString = string\r\n    normalizedString = normalizedString.replace(\"Á\", \"A\").replace(\"Ä\", \"A\").replace(\"À\", \"A\")\r\n    normalizedString = normalizedString.replace(\"É\", \"E\").replace(\"Ë\", \"E\").replace(\"È\", \"E\")\r\n    normalizedString = normalizedString.replace(\"Í\", \"I\").replace(\"Ï\", \"I\").replace(\"Ì\", \"I\")\r\n    normalizedString = normalizedString.replace(\"Ó\", \"O\").replace(\"Ö\", \"O\").replace(\"Ò\", \"O\")\r\n    normalizedString = normalizedString.replace(\"Ú\", \"U\").replace(\"Ü\", \"U\").replace(\"Ù\", \"U\")\r\n    return normalizedString\r\n\r\ntaiga = @.taiga\r\ntaiga.addClass = addClass\r\ntaiga.nl2br = nl2br\r\ntaiga.bindMethods = bindMethods\r\ntaiga.bindOnce = bindOnce\r\ntaiga.mixOf = mixOf\r\ntaiga.trim = trim\r\ntaiga.slugify = slugify\r\ntaiga.unslugify = unslugify\r\ntaiga.toggleText = toggleText\r\ntaiga.groupBy = groupBy\r\ntaiga.timeout = timeout\r\ntaiga.cancelTimeout = cancelTimeout\r\ntaiga.scopeDefer = scopeDefer\r\ntaiga.toString = toString\r\ntaiga.joinStr = joinStr\r\ntaiga.truncate = truncate\r\ntaiga.debounce = debounce\r\ntaiga.debounceLeading = debounceLeading\r\ntaiga.startswith = startswith\r\ntaiga.sizeFormat = sizeFormat\r\ntaiga.stripTags = stripTags\r\ntaiga.replaceTags = replaceTags\r\ntaiga.defineImmutableProperty = defineImmutableProperty\r\ntaiga.isImage = isImage\r\ntaiga.isEmail = isEmail\r\ntaiga.isPdf = isPdf\r\ntaiga.patch = patch\r\ntaiga.getRandomDefaultColor = getRandomDefaultColor\r\ntaiga.getDefaulColorList = getDefaulColorList\r\ntaiga.getMatches = getMatches\r\ntaiga.randomInt = randomInt\r\ntaiga.normalizeString = normalizeString\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/controllerMixins.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngroupBy = @.taiga.groupBy\r\njoinStr = @.taiga.joinStr\r\ntrim = @.taiga.trim\r\ntoString = @.taiga.toString\r\n\r\n\r\n#############################################################################\r\n## Page Mixin\r\n#############################################################################\r\n\r\nclass PageMixin\r\n    fillUsersAndRoles: (users, roles) ->\r\n        activeUsers = _.filter(users, (user) => user.is_active)\r\n        @scope.activeUsers = _.sortBy(activeUsers, \"full_name_display\")\r\n        @scope.activeUsersById = groupBy(@scope.activeUsers, (e) -> e.id)\r\n\r\n        @scope.users = _.sortBy(users, \"full_name_display\")\r\n        @scope.usersById = groupBy(users, (e) -> e.id)\r\n\r\n        @scope.roles = _.sortBy(roles, \"order\")\r\n        computableRoles = _(@scope.project.members).map(\"role\").uniq().value()\r\n        @scope.computableRoles = _(roles).filter(\"computable\")\r\n                                         .filter((x) -> _.includes(computableRoles, x.id))\r\n                                         .value()\r\n    loadUsersAndRoles: ->\r\n        promise = @q.all([\r\n            @rs.projects.usersList(@scope.projectId),\r\n            @rs.projects.rolesList(@scope.projectId)\r\n        ])\r\n\r\n        return promise.then (results) =>\r\n            [users, roles] = results\r\n            @.fillUsersAndRoles(users, roles)\r\n            return results\r\n\r\ntaiga.PageMixin = PageMixin\r\n\r\n\r\n#############################################################################\r\n## Filters Mixin\r\n#############################################################################\r\n# This mixin requires @location ($tgLocation), and @scope\r\n\r\nclass FiltersMixin\r\n    selectFilter: (name, value, load=false) ->\r\n        params = @location.search()\r\n        if params[name] != undefined and name != \"page\"\r\n            existing = _.map(taiga.toString(params[name]).split(\",\"), (x) -> trim(x))\r\n            existing.push(taiga.toString(value))\r\n            existing = _.compact(existing)\r\n            value = joinStr(\",\", _.uniq(existing))\r\n\r\n        if !@location.isInCurrentRouteParams(name, value)\r\n            location = if load then @location else @location.noreload(@scope)\r\n            location.search(name, value)\r\n\r\n    replaceFilter: (name, value, load=false) ->\r\n        if !@location.isInCurrentRouteParams(name, value)\r\n            location = if load then @location else @location.noreload(@scope)\r\n            location.search(name, value)\r\n\r\n    replaceAllFilters: (filters, load=false) ->\r\n        location = if load then @location else @location.noreload(@scope)\r\n        location.search(filters)\r\n\r\n    unselectFilter: (name, value, load=false) ->\r\n        params = @location.search()\r\n\r\n        if params[name] is undefined\r\n            return\r\n\r\n        if value is undefined or value is null\r\n            delete params[name]\r\n\r\n        parsedValues = _.map(taiga.toString(params[name]).split(\",\"), (x) -> trim(x))\r\n        newValues = _.reject(parsedValues, (x) -> x == taiga.toString(value))\r\n        newValues = _.compact(newValues)\r\n\r\n        if _.isEmpty(newValues)\r\n            value = null\r\n        else\r\n            value = joinStr(\",\", _.uniq(newValues))\r\n\r\n        location = if load then @location else @location.noreload(@scope)\r\n        location.search(name, value)\r\n\r\n    applyStoredFilters: (projectSlug, key) ->\r\n        if _.isEmpty(@location.search())\r\n            filters = @.getFilters(projectSlug, key)\r\n            if Object.keys(filters).length\r\n                @location.search(filters)\r\n                @location.replace()\r\n\r\n                return true\r\n\r\n        return false\r\n\r\n    storeFilters: (projectSlug, params, filtersHashSuffix) ->\r\n        ns = \"#{projectSlug}:#{filtersHashSuffix}\"\r\n        hash = taiga.generateHash([projectSlug, ns])\r\n        @storage.set(hash, params)\r\n\r\n    getFilters: (projectSlug, filtersHashSuffix) ->\r\n        ns = \"#{projectSlug}:#{filtersHashSuffix}\"\r\n        hash = taiga.generateHash([projectSlug, ns])\r\n\r\n        return @storage.get(hash) or {}\r\n\r\n    formatSelectedFilters: (type, list, urlIds) ->\r\n        selectedIds = urlIds.split(',')\r\n        selectedFilters = _.filter list, (it) ->\r\n            selectedIds.indexOf(_.toString(it.id)) != -1\r\n\r\n        invalidTags = _.filter selectedIds, (it) ->\r\n            return !_.find selectedFilters, (sit) -> _.toString(sit.id) == it\r\n\r\n        invalidAppliedTags =  _.map invalidTags, (it) ->\r\n            return {\r\n                id: it\r\n                key: type + \":\" + it\r\n                dataType: type,\r\n                name: it\r\n            }\r\n\r\n        validAppliedTags = _.map selectedFilters, (it) ->\r\n            return {\r\n                id: it.id\r\n                key: type + \":\" + it.id\r\n                dataType: type,\r\n                name: it.name\r\n                color: it.color\r\n            }\r\n\r\n        return invalidAppliedTags.concat(validAppliedTags)\r\n\r\ntaiga.FiltersMixin = FiltersMixin\r\n\r\n#############################################################################\r\n## Us Filters Mixin\r\n#############################################################################\r\n\r\nclass UsFiltersMixin\r\n    changeQ: (q) ->\r\n        @.replaceFilter(\"q\", q)\r\n        @.filtersReloadContent()\r\n        @.generateFilters()\r\n\r\n    removeFilter: (filter) ->\r\n        @.unselectFilter(filter.dataType, filter.id)\r\n        @.filtersReloadContent()\r\n        @.generateFilters()\r\n\r\n    addFilter: (newFilter) ->\r\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id)\r\n        @.filtersReloadContent()\r\n        @.generateFilters()\r\n\r\n    selectCustomFilter: (customFilter) ->\r\n        @.replaceAllFilters(customFilter.filter)\r\n        @.filtersReloadContent()\r\n        @.generateFilters()\r\n\r\n    saveCustomFilter: (name) ->\r\n        filters = {}\r\n        urlfilters = @location.search()\r\n        filters.tags = urlfilters.tags\r\n        filters.status = urlfilters.status\r\n        filters.assigned_to = urlfilters.assigned_to\r\n        filters.assigned_users = urlfilters.assigned_users\r\n        filters.owner = urlfilters.owner\r\n        filters.epic = urlfilters.epic\r\n        filters.role = urlfilters.role\r\n\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName).then (userFilters) =>\r\n            userFilters[name] = filters\r\n\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.storeCustomFiltersName).then(@.generateFilters)\r\n\r\n    removeCustomFilter: (customFilter) ->\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName).then (userFilters) =>\r\n            delete userFilters[customFilter.id]\r\n\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.storeCustomFiltersName).then(@.generateFilters)\r\n            @.generateFilters()\r\n\r\n    isFilterDataTypeSelected: (filterDataType) ->\r\n        for filter in @.selectedFilters\r\n            if (filter['dataType'] == filterDataType)\r\n                return true\r\n        return false\r\n\r\n    generateFilters: (milestone) ->\r\n        @.storeFilters(@params.pslug, @location.search(), @.storeFiltersName)\r\n\r\n        urlfilters = @location.search()\r\n\r\n        loadFilters = {}\r\n        loadFilters.project = @scope.projectId\r\n        loadFilters.tags = urlfilters.tags\r\n        loadFilters.status = urlfilters.status\r\n        loadFilters.assigned_users = urlfilters.assigned_users\r\n        loadFilters.assigned_to = urlfilters.assigned_to\r\n        loadFilters.owner = urlfilters.owner\r\n        loadFilters.epic = urlfilters.epic\r\n        loadFilters.role = urlfilters.role\r\n        loadFilters.q = urlfilters.q\r\n\r\n        if milestone\r\n            loadFilters.milestone = milestone\r\n\r\n        return @q.all([\r\n            @rs.userstories.filtersData(loadFilters),\r\n            @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName)\r\n        ]).then (result) =>\r\n            data = result[0]\r\n            customFiltersRaw = result[1]\r\n\r\n            statuses = _.map data.statuses, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            tags = _.map data.tags, (it) ->\r\n                it.id = it.name\r\n\r\n                return it\r\n            tagsWithAtLeastOneElement = _.filter tags, (tag) ->\r\n                return tag.count > 0\r\n            assignedUsers = _.map data.assigned_users, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.full_name || \"Unassigned\"\r\n\r\n                return it\r\n            assignedTo = _.map data.assigned_to, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.full_name || \"Unassigned\"\r\n\r\n                return it\r\n            role = _.map data.roles, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.name || \"Unassigned\"\r\n\r\n                return it\r\n            owner = _.map data.owners, (it) ->\r\n                it.id = it.id.toString()\r\n                it.name = it.full_name\r\n\r\n                return it\r\n            epic = _.map data.epics, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                    it.name = \"##{it.ref} #{it.subject}\"\r\n                else\r\n                    it.id = \"null\"\r\n                    it.name = \"Not in an epic\"\r\n\r\n                return it\r\n\r\n            @.selectedFilters = []\r\n\r\n            if loadFilters.status\r\n                selected = @.formatSelectedFilters(\"status\", statuses, loadFilters.status)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.tags\r\n                selected = @.formatSelectedFilters(\"tags\", tags, loadFilters.tags)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.assigned_users\r\n                selected = @.formatSelectedFilters(\"assigned_users\", assignedUsers, loadFilters.assigned_users)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.assigned_to\r\n                selected = @.formatSelectedFilters(\"assigned_to\", assignedTo, loadFilters.assigned_to)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.owner\r\n                selected = @.formatSelectedFilters(\"owner\", owner, loadFilters.owner)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.epic\r\n                selected = @.formatSelectedFilters(\"epic\", epic, loadFilters.epic)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.role\r\n                selected = @.formatSelectedFilters(\"role\", role, loadFilters.role)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            @.filterQ = loadFilters.q\r\n\r\n            @.filters = [\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\r\n                    dataType: \"status\",\r\n                    content: statuses\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\r\n                    dataType: \"tags\",\r\n                    content: tags,\r\n                    hideEmpty: true,\r\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_USERS\"),\r\n                    dataType: \"assigned_users\",\r\n                    content: assignedUsers\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\r\n                    dataType: \"role\",\r\n                    content: role\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\r\n                    dataType: \"owner\",\r\n                    content: owner\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.EPIC\"),\r\n                    dataType: \"epic\",\r\n                    content: epic\r\n                }\r\n            ]\r\n\r\n            @.customFilters = []\r\n            _.forOwn customFiltersRaw, (value, key) =>\r\n                @.customFilters.push({id: key, name: key, filter: value})\r\n\r\n\r\ntaiga.UsFiltersMixin = UsFiltersMixin\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaAdmin\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/auth.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaAuth\", [\"taigaResources\"])\r\n\r\nclass LoginPage\r\n    @.$inject = [\r\n        'tgCurrentUserService',\r\n        '$location',\r\n        '$tgNavUrls',\r\n        '$routeParams',\r\n        '$tgAuth'\r\n    ]\r\n\r\n    constructor: (currentUserService, $location, $navUrls, $routeParams, $auth) ->\r\n        if currentUserService.isAuthenticated()\r\n            if not $routeParams['force_login']\r\n                url = $navUrls.resolve(\"home\")\r\n                if $routeParams['next']\r\n                    url = decodeURIComponent($routeParams['next'])\r\n                    $location.search('next', null)\r\n\r\n                if $routeParams['unauthorized']\r\n                    $auth.clear()\r\n                    $auth.removeToken()\r\n                else\r\n                    $location.url(url)\r\n\r\n\r\nmodule.controller('LoginPage', LoginPage)\r\n\r\n#############################################################################\r\n## Authentication Service\r\n#############################################################################\r\n\r\nclass AuthService extends taiga.Service\r\n    @.$inject = [\"$rootScope\",\r\n                 \"$tgStorage\",\r\n                 \"$tgModel\",\r\n                 \"$tgResources\",\r\n                 \"$tgHttp\",\r\n                 \"$tgUrls\",\r\n                 \"$tgConfig\",\r\n                 \"$translate\",\r\n                 \"tgCurrentUserService\",\r\n                 \"tgThemeService\",\r\n                 \"$tgAnalytics\",\r\n                 \"tgTermsAnnouncementService\"]\r\n\r\n    constructor: (@rootscope, @storage, @model, @rs, @http, @urls, @config, @translate, @currentUserService,\r\n                  @themeService, @analytics, @termsAnnouncementService) ->\r\n        super()\r\n\r\n        userModel = @.getUser()\r\n        @._currentTheme = @._getUserTheme()\r\n\r\n        @.setUserdata(userModel)\r\n\r\n    setUserdata: (userModel) ->\r\n        if userModel\r\n            @.userData = Immutable.fromJS(userModel.getAttrs())\r\n            @currentUserService.setUser(@.userData)\r\n        else\r\n            @.userData = null\r\n        @analytics.setUserId()\r\n\r\n    _getUserTheme: ->\r\n        return @rootscope.user?.theme || @config.get(\"defaultTheme\") || \"taiga\" # load on index.jade\r\n\r\n    _setTheme: ->\r\n        newTheme = @._getUserTheme()\r\n\r\n        if @._currentTheme != newTheme\r\n            @._currentTheme = newTheme\r\n            @themeService.use(@._currentTheme)\r\n\r\n    _setLocales: ->\r\n        lang = @rootscope.user?.lang || @config.get(\"defaultLanguage\") || \"en\"\r\n        @translate.preferredLanguage(lang)  # Needed for calls to the api in the correct language\r\n        @translate.use(lang)                # Needed for change the interface in runtime\r\n\r\n    getUser: ->\r\n        if @rootscope.user\r\n            return @rootscope.user\r\n\r\n        userData = @storage.get(\"userInfo\")\r\n\r\n        if userData\r\n            user = @model.make_model(\"users\", userData)\r\n            @rootscope.user = user\r\n            @._setLocales()\r\n\r\n            @._setTheme()\r\n\r\n            return user\r\n        else\r\n            @._setTheme()\r\n\r\n        return null\r\n\r\n    setUser: (user) ->\r\n        @rootscope.auth = user\r\n        @storage.set(\"userInfo\", user.getAttrs())\r\n        @rootscope.user = user\r\n\r\n        @.setUserdata(user)\r\n\r\n        @._setLocales()\r\n        @._setTheme()\r\n\r\n    clear: ->\r\n        @rootscope.auth = null\r\n        @rootscope.user = null\r\n        @storage.remove(\"userInfo\")\r\n\r\n    setToken: (token) ->\r\n        @storage.set(\"token\", token)\r\n\r\n    getToken: ->\r\n        return @storage.get(\"token\")\r\n\r\n    removeToken: ->\r\n        @storage.remove(\"token\")\r\n\r\n    isAuthenticated: ->\r\n        if @.getUser() != null\r\n            return true\r\n        return false\r\n\r\n    ## Http interface\r\n    refresh: () ->\r\n        url = @urls.resolve(\"user-me\")\r\n\r\n        return @http.get(url).then (data, status) =>\r\n            user = data.data\r\n            user.token = @.getUser().auth_token\r\n\r\n            user = @model.make_model(\"users\", user)\r\n\r\n            @.setUser(user)\r\n            @rootscope.$broadcast(\"auth:refresh\", user)\r\n            return user\r\n\r\n    login: (data, type) ->\r\n        url = @urls.resolve(\"auth\")\r\n\r\n        data = _.clone(data, false)\r\n        data.type = if type then type else \"normal\"\r\n\r\n        @.removeToken()\r\n\r\n        return @http.post(url, data).then (data, status) =>\r\n            user = @model.make_model(\"users\", data.data)\r\n            @.setToken(user.auth_token)\r\n            @.setUser(user)\r\n            @rootscope.$broadcast(\"auth:login\", user)\r\n            return user\r\n\r\n    logout: ->\r\n        @.removeToken()\r\n        @.clear()\r\n        @currentUserService.removeUser()\r\n\r\n        @._setTheme()\r\n        @._setLocales()\r\n        @rootscope.$broadcast(\"auth:logout\")\r\n        @analytics.setUserId()\r\n\r\n    register: (data, type, existing) ->\r\n        url = @urls.resolve(\"auth-register\")\r\n\r\n        data = _.clone(data, false)\r\n        data.type = if type then type else \"public\"\r\n        if type == \"private\"\r\n            data.existing = if existing then existing else false\r\n\r\n        @.removeToken()\r\n\r\n        return @http.post(url, data).then (response) =>\r\n            user = @model.make_model(\"users\", response.data)\r\n            @.setToken(user.auth_token)\r\n            @.setUser(user)\r\n            @rootscope.$broadcast(\"auth:register\", user)\r\n            return user\r\n\r\n    getInvitation: (token) ->\r\n        return @rs.invitations.get(token)\r\n\r\n    acceptInvitiationWithNewUser: (data) ->\r\n        return @.register(data, \"private\", false)\r\n\r\n    forgotPassword: (data) ->\r\n        url = @urls.resolve(\"users-password-recovery\")\r\n        data = _.clone(data, false)\r\n        @.removeToken()\r\n        return @http.post(url, data)\r\n\r\n    changePasswordFromRecovery: (data) ->\r\n        url = @urls.resolve(\"users-change-password-from-recovery\")\r\n        data = _.clone(data, false)\r\n        @.removeToken()\r\n        return @http.post(url, data)\r\n\r\n    changeEmail: (data) ->\r\n        url = @urls.resolve(\"users-change-email\")\r\n        data = _.clone(data, false)\r\n        return @http.post(url, data)\r\n\r\n    cancelAccount: (data) ->\r\n        url = @urls.resolve(\"users-cancel-account\")\r\n        data = _.clone(data, false)\r\n        return @http.post(url, data)\r\n\r\n    exportProfile: () ->\r\n        url = @urls.resolve(\"users-export\")\r\n        return @http.post(url)\r\n\r\n    showTerms: (data) ->\r\n        user = @.getUser()\r\n        if not user or user.read_new_terms\r\n            return\r\n        @termsAnnouncementService.show()\r\n\r\nmodule.service(\"$tgAuth\", AuthService)\r\n\r\n\r\n#############################################################################\r\n## Login Directive\r\n#############################################################################\r\n\r\n# Directive that manages the visualization of public register\r\n# message/link on login page.\r\n\r\nPublicRegisterMessageDirective = ($config, $navUrls, $routeParams, templates) ->\r\n    template = templates.get(\"auth/login-text.html\", true)\r\n\r\n    templateFn = ->\r\n        publicRegisterEnabled = $config.get(\"publicRegisterEnabled\")\r\n        if not publicRegisterEnabled\r\n            return \"\"\r\n\r\n        url = $navUrls.resolve(\"register\")\r\n\r\n        if $routeParams['force_next']\r\n            nextUrl = encodeURIComponent($routeParams['force_next'])\r\n            url += \"?next=#{nextUrl}\"\r\n\r\n        return template({url:url})\r\n\r\n    return {\r\n        restrict: \"AE\"\r\n        scope: {}\r\n        template: templateFn\r\n    }\r\n\r\nmodule.directive(\"tgPublicRegisterMessage\", [\"$tgConfig\", \"$tgNavUrls\", \"$routeParams\",\r\n                                             \"$tgTemplate\", PublicRegisterMessageDirective])\r\n\r\n\r\nLoginDirective = ($auth, $confirm, $location, $config, $routeParams, $navUrls, $events, $translate, $window, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = new checksley.Form($el.find(\"form.login-form\"))\r\n\r\n        if $routeParams['next'] and $routeParams['next'] != $navUrls.resolve(\"login\")\r\n            $scope.nextUrl = decodeURIComponent($routeParams['next'])\r\n        else\r\n            $scope.nextUrl = $navUrls.resolve(\"home\")\r\n\r\n        if $routeParams['force_next']\r\n            $scope.nextUrl = decodeURIComponent($routeParams['force_next'])\r\n\r\n        onSuccess = (response) ->\r\n            $events.setupConnection()\r\n            $analytics.trackEvent(\"auth\", \"login\", \"user login\", 1)\r\n\r\n            $auth.showTerms()\r\n\r\n            if $scope.nextUrl.indexOf('http') == 0\r\n                $window.location.href = $scope.nextUrl\r\n            else\r\n                $location.url($scope.nextUrl)\r\n\r\n        onError = (response) ->\r\n            $confirm.notify(\"light-error\", $translate.instant(\"LOGIN_FORM.ERROR_AUTH_INCORRECT\"))\r\n\r\n        $scope.onKeyUp = (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            value = target.val()\r\n            $scope.iscapsLockActivated = false\r\n            if value != value.toLowerCase()\r\n                $scope.iscapsLockActivated = true\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            data = {\r\n                \"username\": $el.find(\"form.login-form input[name=username]\").val(),\r\n                \"password\": $el.find(\"form.login-form input[name=password]\").val()\r\n            }\r\n\r\n            loginFormType = $config.get(\"loginFormType\", \"normal\")\r\n\r\n            promise = $auth.login(data, loginFormType)\r\n            return promise.then(onSuccess, onError)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        window.prerenderReady = true\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgLogin\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgConfig\", \"$routeParams\",\r\n                             \"$tgNavUrls\", \"$tgEvents\", \"$translate\", \"$window\", \"$tgAnalytics\", LoginDirective])\r\n\r\n\r\n#############################################################################\r\n## Register Directive\r\n#############################################################################\r\n\r\nRegisterDirective = ($auth, $confirm, $location, $navUrls, $config, $routeParams, $analytics, $translate, $window) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        if not $config.get(\"publicRegisterEnabled\")\r\n            $location.path($navUrls.resolve(\"not-found\"))\r\n            $location.replace()\r\n\r\n        $scope.data = {}\r\n        form = $el.find(\"form\").checksley({onlyOneErrorElement: true})\r\n\r\n        if $routeParams['next'] and $routeParams['next'] != $navUrls.resolve(\"login\")\r\n            $scope.nextUrl = decodeURIComponent($routeParams['next'])\r\n        else\r\n            $scope.nextUrl = $navUrls.resolve(\"home\")\r\n\r\n        onSuccessSubmit = (response) ->\r\n            $analytics.trackEvent(\"auth\", \"register\", \"user registration\", 1)\r\n\r\n            if $scope.nextUrl.indexOf('http') == 0\r\n                $window.location.href = $scope.nextUrl\r\n            else\r\n                $location.url($scope.nextUrl)\r\n\r\n        onErrorSubmit = (response) ->\r\n            if response.data._error_message\r\n                text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\r\n                $confirm.notify(\"light-error\", text)\r\n\r\n            form.setErrors(response.data)\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            promise = $auth.register($scope.data)\r\n            promise.then(onSuccessSubmit, onErrorSubmit)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        window.prerenderReady = true\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgRegister\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgNavUrls\", \"$tgConfig\",\r\n                                \"$routeParams\", \"$tgAnalytics\", \"$translate\", \"$window\", RegisterDirective])\r\n\r\n\r\n#############################################################################\r\n## Forgot Password Directive\r\n#############################################################################\r\n\r\nForgotPasswordDirective = ($auth, $confirm, $location, $navUrls, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.data = {}\r\n        form = $el.find(\"form\").checksley()\r\n\r\n        onSuccessSubmit = (response) ->\r\n            $location.path($navUrls.resolve(\"login\"))\r\n\r\n            title = $translate.instant(\"FORGOT_PASSWORD_FORM.SUCCESS_TITLE\")\r\n            message = $translate.instant(\"FORGOT_PASSWORD_FORM.SUCCESS_TEXT\")\r\n\r\n            $confirm.success(title, message)\r\n\r\n        onErrorSubmit = (response) ->\r\n            text = $translate.instant(\"FORGOT_PASSWORD_FORM.ERROR\")\r\n\r\n            $confirm.notify(\"light-error\", text)\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            promise = $auth.forgotPassword($scope.data)\r\n            promise.then(onSuccessSubmit, onErrorSubmit)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        window.prerenderReady = true\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgForgotPassword\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgNavUrls\", \"$translate\",\r\n                                      ForgotPasswordDirective])\r\n\r\n\r\n#############################################################################\r\n## Change Password from Recovery Directive\r\n#############################################################################\r\n\r\nChangePasswordFromRecoveryDirective = ($auth, $confirm, $location, $params, $navUrls, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.data = {}\r\n\r\n        if $params.token?\r\n            $scope.tokenInParams = true\r\n            $scope.data.token = $params.token\r\n        else\r\n            $location.path($navUrls.resolve(\"login\"))\r\n\r\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.ERROR\")\r\n            $confirm.notify(\"light-error\",text)\r\n\r\n        form = $el.find(\"form\").checksley()\r\n\r\n        onSuccessSubmit = (response) ->\r\n            $location.path($navUrls.resolve(\"login\"))\r\n\r\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.SUCCESS\")\r\n            $confirm.success(text)\r\n\r\n        onErrorSubmit = (response) ->\r\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.ERROR\")\r\n            $confirm.notify(\"light-error\", text)\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            promise = $auth.changePasswordFromRecovery($scope.data)\r\n            promise.then(onSuccessSubmit, onErrorSubmit)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgChangePasswordFromRecovery\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$routeParams\",\r\n                                                  \"$tgNavUrls\", \"$translate\",\r\n                                                  ChangePasswordFromRecoveryDirective])\r\n\r\n\r\n#############################################################################\r\n## Invitation\r\n#############################################################################\r\n\r\nInvitationDirective = ($auth, $confirm, $location, $config, $params, $navUrls, $analytics, $translate, config) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        token = $params.token\r\n\r\n        promise = $auth.getInvitation(token)\r\n        promise.then (invitation) ->\r\n            $scope.invitation = invitation\r\n            $scope.publicRegisterEnabled = config.get(\"publicRegisterEnabled\")\r\n\r\n        promise.then null, (response) ->\r\n            $location.path($navUrls.resolve(\"login\"))\r\n\r\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.NOT_FOUND\")\r\n            $confirm.notify(\"light-error\", text)\r\n\r\n        # Login form\r\n        $scope.dataLogin = {token: token}\r\n        loginForm = $el.find(\"form.login-form\").checksley({onlyOneErrorElement: true})\r\n\r\n        onSuccessSubmitLogin = (response) ->\r\n            $analytics.trackEvent(\"auth\", \"invitationAccept\", \"invitation accept with existing user\", 1)\r\n            $location.path($navUrls.resolve(\"project\", {project: $scope.invitation.project_slug}))\r\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.SUCCESS\", {\r\n                \"project_name\": $scope.invitation.project_name\r\n            })\r\n\r\n            $confirm.notify(\"success\", text)\r\n\r\n        onErrorSubmitLogin = (response) ->\r\n            $confirm.notify(\"light-error\", response.data._error_message)\r\n\r\n        submitLogin = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not loginForm.validate()\r\n                return\r\n\r\n            loginFormType = $config.get(\"loginFormType\", \"normal\")\r\n            data = $scope.dataLogin\r\n\r\n            promise = $auth.login({\r\n                username: data.username,\r\n                password: data.password,\r\n                invitation_token: data.token\r\n            }, loginFormType)\r\n            promise.then(onSuccessSubmitLogin, onErrorSubmitLogin)\r\n\r\n        $el.on \"submit\", \"form.login-form\", submitLogin\r\n        $el.on \"click\", \".button-login\", submitLogin\r\n\r\n        # Register form\r\n        $scope.dataRegister = {token: token}\r\n        registerForm = $el.find(\"form.register-form\").checksley({onlyOneErrorElement: true})\r\n\r\n        onSuccessSubmitRegister = (response) ->\r\n            $analytics.trackEvent(\"auth\", \"invitationAccept\", \"invitation accept with new user\", 1)\r\n\r\n            $location.path($navUrls.resolve(\"project\", {project: $scope.invitation.project_slug}))\r\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.SUCCESS\", {\r\n                \"project_name\": $scope.invitation.project_name\r\n            })\r\n            $confirm.notify(\"success\", text)\r\n\r\n        onErrorSubmitRegister = (response) ->\r\n            if response.data._error_message\r\n                text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\r\n                $confirm.notify(\"light-error\", text)\r\n\r\n            registerForm.setErrors(response.data)\r\n\r\n        submitRegister = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not registerForm.validate()\r\n                return\r\n\r\n            promise = $auth.acceptInvitiationWithNewUser($scope.dataRegister)\r\n            promise.then(onSuccessSubmitRegister, onErrorSubmitRegister)\r\n\r\n        $el.on \"submit\", \"form.register-form\", submitRegister\r\n        $el.on \"click\", \".button-register\", submitRegister\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgInvitation\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgConfig\", \"$routeParams\",\r\n                                  \"$tgNavUrls\", \"$tgAnalytics\", \"$translate\", \"$tgConfig\", InvitationDirective])\r\n\r\n\r\n#############################################################################\r\n## Change Email\r\n#############################################################################\r\n\r\nChangeEmailDirective = ($repo, $model, $auth, $confirm, $location, $params, $navUrls, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.data = {}\r\n        $scope.data.email_token = $params.email_token\r\n        form = $el.find(\"form\").checksley()\r\n\r\n        onSuccessSubmit = (response) ->\r\n            if $auth.isAuthenticated()\r\n                $repo.queryOne(\"users\", $auth.getUser().id).then (data) =>\r\n                    $auth.setUser(data)\r\n                    $location.path($navUrls.resolve(\"home\"))\r\n                    $location.replace()\r\n            else\r\n                $location.path($navUrls.resolve(\"login\"))\r\n                $location.replace()\r\n\r\n            text = $translate.instant(\"CHANGE_EMAIL_FORM.SUCCESS\")\r\n            $confirm.success(text)\r\n\r\n        onErrorSubmit = (response) ->\r\n            text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\r\n\r\n            $confirm.notify(\"light-error\", text)\r\n\r\n        submit = ->\r\n            if not form.validate()\r\n                return\r\n\r\n            promise = $auth.changeEmail($scope.data)\r\n            promise.then(onSuccessSubmit, onErrorSubmit)\r\n\r\n        $el.on \"submit\", (event) ->\r\n            event.preventDefault()\r\n            submit()\r\n\r\n        $el.on \"click\", \"a.button-change-email\", (event) ->\r\n            event.preventDefault()\r\n            submit()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgChangeEmail\", [\"$tgRepo\", \"$tgModel\", \"$tgAuth\", \"$tgConfirm\", \"$tgLocation\",\r\n                                   \"$routeParams\", \"$tgNavUrls\", \"$translate\", ChangeEmailDirective])\r\n\r\n\r\n#############################################################################\r\n## Cancel account\r\n#############################################################################\r\n\r\nCancelAccountDirective = ($repo, $model, $auth, $confirm, $location, $params, $navUrls) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.data = {}\r\n        $scope.data.cancel_token = $params.cancel_token\r\n        form = $el.find(\"form\").checksley()\r\n\r\n        onSuccessSubmit = (response) ->\r\n            $auth.logout()\r\n            $location.path($navUrls.resolve(\"home\"))\r\n\r\n            text = $translate.instant(\"CANCEL_ACCOUNT.SUCCESS\")\r\n\r\n            $confirm.success(text)\r\n\r\n        onErrorSubmit = (response) ->\r\n            text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\r\n\r\n            $confirm.notify(\"error\", text)\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            promise = $auth.cancelAccount($scope.data)\r\n            promise.then(onSuccessSubmit, onErrorSubmit)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgCancelAccount\", [\"$tgRepo\", \"$tgModel\", \"$tgAuth\", \"$tgConfirm\", \"$tgLocation\",\r\n                                     \"$routeParams\",\"$tgNavUrls\", CancelAccountDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/backlog.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaBacklog\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaBase\", [])\r\n\r\n#############################################################################\r\n## Main Directive\r\n#############################################################################\r\n\r\nTaigaMainDirective = ($rootscope, $window) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $window.onresize = () ->\r\n            $rootscope.$broadcast(\"resize\")\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgMain\", [\"$rootScope\", \"$window\", TaigaMainDirective])\r\n\r\n#############################################################################\r\n## Navigation\r\n#############################################################################\r\n\r\nurls = {\r\n    \"home\": \"/\"\r\n    \"projects\": \"/projects\"\r\n    \"error\": \"/error\"\r\n    \"not-found\": \"/not-found\"\r\n    \"permission-denied\": \"/permission-denied\"\r\n\r\n    \"discover\": \"/discover\"\r\n    \"discover-search\": \"/discover/search\"\r\n\r\n    \"login\": \"/login\"\r\n    \"forgot-password\": \"/forgot-password\"\r\n    \"change-password\": \"/change-password/:token\"\r\n    \"change-email\": \"/change-email/:token\"\r\n    \"cancel-account\": \"/cancel-account/:token\"\r\n    \"register\": \"/register\"\r\n    \"invitation\": \"/invitation/:token\"\r\n    \"create-project\": \"/project/new\"\r\n    \"create-project-scrum\": \"/project/new/scrum\"\r\n    \"create-project-kanban\": \"/project/new/kanban\"\r\n    \"create-project-duplicate\": \"/project/new/duplicate\"\r\n    \"create-project-import\": \"/project/new/import\"\r\n    \"create-project-import-platform\": \"/project/new/import/:platform\"\r\n\r\n    \"profile\": \"/profile\"\r\n    \"user-profile\": \"/profile/:username\"\r\n\r\n    \"blocked-project\": \"/blocked-project/:project\"\r\n    \"project\": \"/project/:project\"\r\n    \"project-detail-ref\": \"/project/:project/t/:ref\"\r\n    \"project-backlog\": \"/project/:project/backlog\"\r\n    \"project-taskboard\": \"/project/:project/taskboard/:sprint\"\r\n    \"project-kanban\": \"/project/:project/kanban\"\r\n    \"project-issues\": \"/project/:project/issues\"\r\n    \"project-epics\": \"/project/:project/epics\"\r\n    \"project-search\": \"/project/:project/search\"\r\n    \"project-timeline\": \"/project/:project/timeline\"\r\n\r\n    \"project-epics-detail\": \"/project/:project/epic/:ref\"\r\n    \"project-userstories-detail\": \"/project/:project/us/:ref\"\r\n    \"project-tasks-detail\": \"/project/:project/task/:ref\"\r\n    \"project-issues-detail\": \"/project/:project/issue/:ref\"\r\n\r\n    \"project-wiki\": \"/project/:project/wiki\"\r\n    \"project-wiki-list\": \"/project/:project/wiki-list\"\r\n    \"project-wiki-page\": \"/project/:project/wiki/:slug\"\r\n\r\n    # Team\r\n    \"project-team\": \"/project/:project/team\"\r\n\r\n    # Admin\r\n    \"project-admin-home\": \"/project/:project/admin/project-profile/details\"\r\n    \"project-admin-project-profile-details\": \"/project/:project/admin/project-profile/details\"\r\n    \"project-admin-project-profile-default-values\": \"/project/:project/admin/project-profile/default-values\"\r\n    \"project-admin-project-profile-modules\": \"/project/:project/admin/project-profile/modules\"\r\n    \"project-admin-project-profile-export\": \"/project/:project/admin/project-profile/export\"\r\n    \"project-admin-project-profile-reports\": \"/project/:project/admin/project-profile/reports\"\r\n\r\n    \"project-admin-project-values-status\": \"/project/:project/admin/project-values/status\"\r\n    \"project-admin-project-values-points\": \"/project/:project/admin/project-values/points\"\r\n    \"project-admin-project-values-priorities\": \"/project/:project/admin/project-values/priorities\"\r\n    \"project-admin-project-values-severities\": \"/project/:project/admin/project-values/severities\"\r\n    \"project-admin-project-values-types\": \"/project/:project/admin/project-values/types\"\r\n    \"project-admin-project-values-custom-fields\": \"/project/:project/admin/project-values/custom-fields\"\r\n    \"project-admin-project-values-tags\": \"/project/:project/admin/project-values/tags\"\r\n    \"project-admin-project-values-due-dates\": \"/project/:project/admin/project-values/due-dates\"\r\n\r\n    \"project-admin-memberships\": \"/project/:project/admin/memberships\"\r\n    \"project-admin-roles\": \"/project/:project/admin/roles\"\r\n    \"project-admin-third-parties-webhooks\": \"/project/:project/admin/third-parties/webhooks\"\r\n    \"project-admin-third-parties-github\": \"/project/:project/admin/third-parties/github\"\r\n    \"project-admin-third-parties-gitlab\": \"/project/:project/admin/third-parties/gitlab\"\r\n    \"project-admin-third-parties-bitbucket\": \"/project/:project/admin/third-parties/bitbucket\"\r\n    \"project-admin-third-parties-gogs\": \"/project/:project/admin/third-parties/gogs\"\r\n    \"project-admin-contrib\": \"/project/:project/admin/contrib/:plugin\"\r\n\r\n    # User settings\r\n    \"user-settings-user-profile\": \"/user-settings/user-profile\"\r\n    \"user-settings-user-change-password\": \"/user-settings/user-change-password\"\r\n    \"user-settings-user-avatar\": \"/user-settings/user-avatar\"\r\n    \"user-settings-user-project-settings\": \"/user-settings/user-project-settings\"\r\n    \"user-settings-mail-notifications\": \"/user-settings/mail-notifications\"\r\n    \"user-settings-live-notifications\": \"/user-settings/live-notifications\"\r\n    \"user-settings-web-notifications\": \"/user-settings/web-notifications\"\r\n    \"user-settings-contrib\": \"/user-settings/contrib/:plugin\"\r\n\r\n    \"notifications\": \"/notifications\"\r\n}\r\n\r\ninit = ($log, $navurls) ->\r\n    $log.debug \"Initialize navigation urls\"\r\n    $navurls.update(urls)\r\n\r\nmodule.run([\"$log\", \"$tgNavUrls\", init])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmodule = angular.module(\"taigaCommon\", [])\r\n\r\n#############################################################################\r\n## Default datepicker config\r\n#############################################################################\r\nDataPickerConfig = ($translate, $config, $auth) ->\r\n    return {\r\n        get: () ->\r\n            user = $auth.getUser()\r\n            lang = user?.lang || $translate.preferredLanguage()\r\n            rtlLanguages = $config.get(\"rtlLanguages\", [])\r\n            isRTL = rtlLanguages.indexOf(lang) > -1\r\n            return {\r\n                i18n: {\r\n                    previousMonth: $translate.instant(\"COMMON.PICKERDATE.PREV_MONTH\"),\r\n                    nextMonth:  $translate.instant(\"COMMON.PICKERDATE.NEXT_MONTH\"),\r\n                    months: [\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JAN\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.FEB\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.MAR\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.APR\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.MAY\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JUN\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JUL\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.AUG\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.SEP\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.OCT\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.NOV\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.DEC\")\r\n                    ],\r\n                    weekdays: [\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.SUN\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.MON\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.TUE\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.WED\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.THU\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.FRI\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.SAT\")\r\n                    ],\r\n                    weekdaysShort: [\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.SUN\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.MON\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.TUE\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.WED\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.THU\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.FRI\"),\r\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.SAT\")\r\n                    ]\r\n                },\r\n                isRTL: isRTL,\r\n                firstDay: parseInt($translate.instant(\"COMMON.PICKERDATE.FIRST_DAY_OF_WEEK\"), 10),\r\n                format: $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n            }\r\n    }\r\n\r\nmodule.factory(\"tgDatePickerConfigService\", [\"$translate\", \"$tgConfig\", \"$tgAuth\", DataPickerConfig])\r\n\r\n#############################################################################\r\n## Get the selected text\r\n#############################################################################\r\nSelectedText = ($window, $document) ->\r\n    get = () ->\r\n        if $window.getSelection\r\n            return $window.getSelection().toString()\r\n        else if $document.selection\r\n            return $document.selection.createRange().text\r\n        return \"\"\r\n\r\n    return {get: get}\r\n\r\nmodule.factory(\"$selectedText\", [\"$window\", \"$document\", SelectedText])\r\n\r\n#############################################################################\r\n## Permission directive, hide elements when necessary\r\n#############################################################################\r\n\r\nCheckPermissionDirective = (projectService) ->\r\n    render = ($el, project, permission) ->\r\n        if project && permission\r\n            $el.removeClass('hidden') if project.get('my_permissions').indexOf(permission) > -1\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $el.addClass('hidden')\r\n        permission = $attrs.tgCheckPermission\r\n\r\n        unwatch = $scope.$watch () ->\r\n            return projectService.project\r\n        , () ->\r\n            return if !projectService.project\r\n\r\n            render($el, projectService.project, permission)\r\n            unwatch()\r\n\r\n        unObserve = $attrs.$observe \"tgCheckPermission\", (permission) ->\r\n            return if !permission\r\n\r\n            render($el, projectService.project, permission)\r\n            unObserve()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nCheckPermissionDirective.$inject = [\r\n    \"tgProjectService\"\r\n]\r\n\r\nmodule.directive(\"tgCheckPermission\", CheckPermissionDirective)\r\n\r\n#############################################################################\r\n## Add class based on permissions\r\n#############################################################################\r\n\r\nClassPermissionDirective = ->\r\n    name = \"tgClassPermission\"\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        checkPermissions = (project, className, permission) ->\r\n            negation = permission[0] == \"!\"\r\n\r\n            permission = permission.slice(1) if negation\r\n\r\n            if negation && project.my_permissions.indexOf(permission) == -1\r\n                $el.addClass(className)\r\n            else if !negation && project.my_permissions.indexOf(permission) != -1\r\n                $el.addClass(className)\r\n            else\r\n                $el.removeClass(className)\r\n\r\n        tgClassPermissionWatchAction = (project) ->\r\n            if project\r\n                unbindWatcher()\r\n\r\n                classes = $scope.$eval($attrs[name])\r\n\r\n                for className, permission of classes\r\n                    checkPermissions(project, className, permission)\r\n\r\n\r\n        unbindWatcher = $scope.$watch \"project\", tgClassPermissionWatchAction\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgClassPermission\", ClassPermissionDirective)\r\n\r\n#############################################################################\r\n## Animation frame service, apply css changes in the next render frame\r\n#############################################################################\r\nAnimationFrame = () ->\r\n    animationFrame =\r\n        window.requestAnimationFrame       ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame\r\n\r\n    performAnimation = (time) =>\r\n        fn = tail.shift()\r\n        fn()\r\n\r\n        if (tail.length)\r\n            animationFrame(performAnimation)\r\n\r\n    tail = []\r\n\r\n    add = () ->\r\n        for fn in arguments\r\n            tail.push(fn)\r\n\r\n            if tail.length == 1\r\n                animationFrame(performAnimation)\r\n\r\n    return {add: add}\r\n\r\nmodule.factory(\"animationFrame\", AnimationFrame)\r\n\r\n#############################################################################\r\n## Open/close comment\r\n#############################################################################\r\n\r\nToggleCommentDirective = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $el.find(\"textarea\").on \"focus\", () ->\r\n            $el.addClass(\"active\")\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgToggleComment\", ToggleCommentDirective)\r\n\r\n\r\n#############################################################################\r\n## Get the appropiate section url for a project\r\n## according to his enabled modules and user permisions\r\n#############################################################################\r\n\r\nProjectUrl = ($navurls) ->\r\n    get = (project) ->\r\n        if project.toJS\r\n            project = project.toJS()\r\n\r\n        ctx = {project: project.slug}\r\n\r\n        if project.is_backlog_activated and project.my_permissions.indexOf(\"view_us\") > -1\r\n            return $navurls.resolve(\"project-backlog\", ctx)\r\n        if project.is_kanban_activated and project.my_permissions.indexOf(\"view_us\") > -1\r\n            return $navurls.resolve(\"project-kanban\", ctx)\r\n        if project.is_wiki_activated and project.my_permissions.indexOf(\"view_wiki_pages\") > -1\r\n            return $navurls.resolve(\"project-wiki\", ctx)\r\n        if project.is_issues_activated and project.my_permissions.indexOf(\"view_issues\") > -1\r\n            return $navurls.resolve(\"project-issues\", ctx)\r\n\r\n        return $navurls.resolve(\"project\", ctx)\r\n\r\n    return {get: get}\r\n\r\nmodule.factory(\"$projectUrl\", [\"$tgNavUrls\", ProjectUrl])\r\n\r\n\r\n#############################################################################\r\n## Queue Q promises\r\n#############################################################################\r\n\r\nQqueue = ($q) ->\r\n    deferred = $q.defer()\r\n    deferred.resolve()\r\n\r\n    lastPromise = deferred.promise\r\n\r\n    qqueue = {\r\n        bindAdd: (fn) =>\r\n            return (args...) =>\r\n                lastPromise = lastPromise.then () => fn.apply(@, args)\r\n        add: (fn) =>\r\n            if !lastPromise\r\n                lastPromise = fn()\r\n            else\r\n                lastPromise = lastPromise.then(fn)\r\n\r\n            return qqueue\r\n    }\r\n\r\n    return qqueue\r\n\r\nmodule.factory(\"$tgQqueue\", [\"$q\", Qqueue])\r\n\r\n\r\n#############################################################################\r\n## Queue model transformation\r\n#############################################################################\r\n\r\nclass QueueModelTransformation extends taiga.Service\r\n    @.$inject = [\r\n        \"$tgQqueue\",\r\n        \"$tgRepo\",\r\n        \"$q\",\r\n        \"$tgModel\"\r\n    ]\r\n\r\n    constructor: (@qqueue, @repo, @q, @model) ->\r\n\r\n    setObject: (@scope, @prop) ->\r\n\r\n    clone: () ->\r\n        attrs = _.cloneDeep(@.scope[@.prop]._attrs)\r\n        model = @model.make_model(@.scope[@.prop]._name, attrs)\r\n\r\n        return model\r\n\r\n    getObj: () ->\r\n        return @.scope[@.prop]\r\n\r\n    save: (transformation) ->\r\n        defered = @q.defer()\r\n        @qqueue.add () =>\r\n            obj = @.getObj()\r\n            comment = obj.comment\r\n\r\n            obj.comment = ''\r\n\r\n            clone = @.clone()\r\n\r\n            modified = _.omit(obj._modifiedAttrs, ['version'])\r\n            clone = _.assign(clone, modified)\r\n\r\n            transformation(clone)\r\n\r\n            if comment.length\r\n                clone.comment = comment\r\n\r\n            success = () =>\r\n                @.scope[@.prop] = clone\r\n\r\n                defered.resolve.apply(null, arguments)\r\n\r\n            @repo.save(clone).then(success, defered.reject)\r\n\r\n        return defered.promise\r\n\r\nmodule.service(\"$tgQueueModelTransformation\", QueueModelTransformation)\r\n\r\n#############################################################################\r\n## Templates\r\n#############################################################################\r\n\r\nTemplate = ($templateCache) ->\r\n    return {\r\n        get: (name, lodash = false) =>\r\n            tmp = $templateCache.get(name)\r\n\r\n            if lodash\r\n                tmp = _.template(tmp)\r\n\r\n            return tmp\r\n    }\r\n\r\nmodule.factory(\"$tgTemplate\", [\"$templateCache\", Template])\r\n\r\n#############################################################################\r\n## Permission directive, hide elements when necessary\r\n#############################################################################\r\n\r\nCapslock = () ->\r\n    template = \"\"\"\r\n        <tg-svg class=\"capslock\" ng-if=\"capslockIcon && iscapsLockActivated\" svg-icon='icon-capslock' svg-title='COMMON.CAPSLOCK_WARNING'></tg-svg>\r\n    \"\"\"\r\n\r\n    return {\r\n        template: template\r\n    }\r\n\r\nmodule.directive(\"tgCapslock\", [Capslock])\r\n\r\nLightboxClose = () ->\r\n    template = \"\"\"\r\n        <a class=\"close\" ng-click=\"onClose()\" href=\"\" title=\"{{'COMMON.CLOSE' | translate}}\">\r\n            <tg-svg svg-icon=\"icon-close\"></tg-svg>\r\n        </a>\r\n    \"\"\"\r\n\r\n    link = (scope, elm, attrs) ->\r\n\r\n    return {\r\n        scope: {\r\n            onClose: '&'\r\n        },\r\n        link: link,\r\n        template: template\r\n    }\r\n\r\nmodule.directive(\"tgLightboxClose\", [LightboxClose])\r\n\r\nSvg = () ->\r\n    template = \"\"\"\r\n    <svg class=\"{{ 'icon ' + svgIcon }}\" style=\"fill: {{ svgFill }}\">\r\n        <use xlink:href=\"\" ng-attr-xlink:href=\"{{ '#' + svgIcon }}\" href=\"{{ '#' + svgIcon }}\">\r\n            <title ng-if=\"svgTitle\">{{svgTitle}}</title>\r\n            <title ng-if=\"svgTitleTranslate\">{{svgTitleTranslate | translate: svgTitleTranslateValues}}</title>\r\n        </use>\r\n    </svg>\r\n    \"\"\"\r\n\r\n    return {\r\n        scope: {\r\n            svgIcon: \"@\",\r\n            svgTitle: \"@\",\r\n            svgTitleTranslate: \"@\",\r\n            svgTitleTranslateValues: \"=\",\r\n            svgFill: \"=\"\r\n        },\r\n        template: template\r\n    }\r\n\r\nmodule.directive(\"tgSvg\", [Svg])\r\n\r\nAutofocus = ($timeout, $parse, animationFrame) ->\r\n  return {\r\n    restrict: 'A',\r\n    link : ($scope, $element, attrs) ->\r\n        if attrs.ngShow\r\n            model = $parse(attrs.ngShow)\r\n\r\n            $scope.$watch model, (value) ->\r\n                if value == true\r\n                    $timeout () -> $element[0].focus()\r\n\r\n        else\r\n            $timeout () -> $element[0].focus()\r\n  }\r\n\r\nmodule.directive('tgAutofocus', ['$timeout', '$parse', \"animationFrame\", Autofocus])\r\n\r\nmodule.directive 'tgPreloadImage', () ->\r\n    spinner = \"<img class='loading-spinner' src='/\" + window._version + \"/svg/spinner-circle.svg' alt='loading...' />\"\r\n\r\n    template = \"\"\"\r\n        <div>\r\n            <ng-transclude></ng-transclude>\r\n        </div>\r\n    \"\"\"\r\n\r\n    preload = (src, onLoad) ->\r\n        image = new Image()\r\n        image.onload = onLoad\r\n        image.src = src\r\n\r\n        return image\r\n\r\n    return {\r\n        template: template,\r\n        transclude: true,\r\n        replace: true,\r\n        link: (scope, el, attrs) ->\r\n            image = el.find('img:last')\r\n            timeout = null\r\n\r\n            onLoad = () ->\r\n                el.find('.loading-spinner').remove()\r\n                image.show()\r\n\r\n                if timeout\r\n                    clearTimeout(timeout)\r\n                    timeout = null\r\n\r\n            attrs.$observe 'preloadSrc', (src) ->\r\n                if timeout\r\n                    clearTimeout(timeout)\r\n\r\n                el.find('.loading-spinner').remove()\r\n\r\n                timeout = setTimeout () ->\r\n                    el.prepend(spinner)\r\n                , 200\r\n\r\n                image.hide()\r\n\r\n                preload(src, onLoad)\r\n    }\r\n\r\n\r\n#############################################################################\r\n## Disable link href when Ctrl Key is pressed\r\n#############################################################################\r\n\r\nCtrlClickDisable = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $el.on \"click\", ($event) ->\r\n            if ($event.ctrlKey || $event.metaKey)\r\n                $event.preventDefault()\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgCtrlClickDisable\", CtrlClickDisable)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/detail.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nclass DetailController\r\n    @.$inject = [\r\n        '$routeParams',\r\n        '$tgRepo',\r\n        \"tgProjectService\",\r\n        \"$tgNavUrls\",\r\n        \"$location\"\r\n    ]\r\n\r\n    constructor: (@params, @repo, @projectService, @navurls, @location) ->\r\n        @repo.resolve({\r\n            pslug: @params.pslug,\r\n            ref: @params.ref\r\n        })\r\n        .then (result) =>\r\n            if result.issue\r\n                url = @navurls.resolve('project-issues-detail', {\r\n                    project: @projectService.project.get('slug'),\r\n                    ref: @params.ref\r\n                })\r\n            else if result.task\r\n                url = @navurls.resolve('project-tasks-detail', {\r\n                    project: @projectService.project.get('slug'),\r\n                    ref: @params.ref\r\n                })\r\n            else if result.us\r\n                url = @navurls.resolve('project-userstories-detail', {\r\n                    project: @projectService.project.get('slug'),\r\n                    ref: @params.ref\r\n                })\r\n            else if result.epic\r\n                url = @navurls.resolve('project-epics-detail', {\r\n                    project: @projectService.project.get('slug'),\r\n                    ref: @params.ref\r\n                })\r\n            else if result.wikipage\r\n                url = @navurls.resolve('project-wiki-page', {\r\n                    project: @projectService.project.get('slug'),\r\n                    slug: @params.ref\r\n                })\r\n\r\n            @location.path(url)\r\n\r\nmodule.controller(\"DetailController\", DetailController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/epics.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaEpics\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/events.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nstartswith = @.taiga.startswith\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaEvents\", [])\r\n\r\n\r\nclass EventsService\r\n    constructor: (@win, @log, @config, @auth, @liveAnnouncementService, @rootScope) ->\r\n        bindMethods(@)\r\n\r\n    initialize: (sessionId) ->\r\n        @.sessionId = sessionId\r\n        @.subscriptions = {}\r\n        @.connected = false\r\n        @.error = false\r\n        @.pendingMessages = []\r\n\r\n        @.missedHeartbeats = 0\r\n        @.heartbeatInterval = null\r\n\r\n        if @win.WebSocket is undefined\r\n            @log.info \"WebSockets not supported on your browser\"\r\n\r\n    setupConnection: ->\r\n        @.stopExistingConnection()\r\n\r\n        url = @config.get(\"eventsUrl\")\r\n\r\n        # This allows disable events in case\r\n        # url is not found on the configuration.\r\n        return if not url\r\n\r\n        # This allows relative urls in configuration.\r\n        if not startswith(url, \"ws:\") and not startswith(url, \"wss:\")\r\n            loc = @win.location\r\n            scheme = if loc.protocol == \"https:\" then \"wss:\" else \"ws:\"\r\n            path = _.trimStart(url, \"/\")\r\n            url = \"#{scheme}//#{loc.host}/#{path}\"\r\n\r\n        @.error = false\r\n        @.ws = new @win.WebSocket(url)\r\n        @.ws.addEventListener(\"open\", @.onOpen)\r\n        @.ws.addEventListener(\"message\", @.onMessage)\r\n        @.ws.addEventListener(\"error\", @.onError)\r\n        @.ws.addEventListener(\"close\", @.onClose)\r\n\r\n    stopExistingConnection: ->\r\n        if @.ws is undefined\r\n            return\r\n\r\n        @.ws.removeEventListener(\"open\", @.onOpen)\r\n        @.ws.removeEventListener(\"close\", @.onClose)\r\n        @.ws.removeEventListener(\"error\", @.onError)\r\n        @.ws.removeEventListener(\"message\", @.onMessage)\r\n        @.stopHeartBeatMessages()\r\n        @.ws.close()\r\n\r\n        delete @.ws\r\n\r\n    notifications: ->\r\n        @.subscribe null, 'notifications', (data) =>\r\n            @liveAnnouncementService.show(data.title, data.desc)\r\n            @rootScope.$digest()\r\n\r\n    liveNotifications: ->\r\n        if not @.auth.userData?\r\n            return\r\n        userId = @.auth.userData.get('id')\r\n\r\n        subscribe = () =>\r\n            @.subscribe null, \"live_notifications.#{userId}\", (data) =>\r\n                notification = new Notification(data.title, {\r\n                    icon: \"/#{window._version}/images/favicon.png\",\r\n                    body: data.body,\r\n                    tag: data.id\r\n                })\r\n                notification.onshow = () =>\r\n                    if data.timeout and data.timeout > 0\r\n                        setTimeout =>\r\n                            notification.close()\r\n                        ,\r\n                            data.timeout\r\n\r\n                if data.url\r\n                    notification.onclick = () =>\r\n                        window.open data.url\r\n        if !Notification\r\n            console.log(\"This browser does not support desktop notification\")\r\n        else if Notification.permission == \"granted\"\r\n            subscribe()\r\n        else if Notification.permission != 'denied'\r\n            Notification.requestPermission (permission) =>\r\n              if (permission == \"granted\")\r\n                  subscribe()\r\n\r\n    webNotifications: ->\r\n        if not @.auth.userData?\r\n            return\r\n        userId = @.auth.userData.get('id')\r\n\r\n        routingKey = \"web_notifications.#{userId}\"\r\n        randomTimeout = taiga.randomInt(700, 1000)\r\n        @.subscribe null, routingKey, (data) =>\r\n            @rootScope.$broadcast \"notifications:new\"\r\n\r\n    ###########################################\r\n    # Heartbeat (Ping - Pong)\r\n    ###########################################\r\n    # See  RFC https://tools.ietf.org/html/rfc6455#section-5.5.2\r\n    #      RFC https://tools.ietf.org/html/rfc6455#section-5.5.3\r\n    startHeartBeatMessages: ->\r\n        return if @.heartbeatInterval\r\n\r\n        maxMissedHeartbeats =  @config.get(\"eventsMaxMissedHeartbeats\", 5)\r\n        heartbeatIntervalTime = @config.get(\"eventsHeartbeatIntervalTime\", 60000)\r\n        reconnectTryInterval = @config.get(\"eventsReconnectTryInterval\", 10000)\r\n\r\n        @.missedHeartbeats = 0\r\n        @.heartbeatInterval = setInterval(() =>\r\n            try\r\n                if @.missedHeartbeats >= maxMissedHeartbeats\r\n                    throw new Error(\"Too many missed heartbeats PINGs.\")\r\n\r\n                @.missedHeartbeats++\r\n                @.sendMessage({cmd: \"ping\"})\r\n                @log.debug(\"HeartBeat send PING\")\r\n            catch e\r\n                @log.error(\"HeartBeat error: \" + e.message)\r\n                @.setupConnection()\r\n        , heartbeatIntervalTime)\r\n\r\n        @log.debug(\"HeartBeat enabled\")\r\n\r\n    stopHeartBeatMessages: ->\r\n        return if not @.heartbeatInterval\r\n\r\n        clearInterval(@.heartbeatInterval)\r\n        @.heartbeatInterval = null\r\n\r\n        @log.debug(\"HeartBeat disabled\")\r\n\r\n    processHeartBeatPongMessage: (data) ->\r\n        @.missedHeartbeats = 0\r\n        @log.debug(\"HeartBeat recived PONG\")\r\n\r\n    ###########################################\r\n    # Messages\r\n    ###########################################\r\n    serialize: (message) ->\r\n        if _.isObject(message)\r\n            return JSON.stringify(message)\r\n        return message\r\n\r\n    sendMessage: (message) ->\r\n        @.pendingMessages.push(message)\r\n\r\n        if not @.connected\r\n            return\r\n\r\n        messages = _.map(@.pendingMessages, @.serialize)\r\n        @.pendingMessages = []\r\n\r\n        for msg in messages\r\n            @.ws.send(msg)\r\n\r\n    processMessage: (data) =>\r\n        routingKey = data.routing_key\r\n\r\n        if not @.subscriptions[routingKey]?\r\n            return\r\n\r\n        subscription = @.subscriptions[routingKey]\r\n\r\n        if subscription.scope\r\n            subscription.scope.$apply ->\r\n                subscription.callback(data.data)\r\n\r\n        else\r\n            subscription.callback(data.data)\r\n\r\n    ###########################################\r\n    # Subscribe and Unsubscribe\r\n    ###########################################\r\n    subscribe: (scope, routingKey, callback) ->\r\n        if @.error\r\n            return\r\n\r\n        @log.debug(\"Subscribe to: #{routingKey}\")\r\n        subscription = {\r\n            scope: scope,\r\n            routingKey: routingKey,\r\n            callback: callback\r\n        }\r\n\r\n        message = {\r\n            \"cmd\": \"subscribe\",\r\n            \"routing_key\": routingKey\r\n        }\r\n\r\n        @.subscriptions[routingKey] = subscription\r\n        @.sendMessage(message)\r\n\r\n        scope.$on(\"$destroy\", => @.unsubscribe(routingKey)) if scope\r\n\r\n    unsubscribe: (routingKey) ->\r\n        if @.error\r\n            return\r\n\r\n        @log.debug(\"Unsubscribe from: #{routingKey}\")\r\n\r\n        message = {\r\n            \"cmd\": \"unsubscribe\",\r\n            \"routing_key\": routingKey\r\n        }\r\n\r\n        @.sendMessage(message)\r\n\r\n    ###########################################\r\n    # Event listeners\r\n    ###########################################\r\n    onOpen: ->\r\n        @.connected = true\r\n\r\n        @log.debug(\"WebSocket connection opened\")\r\n        token = @auth.getToken()\r\n\r\n        message = {\r\n            cmd: \"auth\"\r\n            data: {token: token, sessionId: @.sessionId}\r\n        }\r\n\r\n        @.sendMessage(message)\r\n        @.startHeartBeatMessages()\r\n        @.notifications()\r\n        @.liveNotifications()\r\n        @.webNotifications()\r\n\r\n    onMessage: (event) ->\r\n        @.log.debug \"WebSocket message received: #{event.data}\"\r\n\r\n        data = JSON.parse(event.data)\r\n\r\n        if data.cmd == \"pong\"\r\n            @.processHeartBeatPongMessage(data)\r\n        else\r\n            @.processMessage(data)\r\n\r\n    onError: (error) ->\r\n        @log.error(\"WebSocket error: #{error}\")\r\n        @.error = true\r\n        setTimeout(@.setupConnection, @.reconnectTryInterval)\r\n\r\n    onClose: ->\r\n        @log.debug(\"WebSocket closed.\")\r\n        @.connected = false\r\n        @.stopHeartBeatMessages()\r\n        setTimeout(@.setupConnection, @.reconnectTryInterval)\r\n\r\n\r\nclass EventsProvider\r\n    setSessionId: (sessionId) ->\r\n        @.sessionId = sessionId\r\n\r\n    $get: ($win, $log, $conf, $auth, liveAnnouncementService, $rootScope) ->\r\n        service = new EventsService($win, $log, $conf, $auth, liveAnnouncementService, $rootScope)\r\n        service.initialize(@.sessionId)\r\n        return service\r\n\r\n    @.prototype.$get.$inject = [\r\n        \"$window\",\r\n        \"$log\",\r\n        \"$tgConfig\",\r\n        \"$tgAuth\",\r\n        \"tgLiveAnnouncementService\",\r\n        \"$rootScope\"\r\n    ]\r\n\r\nmodule.provider(\"$tgEvents\", EventsProvider)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/feedback.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nmixOf = @.taiga.mixOf\r\ndebounce = @.taiga.debounce\r\ntrim = @.taiga.trim\r\n\r\nmodule = angular.module(\"taigaFeedback\", [])\r\n\r\nFeedbackDirective = ($lightboxService, $repo, $confirm, $loading, feedbackService)->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley()\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.create(\"feedback\", $scope.feedback)\r\n\r\n            promise.then (data) ->\r\n                currentLoading.finish()\r\n                $lightboxService.close($el)\r\n                $confirm.notify(\"success\", \"\\\\o/ we'll be happy to read your\")\r\n\r\n            promise.then null, ->\r\n                currentLoading.finish()\r\n                $confirm.notify(\"error\")\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        openLightbox = ->\r\n            $scope.feedback = {}\r\n            $lightboxService.open($el)\r\n            $el.find(\"textarea\").focus()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        openLightbox()\r\n\r\n    directive = {\r\n        link: link,\r\n        templateUrl: \"common/lightbox-feedback.html\"\r\n        scope: {}\r\n    }\r\n\r\n    return directive\r\n\r\nmodule.directive(\"tgLbFeedback\", [\"lightboxService\", \"$tgRepo\", \"$tgConfirm\",\r\n    \"$tgLoading\", \"tgFeedbackService\", FeedbackDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/integrations.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaIntegrations\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/issues.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaIssues\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/kanban.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaKanban\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/plugins.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaPlugins\", [\"ngRoute\"])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/projects.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaProject\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/related-tasks.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntrim = @.taiga.trim\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaRelatedTasks\", [])\r\n\r\n\r\nRelatedTaskRowDirective = ($repo, $compile, $confirm, $rootscope, $loading, $template, $translate, $emojis) ->\r\n    templateView = $template.get(\"task/related-task-row.html\", true)\r\n    templateEdit = $template.get(\"task/related-task-row-edit.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        @childScope = $scope.$new()\r\n\r\n        saveTask = debounce 2000, (task) ->\r\n            task.subject = $el.find('input').val()\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find('.task-name'))\r\n                .start()\r\n\r\n            promise = $repo.save(task)\r\n            promise.then =>\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"related-tasks:update\")\r\n\r\n            promise.then null, =>\r\n                currentLoading.finish()\r\n                $el.find('input').val(task.subject)\r\n                $confirm.notify(\"error\")\r\n            return promise\r\n\r\n        renderEdit = (task) ->\r\n            @childScope.$destroy()\r\n            @childScope = $scope.$new()\r\n            $el.off()\r\n            $el.html($compile(templateEdit({task: task}))(childScope))\r\n\r\n            $el.find(\".task-name input\").val(task.subject)\r\n\r\n            $el.on \"keyup\", \"input\", (event) ->\r\n                if event.keyCode == 13\r\n                    saveTask($model.$modelValue).then ->\r\n                        renderView($model.$modelValue)\r\n                else if event.keyCode == 27\r\n                    renderView($model.$modelValue)\r\n\r\n            $el.on \"click\", \".save-task\", (event) ->\r\n                saveTask($model.$modelValue).then ->\r\n                    renderView($model.$modelValue)\r\n\r\n            $el.on \"click\", \".cancel-edit\", (event) ->\r\n                renderView($model.$modelValue)\r\n\r\n        renderView = (task) ->\r\n            perms = {\r\n                modify_task: $scope.project.my_permissions.indexOf(\"modify_task\") != -1\r\n                delete_task: $scope.project.my_permissions.indexOf(\"delete_task\") != -1\r\n            }\r\n\r\n            $el.html($compile(templateView({\r\n                task: task,\r\n                perms: perms,\r\n                emojify: (text) -> $emojis.replaceEmojiNameByHtmlImgs(_.escape(text))\r\n            }))($scope))\r\n\r\n            $el.on \"click\", \".edit-task\", ->\r\n                renderEdit($model.$modelValue)\r\n                $el.find('input').focus().select()\r\n\r\n            $el.on \"click\", \".delete-task\", (event) ->\r\n                title = $translate.instant(\"TASK.TITLE_DELETE_ACTION\")\r\n                task = $model.$modelValue\r\n                message = task.subject\r\n\r\n                $confirm.askOnDelete(title, message).then (askResponse) ->\r\n                    promise = $repo.remove(task)\r\n                    promise.then ->\r\n                        askResponse.finish()\r\n                        $scope.$emit(\"related-tasks:delete\")\r\n\r\n                    promise.then null, ->\r\n                        askResponse.finish(false)\r\n                        $confirm.notify(\"error\")\r\n\r\n        $scope.$watch $attrs.ngModel, (val) ->\r\n            return if not val\r\n            renderView(val)\r\n\r\n        $scope.$on \"related-tasks:assigned-to-changed\", ->\r\n            $rootscope.$broadcast(\"related-tasks:update\")\r\n\r\n        $scope.$on \"related-tasks:status-changed\", ->\r\n            $rootscope.$broadcast(\"related-tasks:update\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link, require:\"ngModel\"}\r\n\r\nmodule.directive(\"tgRelatedTaskRow\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$rootScope\", \"$tgLoading\",\r\n                                      \"$tgTemplate\", \"$translate\", \"$tgEmojis\", RelatedTaskRowDirective])\r\n\r\n\r\nRelatedTaskCreateFormDirective = ($repo, $compile, $confirm, $tgmodel, $loading, $analytics) ->\r\n    newTask = {\r\n        subject: \"\"\r\n        assigned_to: null\r\n    }\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        createTask = (task) ->\r\n            task.subject = $el.find('input').val()\r\n            task.assigned_to = $scope.newTask.assigned_to\r\n            task.status = $scope.newTask.status\r\n            $scope.newTask.status = $scope.project.default_task_status\r\n            $scope.newTask.assigned_to = null\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find('.task-name'))\r\n                .start()\r\n\r\n            promise = $repo.create(\"tasks\", task)\r\n            promise.then ->\r\n                $analytics.trackEvent(\"task\", \"create\", \"create task on userstory\", 1)\r\n                currentLoading.finish()\r\n                $scope.$emit(\"related-tasks:add\")\r\n\r\n            promise.then null, ->\r\n                $el.find('input').val(task.subject)\r\n                currentLoading.finish()\r\n                $confirm.notify(\"error\")\r\n\r\n            return promise\r\n\r\n        close = () ->\r\n            $el.off()\r\n\r\n            $scope.openNewRelatedTask = false\r\n\r\n        reset = () ->\r\n            newTask = {\r\n                subject: \"\"\r\n                assigned_to: null\r\n            }\r\n\r\n            newTask[\"status\"] = $scope.project.default_task_status\r\n            newTask[\"project\"] = $scope.project.id\r\n            newTask[\"user_story\"] = $scope.us.id\r\n\r\n            $scope.newTask = $tgmodel.make_model(\"tasks\", newTask)\r\n\r\n        render = ->\r\n            return if $scope.openNewRelatedTask\r\n\r\n            $scope.openNewRelatedTask = true\r\n\r\n            $el.on \"keyup\", \"input\", (event)->\r\n                if event.keyCode == 13\r\n                    createTask(newTask).then ->\r\n                        reset()\r\n                        $el.find('input').focus()\r\n\r\n                else if event.keyCode == 27\r\n                    $scope.$apply () -> close()\r\n\r\n        $scope.save = () ->\r\n            createTask(newTask).then ->\r\n                close()\r\n\r\n        taiga.bindOnce $scope, \"us\", reset\r\n\r\n        $scope.$on \"related-tasks:show-form\", ->\r\n            $scope.$apply(render)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        templateUrl: 'task/related-task-create-form.html'\r\n    }\r\n\r\nmodule.directive(\"tgRelatedTaskCreateForm\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$tgModel\", \"$tgLoading\",\r\n                                             \"$tgAnalytics\", RelatedTaskCreateFormDirective])\r\n\r\n\r\nRelatedTaskCreateButtonDirective = ($repo, $compile, $confirm, $tgmodel, $template) ->\r\n    template = $template.get(\"common/components/add-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$watch \"project\", (val) ->\r\n            return if not val\r\n            $el.off()\r\n            if $scope.project.my_permissions.indexOf(\"add_task\") != -1\r\n                $el.html($compile(template())($scope))\r\n            else\r\n                $el.html(\"\")\r\n\r\n            $el.on \"click\", \".add-button\", (event)->\r\n                $scope.$emit(\"related-tasks:add-new-clicked\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgRelatedTaskCreateButton\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$tgModel\",\r\n                                               \"$tgTemplate\", RelatedTaskCreateButtonDirective])\r\n\r\n\r\nRelatedTasksDirective = ($repo, $rs, $rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        loadTasks = ->\r\n            return $rs.tasks.list($scope.projectId, null, $scope.usId).then (result) ->\r\n                Immutable.fromJS(result.data)\r\n\r\n        _isVisible = ->\r\n            if $scope.project\r\n                return $scope.project.my_permissions.indexOf(\"view_tasks\") != -1\r\n            return false\r\n\r\n        _isEditable = ->\r\n            if $scope.project\r\n                return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\r\n            return false\r\n\r\n        $scope.reorderTask = (task, newIndex) ->\r\n            $rootscope.$broadcast('task:reorder', task, newIndex)\r\n\r\n        $scope.showRelatedTasks = ->\r\n            return _isVisible() && ( _isEditable() ||  $scope.tasks?.length )\r\n\r\n        $scope.$on \"related-tasks:add\", ->\r\n            loadTasks().then ->\r\n                $rootscope.$broadcast(\"related-tasks:update\")\r\n\r\n        $scope.$on \"related-tasks:reordered\", ->\r\n            loadTasks()\r\n\r\n        $scope.$on \"related-tasks:delete\", ->\r\n            loadTasks().then ->\r\n                $rootscope.$broadcast(\"related-tasks:update\")\r\n\r\n        $scope.$on \"related-tasks:add-new-clicked\", ->\r\n            $scope.$broadcast(\"related-tasks:show-form\")\r\n\r\n        taiga.bindOnce $scope, \"us\", (val) ->\r\n            loadTasks()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgRelatedTasks\", [\"$tgRepo\", \"$tgResources\", \"$rootScope\", RelatedTasksDirective])\r\n\r\n\r\nRelatedTaskAssignedToInlineEditionDirective = ($repo, $rootscope, $translate, avatarService) ->\r\n    template = _.template(\"\"\"\r\n    <img style=\"background-color: <%- bg %>\" src=\"<%- imgurl %>\" alt=\"<%- name %>\"/>\r\n    <figcaption><%- name %></figcaption>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        updateRelatedTask = (task) ->\r\n            ctx = {\r\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\r\n            }\r\n\r\n            member = $scope.usersById[task.assigned_to]\r\n\r\n            avatar = avatarService.getAvatar(member)\r\n            ctx.imgurl = avatar.url\r\n            ctx.bg = avatar.bg\r\n\r\n            if member\r\n                ctx.name = member.full_name_display\r\n\r\n            $el.find(\".avatar\").html(template(ctx))\r\n            $el.find(\".task-assignedto\").attr('title', ctx.name)\r\n\r\n        $ctrl = $el.controller()\r\n        task = $scope.$eval($attrs.tgRelatedTaskAssignedToInlineEdition)\r\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\r\n        autoSave = !notAutoSave\r\n\r\n        $scope.$watch $attrs.tgRelatedTaskAssignedToInlineEdition, () ->\r\n            task = $scope.$eval($attrs.tgRelatedTaskAssignedToInlineEdition)\r\n            updateRelatedTask(task)\r\n\r\n        updateRelatedTask(task)\r\n\r\n        $el.on \"click\", \".task-assignedto\", (event) ->\r\n            $rootscope.$broadcast(\"assigned-to:add\", task)\r\n\r\n        taiga.bindOnce $scope, \"project\", (project) ->\r\n            # If the user has not enough permissions the click events are unbinded\r\n            if project.my_permissions.indexOf(\"modify_task\") == -1\r\n                $el.unbind(\"click\")\r\n                $el.find(\"a\").addClass(\"not-clickable\")\r\n\r\n        $scope.$on \"assigned-to:added\", debounce 2000, (ctx, userId, updatedRelatedTask) =>\r\n            if updatedRelatedTask.id == task.id\r\n                updatedRelatedTask.assigned_to = userId\r\n                if autoSave\r\n                    $repo.save(updatedRelatedTask).then ->\r\n                        $scope.$emit(\"related-tasks:assigned-to-changed\")\r\n                updateRelatedTask(updatedRelatedTask)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgRelatedTaskAssignedToInlineEdition\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"tgAvatarService\",\r\n                                                          RelatedTaskAssignedToInlineEditionDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass ResourcesService extends taiga.Service\r\n\r\nurls = {\r\n    # Auth\r\n    \"auth\": \"/auth\"\r\n    \"auth-register\": \"/auth/register\"\r\n    \"invitations\": \"/invitations\"\r\n\r\n    # User\r\n    \"users\": \"/users\"\r\n    \"by_username\": \"/users/by_username\"\r\n    \"users-password-recovery\": \"/users/password_recovery\"\r\n    \"users-change-password-from-recovery\": \"/users/change_password_from_recovery\"\r\n    \"users-change-password\": \"/users/change_password\"\r\n    \"users-change-email\": \"/users/change_email\"\r\n    \"users-cancel-account\": \"/users/cancel\"\r\n    \"users-export\": \"/users/export\"\r\n    \"user-stats\": \"/users/%s/stats\"\r\n    \"user-liked\": \"/users/%s/liked\"\r\n    \"user-voted\": \"/users/%s/voted\"\r\n    \"user-watched\": \"/users/%s/watched\"\r\n    \"user-contacts\": \"/users/%s/contacts\"\r\n    \"user-me\": \"/users/me\"\r\n\r\n    # User - Notification\r\n    \"permissions\": \"/permissions\"\r\n    \"notify-policies\": \"/notify-policies\"\r\n    \"notifications\": \"/web-notifications\"\r\n\r\n    # User Project Settings\r\n    \"user-project-settings\": \"/user-project-settings\"\r\n\r\n    # User - Storage\r\n    \"user-storage\": \"/user-storage\"\r\n\r\n    # Memberships\r\n    \"memberships\": \"/memberships\"\r\n    \"bulk-create-memberships\": \"/memberships/bulk_create\"\r\n\r\n    # Roles & Permissions\r\n    \"roles\": \"/roles\"\r\n    \"permissions\": \"/permissions\"\r\n\r\n    # Resolver\r\n    \"resolver\": \"/resolver\"\r\n\r\n    # Project\r\n    \"projects\": \"/projects\"\r\n    \"project-templates\": \"/project-templates\"\r\n    \"project-modules\": \"/projects/%s/modules\"\r\n    \"bulk-update-projects-order\": \"/projects/bulk_update_order\"\r\n    \"project-like\": \"/projects/%s/like\"\r\n    \"project-unlike\": \"/projects/%s/unlike\"\r\n    \"project-watch\": \"/projects/%s/watch\"\r\n    \"project-unwatch\": \"/projects/%s/unwatch\"\r\n    \"project-contact\": \"contact\"\r\n    \"project-transfer-validate-token\": \"/projects/%s/transfer_validate_token\"\r\n    \"project-transfer-accept\": \"/projects/%s/transfer_accept\"\r\n    \"project-transfer-reject\": \"/projects/%s/transfer_reject\"\r\n    \"project-transfer-request\": \"/projects/%s/transfer_request\"\r\n    \"project-transfer-start\": \"/projects/%s/transfer_start\"\r\n\r\n    # Project Values - Attributes\r\n    \"epic-statuses\": \"/epic-statuses\"\r\n    \"userstory-statuses\": \"/userstory-statuses\"\r\n    \"userstory-due-dates\": \"/userstory-due-dates\"\r\n    \"userstory-due-dates-create-default\": \"/userstory-due-dates/create_default\"\r\n    \"points\": \"/points\"\r\n    \"task-statuses\": \"/task-statuses\"\r\n    \"task-due-dates\": \"/task-due-dates\"\r\n    \"task-due-dates-create-default\": \"/task-due-dates/create_default\"\r\n    \"issue-statuses\": \"/issue-statuses\"\r\n    \"issue-due-dates\": \"/issue-due-dates\"\r\n    \"issue-due-dates-create-default\": \"/issue-due-dates/create_default\"\r\n    \"issue-types\": \"/issue-types\"\r\n    \"priorities\": \"/priorities\"\r\n    \"severities\": \"/severities\"\r\n\r\n    # Milestones/Sprints\r\n    \"milestones\": \"/milestones\"\r\n\r\n    # Epics\r\n    \"epics\": \"/epics\"\r\n    \"epic-upvote\": \"/epics/%s/upvote\"\r\n    \"epic-downvote\": \"/epics/%s/downvote\"\r\n    \"epic-watch\": \"/epics/%s/watch\"\r\n    \"epic-unwatch\": \"/epics/%s/unwatch\"\r\n    \"epic-related-userstories\": \"/epics/%s/related_userstories\"\r\n    \"epic-related-userstories-bulk-create\": \"/epics/%s/related_userstories/bulk_create\"\r\n\r\n    # User stories\r\n    \"userstories\": \"/userstories\"\r\n    \"bulk-create-us\": \"/userstories/bulk_create\"\r\n    \"bulk-update-us-backlog-order\": \"/userstories/bulk_update_backlog_order\"\r\n    \"bulk-update-us-milestone\": \"/userstories/bulk_update_milestone\"\r\n    \"bulk-update-us-miles-order\": \"/userstories/bulk_update_sprint_order\"\r\n    \"bulk-update-us-kanban-order\": \"/userstories/bulk_update_kanban_order\"\r\n    \"userstories-filters\": \"/userstories/filters_data\"\r\n    \"userstory-upvote\": \"/userstories/%s/upvote\"\r\n    \"userstory-downvote\": \"/userstories/%s/downvote\"\r\n    \"userstory-watch\": \"/userstories/%s/watch\"\r\n    \"userstory-unwatch\": \"/userstories/%s/unwatch\"\r\n\r\n    # Tasks\r\n    \"tasks\": \"/tasks\"\r\n    \"bulk-create-tasks\": \"/tasks/bulk_create\"\r\n    \"bulk-update-task-taskboard-order\": \"/tasks/bulk_update_taskboard_order\"\r\n    \"bulk-update-task-milestone\": \"/tasks/bulk_update_milestone\"\r\n    \"task-upvote\": \"/tasks/%s/upvote\"\r\n    \"task-downvote\": \"/tasks/%s/downvote\"\r\n    \"task-watch\": \"/tasks/%s/watch\"\r\n    \"task-unwatch\": \"/tasks/%s/unwatch\"\r\n    \"task-filters\": \"/tasks/filters_data\"\r\n\r\n    # Issues\r\n    \"issues\": \"/issues\"\r\n    \"bulk-create-issues\": \"/issues/bulk_create\"\r\n    \"bulk-update-issue-milestone\": \"/issues/bulk_update_milestone\"\r\n    \"issues-filters\": \"/issues/filters_data\"\r\n    \"issue-upvote\": \"/issues/%s/upvote\"\r\n    \"issue-downvote\": \"/issues/%s/downvote\"\r\n    \"issue-watch\": \"/issues/%s/watch\"\r\n    \"issue-unwatch\": \"/issues/%s/unwatch\"\r\n\r\n    # Wiki pages\r\n    \"wiki\": \"/wiki\"\r\n    \"wiki-restore\": \"/wiki/%s/restore\"\r\n    \"wiki-links\": \"/wiki-links\"\r\n\r\n    # History\r\n    \"history/epic\": \"/history/epic\"\r\n    \"history/us\": \"/history/userstory\"\r\n    \"history/issue\": \"/history/issue\"\r\n    \"history/task\": \"/history/task\"\r\n    \"history/wiki\": \"/history/wiki\"\r\n\r\n    # Attachments\r\n    \"attachments/epic\": \"/epics/attachments\"\r\n    \"attachments/us\": \"/userstories/attachments\"\r\n    \"attachments/issue\": \"/issues/attachments\"\r\n    \"attachments/task\": \"/tasks/attachments\"\r\n    \"attachments/wiki_page\": \"/wiki/attachments\"\r\n\r\n    # Custom Attributess\r\n    \"custom-attributes/epic\": \"/epic-custom-attributes\"\r\n    \"custom-attributes/userstory\": \"/userstory-custom-attributes\"\r\n    \"custom-attributes/task\": \"/task-custom-attributes\"\r\n    \"custom-attributes/issue\": \"/issue-custom-attributes\"\r\n\r\n    # Custom Attributess - Values\r\n    \"custom-attributes-values/epic\": \"/epics/custom-attributes-values\"\r\n    \"custom-attributes-values/userstory\": \"/userstories/custom-attributes-values\"\r\n    \"custom-attributes-values/task\": \"/tasks/custom-attributes-values\"\r\n    \"custom-attributes-values/issue\": \"/issues/custom-attributes-values\"\r\n\r\n    # Webhooks\r\n    \"webhooks\": \"/webhooks\"\r\n    \"webhooks-test\": \"/webhooks/%s/test\"\r\n    \"webhooklogs\": \"/webhooklogs\"\r\n    \"webhooklogs-resend\": \"/webhooklogs/%s/resend\"\r\n\r\n    # Reports - CSV\r\n    \"epics-csv\": \"/epics/csv?uuid=%s\"\r\n    \"userstories-csv\": \"/userstories/csv?uuid=%s\"\r\n    \"tasks-csv\": \"/tasks/csv?uuid=%s\"\r\n    \"issues-csv\": \"/issues/csv?uuid=%s\"\r\n\r\n    # Timeline\r\n    \"timeline-profile\": \"/timeline/profile\"\r\n    \"timeline-user\": \"/timeline/user\"\r\n    \"timeline-project\": \"/timeline/project\"\r\n\r\n    # Search\r\n    \"search\": \"/search\"\r\n\r\n    # Export/Import\r\n    \"exporter\": \"/exporter\"\r\n    \"importer\": \"/importer/load_dump\"\r\n\r\n    # Feedback\r\n    \"feedback\": \"/feedback\"\r\n\r\n    # locales\r\n    \"locales\": \"/locales\"\r\n\r\n    # Application tokens\r\n    \"applications\": \"/applications\"\r\n    \"application-tokens\": \"/application-tokens\"\r\n\r\n    # Stats\r\n    \"stats-discover\": \"/stats/discover\"\r\n\r\n    # Importers\r\n    \"importers-trello-auth-url\": \"/importers/trello/auth_url\"\r\n    \"importers-trello-authorize\": \"/importers/trello/authorize\"\r\n    \"importers-trello-list-projects\": \"/importers/trello/list_projects\"\r\n    \"importers-trello-list-users\": \"/importers/trello/list_users\"\r\n    \"importers-trello-import-project\": \"/importers/trello/import_project\"\r\n\r\n    \"importers-jira-auth-url\": \"/importers/jira/auth_url\"\r\n    \"importers-jira-authorize\": \"/importers/jira/authorize\"\r\n    \"importers-jira-list-projects\": \"/importers/jira/list_projects\"\r\n    \"importers-jira-list-users\": \"/importers/jira/list_users\"\r\n    \"importers-jira-import-project\": \"/importers/jira/import_project\"\r\n\r\n    \"importers-github-auth-url\": \"/importers/github/auth_url\"\r\n    \"importers-github-authorize\": \"/importers/github/authorize\"\r\n    \"importers-github-list-projects\": \"/importers/github/list_projects\"\r\n    \"importers-github-list-users\": \"/importers/github/list_users\"\r\n    \"importers-github-import-project\": \"/importers/github/import_project\"\r\n\r\n    \"importers-asana-auth-url\": \"/importers/asana/auth_url\"\r\n    \"importers-asana-authorize\": \"/importers/asana/authorize\"\r\n    \"importers-asana-list-projects\": \"/importers/asana/list_projects\"\r\n    \"importers-asana-list-users\": \"/importers/asana/list_users\"\r\n    \"importers-asana-import-project\": \"/importers/asana/import_project\"\r\n}\r\n\r\n# Initialize api urls service\r\ninitUrls = ($log, $urls) ->\r\n    $log.debug \"Initialize api urls\"\r\n    $urls.update(urls)\r\n\r\n# Initialize resources service populating it with methods\r\n# defined in separated files.\r\ninitResources = ($log, $rs) ->\r\n    $log.debug \"Initialize resources\"\r\n    providers = _.toArray(arguments).slice(2)\r\n\r\n    for provider in providers\r\n        provider($rs)\r\n\r\nmodule = angular.module(\"taigaResources\", [\"taigaBase\"])\r\nmodule.service(\"$tgResources\", ResourcesService)\r\n\r\n# Module entry point\r\nmodule.run([\"$log\", \"$tgUrls\", initUrls])\r\nmodule.run([\r\n    \"$log\",\r\n    \"$tgResources\",\r\n    \"$tgProjectsResourcesProvider\",\r\n    \"$tgCustomAttributesResourcesProvider\",\r\n    \"$tgCustomAttributesValuesResourcesProvider\",\r\n    \"$tgMembershipsResourcesProvider\",\r\n    \"$tgNotifyPoliciesResourcesProvider\",\r\n    \"$tgInvitationsResourcesProvider\",\r\n    \"$tgRolesResourcesProvider\",\r\n    \"$tgUserProjectSettingsResourcesProvider\",\r\n    \"$tgUserSettingsResourcesProvider\",\r\n    \"$tgSprintsResourcesProvider\",\r\n    \"$tgEpicsResourcesProvider\",\r\n    \"$tgUserstoriesResourcesProvider\",\r\n    \"$tgTasksResourcesProvider\",\r\n    \"$tgIssuesResourcesProvider\",\r\n    \"$tgWikiResourcesProvider\",\r\n    \"$tgSearchResourcesProvider\",\r\n    \"$tgMdRenderResourcesProvider\",\r\n    \"$tgHistoryResourcesProvider\",\r\n    \"$tgKanbanResourcesProvider\",\r\n    \"$tgModulesResourcesProvider\",\r\n    \"$tgWebhooksResourcesProvider\",\r\n    \"$tgWebhookLogsResourcesProvider\",\r\n    \"$tgLocalesResourcesProvider\",\r\n    \"$tgUsersResourcesProvider\",\r\n    initResources\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/search.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nmixOf = @.taiga.mixOf\r\ndebounceLeading = @.taiga.debounceLeading\r\ntrim = @.taiga.trim\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaSearch\", [])\r\n\r\n\r\n#############################################################################\r\n## Search Controller\r\n#############################################################################\r\n\r\nclass SearchController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @q, @location, @appMetaService, @navUrls, @translate, @errorHandlingService, @projectService) ->\r\n        @scope.sectionName = \"Search\"\r\n\r\n        @.loadInitialData()\r\n\r\n        title = @translate.instant(\"SEARCH.PAGE_TITLE\", {projectName: @scope.project.name})\r\n        description = @translate.instant(\"SEARCH.PAGE_DESCRIPTION\", {\r\n            projectName: @scope.project.name,\r\n            projectDescription: @scope.project.description\r\n        })\r\n\r\n        @appMetaService.setAll(title, description)\r\n\r\n        # Search input watcher\r\n        @scope.searchTerm = null\r\n        loadSearchData = debounceLeading(100, (t) => @.loadSearchData(t))\r\n\r\n        bindOnce @scope, \"projectId\", (projectId) =>\r\n            if !@scope.searchResults && @scope.searchTerm\r\n                @.loadSearchData()\r\n\r\n        @scope.$watch \"searchTerm\", (term) =>\r\n            if term != undefined && @scope.projectId\r\n                @.loadSearchData(term)\r\n\r\n    loadFilters: ->\r\n        defered = @q.defer()\r\n        defered.resolve()\r\n        return defered.promise\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n\r\n        @scope.epicStatusById = groupBy(project.epic_statuses, (x) -> x.id)\r\n        @scope.issueStatusById = groupBy(project.issue_statuses, (x) -> x.id)\r\n        @scope.taskStatusById = groupBy(project.task_statuses, (x) -> x.id)\r\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\r\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\r\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\r\n        return project\r\n\r\n    loadSearchData: (term = \"\") ->\r\n        @scope.loading = true\r\n\r\n        @._loadSearchData(term).then (data) =>\r\n            @scope.searchResults = data\r\n            @scope.loading = false\r\n\r\n    _loadSearchData: (term = \"\") ->\r\n        @._promise.abort() if @._promise\r\n\r\n        @._promise = @rs.search.do(@scope.projectId, term)\r\n\r\n        return @._promise\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @scope.projectId = project.id\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n\r\nmodule.controller(\"SearchController\", SearchController)\r\n\r\n\r\n#############################################################################\r\n## Search box directive\r\n#############################################################################\r\n\r\nSearchBoxDirective = (projectService, $lightboxService, $navurls, $location, $route)->\r\n    link = ($scope, $el, $attrs) ->\r\n        project = null\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            if not form.validate()\r\n                return\r\n\r\n            text = $el.find(\"#search-text\").val()\r\n\r\n            url = $navurls.resolve(\"project-search\", {project: project.get(\"slug\")})\r\n\r\n            $scope.$apply ->\r\n                $lightboxService.close($el)\r\n\r\n                $location.path(url)\r\n                $location.search(\"text\", text).path(url)\r\n                $route.reload()\r\n\r\n\r\n        openLightbox = () ->\r\n            project = projectService.project\r\n\r\n            $lightboxService.open($el).then () ->\r\n                $el.find(\"#search-text\").focus()\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        openLightbox()\r\n\r\n    return {\r\n        templateUrl: \"search/lightbox-search.html\",\r\n        link:link\r\n    }\r\n\r\nSearchBoxDirective.$inject = [\r\n    \"tgProjectService\",\r\n    \"lightboxService\",\r\n    \"$tgNavUrls\",\r\n    \"$tgLocation\",\r\n    \"$route\"\r\n]\r\n\r\nmodule.directive(\"tgSearchBox\", SearchBoxDirective)\r\n\r\n\r\n#############################################################################\r\n## Search Directive\r\n#############################################################################\r\n\r\nSearchDirective = ($log, $compile, $templatecache, $routeparams, $location, $analytics) ->\r\n    linkTable = ($scope, $el, $attrs, $ctrl) ->\r\n        applyAutoTab = true\r\n        activeSectionName = \"userstories\"\r\n        tabsDom = $el.find(\".search-filter\")\r\n        currentSearchResults = null\r\n\r\n        getActiveSection = (data) ->\r\n            maxVal = 0\r\n            selectedSection = {}\r\n            selectedSection.name = \"userstories\"\r\n            selectedSection.value = []\r\n\r\n            if !applyAutoTab\r\n                selectedSection.name = activeSectionName\r\n                selectedSection.value = data[activeSectionName]\r\n\r\n                return selectedSection\r\n\r\n            if data\r\n                for name in [\"userstories\", \"epics\", \"issues\", \"tasks\", \"wikipages\"]\r\n                    value = data[name]\r\n\r\n                    if value.length > maxVal\r\n                        maxVal = value.length\r\n                        selectedSection.name = name\r\n                        selectedSection.value = value\r\n                        break\r\n\r\n            if maxVal == 0\r\n                return selectedSection\r\n\r\n            return selectedSection\r\n\r\n        renderFilterTabs = (data) ->\r\n            for name, value of data\r\n                tabsDom.find(\"li.#{name}\").show()\r\n                tabsDom.find(\"li.#{name} .num\").html(value.length)\r\n\r\n        markSectionTabActive = (section) ->\r\n            # Mark as active the item with max amount of results\r\n            tabsDom.find(\"a.active\").removeClass(\"active\")\r\n            tabsDom.find(\"li.#{section.name} a\").addClass(\"active\")\r\n\r\n            applyAutoTab = false\r\n            activeSectionName = section.name\r\n\r\n        templates = {\r\n            epics: $templatecache.get(\"search-epics\")\r\n            issues: $templatecache.get(\"search-issues\")\r\n            tasks: $templatecache.get(\"search-tasks\")\r\n            userstories: $templatecache.get(\"search-userstories\")\r\n            wikipages: $templatecache.get(\"search-wikipages\")\r\n        }\r\n\r\n        renderTableContent = (section) ->\r\n            oldElements = $el.find(\".search-result-table\").children()\r\n            oldScope = oldElements.scope()\r\n\r\n            if oldScope\r\n                oldScope.$destroy()\r\n                oldElements.remove()\r\n\r\n            scope = $scope.$new()\r\n            scope[section.name] = section.value\r\n\r\n            template = angular.element.parseHTML(trim(templates[section.name]))\r\n            element = $compile(template)(scope)\r\n            $el.find(\".search-result-table\").html(element)\r\n\r\n        $scope.$watch \"searchResults\", (data) ->\r\n            currentSearchResults = data\r\n\r\n            return if !currentSearchResults\r\n\r\n            activeSection = getActiveSection(data)\r\n\r\n            renderFilterTabs(data)\r\n\r\n            renderTableContent(activeSection)\r\n            markSectionTabActive(activeSection)\r\n\r\n        $scope.$watch \"searchTerm\", (searchTerm) ->\r\n            $location.search(\"text\", searchTerm) if searchTerm != undefined\r\n            $analytics.trackPage($location.url(), \"Search\")\r\n\r\n        $el.on \"click\", \".search-filter li > a\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            sectionName = target.parent().data(\"name\")\r\n            sectionData = if !currentSearchResults then [] else currentSearchResults[sectionName]\r\n\r\n            section = {\r\n                name: sectionName,\r\n                value: sectionData\r\n            }\r\n\r\n            $scope.$apply ->\r\n                renderTableContent(section)\r\n                markSectionTabActive(section)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        linkTable($scope, $el, $attrs, $ctrl)\r\n\r\n        searchText = $routeparams.text\r\n        $scope.$watch \"projectId\", (projectId) ->\r\n            $scope.searchTerm =  searchText if projectId?\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgSearch\", [\"$log\", \"$compile\", \"$templateCache\", \"$routeParams\", \"$tgLocation\", \"$tgAnalytics\",\r\n                              SearchDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaTaskboard\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/tasks.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaTasks\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/team.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaTeam\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaUserSettings\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/userstories.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaUserStories\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/wiki.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaWiki\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/analytics.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n\r\nclass AnalyticsService extends taiga.Service\r\n    @.$inject = [\"$rootScope\", \"$log\", \"$tgConfig\", \"$window\", \"$document\", \"$location\"]\r\n\r\n    constructor: (@rootscope, @log, @config, @win, @doc, @location) ->\r\n        @.initialized = false\r\n\r\n        conf = @config.get(\"analytics\", {})\r\n\r\n        @.accountId = conf.accountId\r\n        @.pageEvent = conf.pageEvent or \"$routeChangeSuccess\"\r\n        @.trackRoutes = conf.trackRoutes or true\r\n        @.ignoreFirstPageLoad = conf.ignoreFirstPageLoad or false\r\n\r\n    initialize: ->\r\n        if not @.accountId\r\n            @log.debug \"Analytics: no acount id provided. Disabling.\"\r\n            return\r\n\r\n        @.injectAnalytics()\r\n\r\n        @win.ga(\"create\", @.accountId, \"auto\")\r\n        @win.ga(\"require\", \"ec\")\r\n        @win.ga(\"require\", \"displayfeatures\")\r\n\r\n        if @.trackRoutes and (not @.ignoreFirstPageLoad)\r\n            @win.ga(\"send\", \"pageview\", @.getUrl())\r\n\r\n        # activates page tracking\r\n        if @.trackRoutes\r\n            @rootscope.$on @.pageEvent, =>\r\n                @.trackPage(@.getUrl(), \"Taiga\")\r\n\r\n        @.initialized = true\r\n        @.setUserId()\r\n\r\n    setUserId: ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n        @win.ga('set', 'userId', @rootscope?.user?.uuid)\r\n\r\n    getUrl: ->\r\n        return @location.path()\r\n\r\n    injectAnalytics: ->\r\n        fn = `(function(i,s,o,g,r,a,m){i[\"GoogleAnalyticsObject\"]=r;i[r]=i[r]||function(){\r\n              (i[r].q=i[r].q||[]).push(arguments);},i[r].l=1*new Date();a=s.createElement(o),\r\n              m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m);})`\r\n        fn(window, document, \"script\", \"//www.google-analytics.com/analytics.js\", \"ga\")\r\n\r\n    trackPage: (url, title) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        title = title or @doc[0].title\r\n        @win.ga(\"send\", \"pageview\", {\r\n            \"page\": url,\r\n            \"title\": title\r\n        })\r\n\r\n    trackEvent: (category, action, label, value) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga(\"send\", \"event\", category, action, label, value)\r\n\r\n    ecViewPlan: (plan) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan.plan_id,\r\n            'name': plan.name,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n        @win.ga('ec:setAction','detail')\r\n        @.trackEvent(\"ecommerce\", \"view-product-detail\", plan.name, plan.plan_id)\r\n\r\n    ecClickPlan: (plan) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan.plan_id,\r\n            'name': plan.name,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n        @win.ga('ec:setAction','click')\r\n        @.trackEvent(\"ecommerce\", \"click-product\", plan.name, plan.plan_id)\r\n\r\n    ecListPlans: ([plans], page) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        position = 1\r\n        for plan in plans\r\n            @win.ga('ec:addImpression', {\r\n               'id': plan.plan_id,\r\n               'name': plan.name,\r\n               'list': page,\r\n               'position': position,\r\n            })\r\n            position++\r\n        @.trackEvent(\"ecommerce\", \"list-plans\")\r\n\r\n    ecAddToCart: (plan_id, plan_name, plan_price) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan_id,\r\n            'name': plan_name,\r\n            'price': plan_price,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n        @win.ga('ec:setAction','add')\r\n        @.trackEvent('ecommerce', 'add-to-cart', 'Collect Payment Info', null)\r\n\r\n    ecConfirmChange: (plan_id, plan_name, plan_price) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan_id,\r\n            'name': plan_name,\r\n            'price': plan_price,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n        @win.ga('ec:setAction','checkout', {'step': 1,})\r\n        @.trackEvent(\"ecommerce\", \"start-checkout\", \"start\", 1)\r\n\r\n    ecPurchase: (plan_id, plan_name, plan_price) ->\r\n        return if not @.initialized\r\n        return if not @win.ga\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan_id,\r\n            'name': plan_name,\r\n            'price': plan_price,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n\r\n        @win.ga('ec:setAction','checkout', {'step': 2,})\r\n        @.trackEvent(\"ecommerce\", \"end-checkout\", \"end\", 2)\r\n\r\n        @win.ga('ec:addProduct', {\r\n            'id': plan_id,\r\n            'name': plan_name,\r\n            'price': plan_price,\r\n            'category': \"plans\",\r\n            'quantity': 1,\r\n            'position': 1,\r\n        })\r\n        @win.ga('ec:setAction','purchase', {\r\n            'id': plan_id,\r\n            'revenue': plan_price,\r\n        })\r\n        @.trackEvent('ecommerce', 'checkout', 'Plan checkout', null)\r\n\r\nmodule.service(\"$tgAnalytics\", AnalyticsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/bind-scope.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nBindScope = (config) ->\r\n    if !config.debugInfo\r\n        jQuery.fn.scope = () -> this.data('scope')\r\n\r\n    link = ($scope, $el) ->\r\n        if !config.debugInfo\r\n            $el\r\n                .data('scope', $scope)\r\n                .addClass('tg-scope')\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBindScope\", [\"$tgConfig\", BindScope])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/compile-html.directive.coffee\r\n###\r\n\r\nCompileHtmlDirective = ($compile) ->\r\n    link = (scope, element, attrs) ->\r\n        scope.$watch attrs.tgCompileHtml, (newValue, oldValue) ->\r\n            element.html(newValue)\r\n            $compile(element.contents())(scope)\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nCompileHtmlDirective.$inject = [\"$compile\"]\r\n\r\nangular.module(\"taigaCommon\").directive(\"tgCompileHtml\", CompileHtmlDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/components.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n\r\n#############################################################################\r\n## Date Range Directive (used mainly for sprint date range)\r\n#############################################################################\r\n\r\nDateRangeDirective = ($translate) ->\r\n    renderRange = ($el, first, second) ->\r\n        prettyDate = $translate.instant(\"BACKLOG.SPRINTS.DATE\")\r\n        initDate = moment(first).format(prettyDate)\r\n        endDate = moment(second).format(prettyDate)\r\n        $el.html(\"#{initDate}-#{endDate}\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        [first, second] = $attrs.tgDateRange.split(\",\")\r\n\r\n        bindOnce $scope, first, (valFirst) ->\r\n            bindOnce $scope, second, (valSecond) ->\r\n                renderRange($el, valFirst, valSecond)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgDateRange\", [\"$translate\", DateRangeDirective])\r\n\r\n\r\n#############################################################################\r\n## Date Selector Directive (using pikaday)\r\n#############################################################################\r\n\r\nDateSelectorDirective = ($rootscope, datePickerConfigService) ->\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        selectedDate = null\r\n\r\n        initialize = () ->\r\n            datePickerConfig = datePickerConfigService.get()\r\n\r\n            _.merge(datePickerConfig, {\r\n                field: $el[0]\r\n            })\r\n\r\n            $el.picker = new Pikaday(datePickerConfig)\r\n\r\n        unbind = $rootscope.$on \"$translateChangeEnd\", (ctx) =>\r\n            $el.picker.destroy() if $el.picker\r\n            initialize()\r\n\r\n        $attrs.$observe \"pickerValue\", (val) ->\r\n            $el.val(val)\r\n\r\n            if val?\r\n                $el.picker.destroy() if $el.picker\r\n                initialize()\r\n\r\n            $el.picker.setDate(val)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n            unbind()\r\n            $el.picker.destroy()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgDateSelector\", [\"$rootScope\", \"tgDatePickerConfigService\", DateSelectorDirective])\r\n\r\n\r\n#############################################################################\r\n## Sprint Progress Bar Directive\r\n#############################################################################\r\n\r\nSprintProgressBarDirective = ->\r\n    renderProgress = ($el, percentage, visual_percentage) ->\r\n        if $el.hasClass(\".current-progress\")\r\n            $el.css(\"width\", \"#{percentage}%\")\r\n        else\r\n            $el.find(\".current-progress\").css(\"width\", \"#{visual_percentage}%\")\r\n            $el.find(\".number\").html(\"#{percentage} %\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgSprintProgressbar, (sprint) ->\r\n            closedPoints = sprint.closed_points\r\n            totalPoints = sprint.total_points\r\n            percentage = 0\r\n            percentage = Math.round(100 * (closedPoints/totalPoints)) if totalPoints != 0\r\n            visual_percentage = 0\r\n            #Visual hack for .current-progress bar\r\n            visual_percentage = Math.round(98 * (closedPoints/totalPoints)) if totalPoints != 0\r\n\r\n            renderProgress($el, percentage, visual_percentage)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgSprintProgressbar\", SprintProgressBarDirective)\r\n\r\n\r\n#############################################################################\r\n## Created-by display directive\r\n#############################################################################\r\n\r\nCreatedByDisplayDirective = ($template, $compile, $translate, $navUrls, avatarService)->\r\n    # Display the owner information (full name and photo) and the date of\r\n    # creation of an object (like USs, tasks and issues).\r\n    #\r\n    # Example:\r\n    #     div.us-created-by(tg-created-by-display, ng-model=\"us\")\r\n    #\r\n    # Requirements:\r\n    #   - model object must have the attributes 'created_date' and\r\n    #     'owner'(ng-model)\r\n    #   - scope.usersById object is required.\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.ngModel, (model) ->\r\n            if model?\r\n\r\n                avatar = avatarService.getAvatar(model.owner_extra_info)\r\n                $scope.owner = model.owner_extra_info or {\r\n                    full_name_display: $translate.instant(\"COMMON.EXTERNAL_USER\")\r\n                }\r\n\r\n                $scope.owner.avatar = avatar.url\r\n                $scope.owner.bg = avatar.bg\r\n\r\n                $scope.url = if $scope.owner?.is_active then $navUrls.resolve(\"user-profile\", {username: $scope.owner.username}) else \"\"\r\n\r\n\r\n                $scope.date =  moment(model.created_date).format($translate.instant(\"COMMON.DATETIME\"))\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\",\r\n        scope: true,\r\n        templateUrl: \"common/components/created-by.html\"\r\n    }\r\n\r\nmodule.directive(\"tgCreatedByDisplay\", [\"$tgTemplate\", \"$compile\", \"$translate\", \"$tgNavUrls\", \"tgAvatarService\",\r\n                                        CreatedByDisplayDirective])\r\n\r\n\r\nUserDisplayDirective = ($template, $compile, $translate, $navUrls, avatarService)->\r\n    # Display the user information (full name and photo).\r\n    #\r\n    # Example:\r\n    #     div.creator(tg-user-display, tg-user-id=\"{{ user.id }}\")\r\n    #\r\n    # Requirements:\r\n    #   - scope.usersById object is required.\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        id = $attrs.tgUserId\r\n        $scope.user = $scope.usersById[id] or {\r\n            full_name_display: $translate.instant(\"COMMON.EXTERNAL_USER\")\r\n        }\r\n\r\n        avatar = avatarService.getAvatar($scope.usersById[id] or null)\r\n\r\n        $scope.user.avatar = avatar.url\r\n        $scope.user.bg = avatar.bg\r\n\r\n        $scope.url = if $scope.user.is_active then $navUrls.resolve(\"user-profile\", {username: $scope.user.username}) else \"\"\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        scope: true,\r\n        templateUrl: \"common/components/user-display.html\"\r\n    }\r\n\r\nmodule.directive(\"tgUserDisplay\", [\"$tgTemplate\", \"$compile\", \"$translate\", \"$tgNavUrls\", \"tgAvatarService\",\r\n                                   UserDisplayDirective])\r\n\r\n#############################################################################\r\n## Watchers directive\r\n#############################################################################\r\n\r\nWatchersDirective = ($rootscope, $confirm, $repo, $modelTransform, $template, $compile, $translate) ->\r\n    # You have to include a div with the tg-lb-watchers directive in the page\r\n    # where use this directive\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\r\n\r\n        save = (watchers) ->\r\n            transform = $modelTransform.save (item) ->\r\n                item.watchers = watchers\r\n\r\n                return item\r\n\r\n            transform.then ->\r\n                watchers = _.map(watchers, (watcherId) -> $scope.usersById[watcherId])\r\n                renderWatchers(watchers)\r\n                $rootscope.$broadcast(\"object:updated\")\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n        deleteWatcher = (watcherIds) ->\r\n            transform = $modelTransform.save (item) ->\r\n                item.watchers = watcherIds\r\n\r\n                return item\r\n\r\n            transform.then () ->\r\n                item = $modelTransform.getObj()\r\n                watchers = _.map(item.watchers, (watcherId) -> $scope.usersById[watcherId])\r\n                renderWatchers(watchers)\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                item.revert()\r\n                $confirm.notify(\"error\")\r\n\r\n        renderWatchers = (watchers) ->\r\n            $scope.watchers = watchers\r\n            $scope.isEditable = isEditable()\r\n\r\n        $el.on \"click\", \".js-delete-watcher\", (event) ->\r\n            event.preventDefault()\r\n            return if not isEditable()\r\n            target = angular.element(event.currentTarget)\r\n            watcherId = target.data(\"watcher-id\")\r\n\r\n            title = $translate.instant(\"COMMON.WATCHERS.TITLE_LIGHTBOX_DELETE_WARTCHER\")\r\n            message = $scope.usersById[watcherId].full_name_display\r\n\r\n            $confirm.askOnDelete(title, message).then (askResponse) =>\r\n                askResponse.finish()\r\n\r\n                watcherIds = _.clone($model.$modelValue.watchers, false)\r\n                watcherIds = _.pull(watcherIds, watcherId)\r\n\r\n                deleteWatcher(watcherIds)\r\n\r\n        $scope.$on \"watcher:added\", (ctx, watcherId) ->\r\n            watchers = _.clone($model.$modelValue.watchers, false)\r\n            watchers.push(watcherId)\r\n            watchers = _.uniq(watchers)\r\n\r\n            save(watchers)\r\n\r\n        $scope.$watch $attrs.ngModel, (item) ->\r\n            return if not item?\r\n            watchers = _.map(item.watchers, (watcherId) -> $scope.usersById[watcherId])\r\n            watchers = _.filter watchers, (it) -> return !!it\r\n\r\n            renderWatchers(watchers)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        scope: true,\r\n        templateUrl: \"common/components/watchers.html\",\r\n        link:link,\r\n        require:\"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgWatchers\", [\"$rootScope\", \"$tgConfirm\", \"$tgRepo\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\",\r\n                                \"$translate\", WatchersDirective])\r\n\r\n#############################################################################\r\n## Block Button directive\r\n#############################################################################\r\n\r\nBlockButtonDirective = ($rootscope, $loading, $template) ->\r\n    template = $template.get(\"common/components/block-button.html\")\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\r\n\r\n        $scope.$watch $attrs.ngModel, (item) ->\r\n            return if not item\r\n\r\n            if isEditable()\r\n                $el.find('.item-block').addClass('editable')\r\n\r\n            if item.is_blocked\r\n                $el.find('.item-block').removeClass('is-active')\r\n                $el.find('.item-unblock').addClass('is-active')\r\n            else\r\n                $el.find('.item-block').addClass('is-active')\r\n                $el.find('.item-unblock').removeClass('is-active')\r\n\r\n        $el.on \"click\", \".item-block\", (event) ->\r\n            event.preventDefault()\r\n            $rootscope.$broadcast(\"block\", $model.$modelValue)\r\n\r\n        $el.on \"click\", \".item-unblock\", (event) ->\r\n            event.preventDefault()\r\n            currentLoading = $loading()\r\n                .target($el.find(\".item-unblock\"))\r\n                .start()\r\n\r\n            finish = ->\r\n                currentLoading.finish()\r\n\r\n            $rootscope.$broadcast(\"unblock\", $model.$modelValue, finish)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n        template: template\r\n    }\r\n\r\nmodule.directive(\"tgBlockButton\", [\"$rootScope\", \"$tgLoading\", \"$tgTemplate\", BlockButtonDirective])\r\n\r\n\r\n#############################################################################\r\n## Delete Button directive\r\n#############################################################################\r\n\r\nDeleteButtonDirective = ($log, $repo, $confirm, $location, $template) ->\r\n    template = $template.get(\"common/components/delete-button.html\")\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        if not $attrs.onDeleteGoToUrl\r\n            return $log.error \"DeleteButtonDirective requires on-delete-go-to-url set in scope.\"\r\n        if not $attrs.onDeleteTitle\r\n            return $log.error \"DeleteButtonDirective requires on-delete-title set in scope.\"\r\n\r\n        $el.on \"click\", \".button-delete\", (event) ->\r\n            title = $attrs.onDeleteTitle\r\n            subtitle = $model.$modelValue.subject\r\n\r\n            $confirm.askOnDelete(title, subtitle).then (askResponse) =>\r\n                promise = $repo.remove($model.$modelValue)\r\n                promise.then =>\r\n                    askResponse.finish()\r\n                    url = $scope.$eval($attrs.onDeleteGoToUrl)\r\n                    $location.path(url)\r\n                promise.then null, =>\r\n                    askResponse.finish(false)\r\n                    $confirm.notify(\"error\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n        template: template\r\n    }\r\n\r\nmodule.directive(\"tgDeleteButton\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"$tgTemplate\", DeleteButtonDirective])\r\n\r\n#############################################################################\r\n## Common list directives\r\n#############################################################################\r\n## NOTE: These directives are used in issues and search and are\r\n##       completely bindonce, they only serves for visualization of data.\r\n#############################################################################\r\n\r\nListItemEpicStatusDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        epic = $scope.$eval($attrs.tgListitemEpicStatus)\r\n        bindOnce $scope, \"epicStatusById\", (epicStatusById) ->\r\n            $el.html(epicStatusById[epic.status].name)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgListitemEpicStatus\", ListItemEpicStatusDirective)\r\n\r\nListItemUsStatusDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        us = $scope.$eval($attrs.tgListitemUsStatus)\r\n        bindOnce $scope, \"usStatusById\", (usStatusById) ->\r\n            $el.html(usStatusById[us.status].name)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgListitemUsStatus\", ListItemUsStatusDirective)\r\n\r\n\r\nListItemTaskStatusDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        task = $scope.$eval($attrs.tgListitemTaskStatus)\r\n        bindOnce $scope, \"taskStatusById\", (taskStatusById) ->\r\n            $el.html(taskStatusById[task.status].name)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgListitemTaskStatus\", ListItemTaskStatusDirective)\r\n\r\n\r\nListItemAssignedtoDirective = ($template, $translate, avatarService) ->\r\n    template = $template.get(\"common/components/list-item-assigned-to-avatar.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, \"usersById\", (usersById) ->\r\n            item = $scope.$eval($attrs.tgListitemAssignedto)\r\n            ctx = {\r\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\r\n            }\r\n\r\n            member = usersById[item.assigned_to]\r\n            avatar = avatarService.getAvatar(member)\r\n\r\n            ctx.imgurl = avatar.url\r\n            ctx.bg = avatar.bg\r\n\r\n            if member\r\n                ctx.name = member.full_name_display\r\n\r\n            $el.html(template(ctx))\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgListitemAssignedto\", [\"$tgTemplate\", \"$translate\", \"tgAvatarService\", ListItemAssignedtoDirective])\r\n\r\n\r\nListItemIssueStatusDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        issue = $scope.$eval($attrs.tgListitemIssueStatus)\r\n        bindOnce $scope, \"issueStatusById\", (issueStatusById) ->\r\n            $el.html(issueStatusById[issue.status].name)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgListitemIssueStatus\", ListItemIssueStatusDirective)\r\n\r\n\r\nListItemTypeDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (issueTypeById, issue) ->\r\n            type = issueTypeById[issue.type]\r\n            domNode = $el.find(\".level\")\r\n            domNode.css(\"background-color\", type.color)\r\n            domNode.attr(\"title\", type.name)\r\n\r\n        bindOnce $scope, \"issueTypeById\", (issueTypeById) ->\r\n            issue = $scope.$eval($attrs.tgListitemType)\r\n            render(issueTypeById, issue)\r\n\r\n        $scope.$watch $attrs.tgListitemType, (issue) ->\r\n            render($scope.issueTypeById, issue)\r\n\r\n    return {\r\n        link: link\r\n        templateUrl: \"common/components/level.html\"\r\n    }\r\n\r\nmodule.directive(\"tgListitemType\", ListItemTypeDirective)\r\n\r\n\r\nListItemPriorityDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (priorityById, issue) ->\r\n            priority = priorityById[issue.priority]\r\n            domNode = $el.find(\".level\")\r\n            domNode.css(\"background-color\", priority.color)\r\n            domNode.attr(\"title\", priority.name)\r\n\r\n        bindOnce $scope, \"priorityById\", (priorityById) ->\r\n            issue = $scope.$eval($attrs.tgListitemPriority)\r\n            render(priorityById, issue)\r\n\r\n        $scope.$watch $attrs.tgListitemPriority, (issue) ->\r\n            render($scope.priorityById, issue)\r\n\r\n    return {\r\n        link: link\r\n        templateUrl: \"common/components/level.html\"\r\n    }\r\n\r\nmodule.directive(\"tgListitemPriority\", ListItemPriorityDirective)\r\n\r\n\r\nListItemSeverityDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (severityById, issue) ->\r\n            severity = severityById[issue.severity]\r\n            domNode = $el.find(\".level\")\r\n            domNode.css(\"background-color\", severity.color)\r\n            domNode.attr(\"title\", severity.name)\r\n\r\n        bindOnce $scope, \"severityById\", (severityById) ->\r\n            issue = $scope.$eval($attrs.tgListitemSeverity)\r\n            render(severityById, issue)\r\n\r\n        $scope.$watch $attrs.tgListitemSeverity, (issue) ->\r\n            render($scope.severityById, issue)\r\n\r\n    return {\r\n        link: link\r\n        templateUrl: \"common/components/level.html\"\r\n    }\r\n\r\nmodule.directive(\"tgListitemSeverity\", ListItemSeverityDirective)\r\n\r\n\r\n#############################################################################\r\n## Progress bar directive\r\n#############################################################################\r\n\r\nTgProgressBarDirective = ($template) ->\r\n    template = $template.get(\"common/components/progress-bar.html\", true)\r\n\r\n    render = (el, percentage) ->\r\n        el.html(template({percentage: percentage}))\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        element = angular.element($el)\r\n\r\n        $scope.$watch $attrs.tgProgressBar, (percentage) ->\r\n            percentage = _.max([0 , percentage])\r\n            percentage = _.min([100, percentage])\r\n            render($el, percentage)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgProgressBar\", [\"$tgTemplate\", TgProgressBarDirective])\r\n\r\n\r\n#############################################################################\r\n## Main title directive\r\n#############################################################################\r\n\r\nTgMainTitleDirective = ($translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $attrs.$observe \"i18nSectionName\", (i18nSectionName) ->\r\n            $scope.sectionName = i18nSectionName\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        templateUrl: \"common/components/main-title.html\"\r\n        scope: {\r\n            projectName : \"=projectName\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgMainTitle\", [\"$translate\",  TgMainTitleDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/confirm.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntimeout = @.taiga.timeout\r\ncancelTimeout = @.taiga.cancelTimeout\r\ndebounce = @.taiga.debounce\r\nbindMethods = @.taiga.bindMethods\r\n\r\nNOTIFICATION_MSG = {\r\n    \"success\":\r\n        title: \"NOTIFICATION.OK\"\r\n        message: \"NOTIFICATION.SAVED\"\r\n    \"error\":\r\n        title: \"NOTIFICATION.WARNING\"\r\n        message: \"NOTIFICATION.WARNING_TEXT\"\r\n    \"light-error\":\r\n        title: \"NOTIFICATION.WARNING\"\r\n        message: \"NOTIFICATION.WARNING_TEXT\"\r\n}\r\n\r\n\r\nclass ConfirmService extends taiga.Service\r\n    @.$inject = [\"$q\", \"lightboxService\", \"$tgLoading\", \"$translate\", \"$filter\"]\r\n\r\n    constructor: (@q, @lightboxService, @loading, @translate, @filter) ->\r\n        bindMethods(@)\r\n\r\n    hide: (el)->\r\n        if el\r\n            @lightboxService.close(el)\r\n\r\n            el.off(\".confirm-dialog\")\r\n\r\n    ask: (title, subtitle, message, lightboxSelector=\".lightbox-generic-ask\") ->\r\n        defered = @q.defer()\r\n\r\n        el = angular.element(lightboxSelector)\r\n\r\n        # Render content\r\n        el.find(\".title\").text(title || '')\r\n        el.find(\".subtitle\").text(subtitle || '')\r\n        if message\r\n            message = @filter('textToHTML')(message)\r\n        el.find(\".message\").html(message || '')\r\n\r\n        # Assign event handlers\r\n        el.on \"click.confirm-dialog\", \".button-green\", debounce 2000, (event) =>\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            currentLoading = @loading()\r\n                .target(target)\r\n                .start()\r\n            defered.resolve {\r\n                finish: (ok=true) =>\r\n                    currentLoading.finish()\r\n                    if ok\r\n                        @.hide(el)\r\n            }\r\n\r\n        el.on \"click.confirm-dialog\", \".button-red\", (event) =>\r\n            event.preventDefault()\r\n            defered.reject()\r\n            @.hide(el)\r\n\r\n        onEsc = () =>\r\n            @.hide(el)\r\n\r\n        @lightboxService.open(el, null, onEsc)\r\n\r\n        return defered.promise\r\n\r\n    askOnDelete: (title, message, subtitle) ->\r\n        if not subtitle?\r\n            subtitle = @translate.instant(\"NOTIFICATION.ASK_DELETE\")\r\n        return @.ask(title, subtitle, message)\r\n\r\n    askChoice: (title, subtitle, choices, replacement, warning, lightboxSelector=\".lightbox-ask-choice\") ->\r\n        defered = @q.defer()\r\n\r\n        el = angular.element(lightboxSelector)\r\n\r\n        # Render content\r\n        el.find(\".title\").text(title)\r\n        el.find(\".subtitle\").text(subtitle)\r\n\r\n        if replacement\r\n            el.find(\".replacement\").text(replacement)\r\n        else\r\n            el.find(\".replacement\").remove()\r\n\r\n        if warning\r\n            el.find(\".warning\").text(warning)\r\n        else\r\n            el.find(\".warning\").remove()\r\n\r\n        choicesField = el.find(\".choices\")\r\n        choicesField.html('')\r\n        _.each choices, (value, key) ->\r\n            value = _.escape(value)\r\n            choicesField.append(angular.element(\"<option value='#{key}'>#{value}</option>\"))\r\n\r\n        # Assign event handlers\r\n        el.on \"click.confirm-dialog\", \"a.button-green\", debounce 2000, (event) =>\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            currentLoading = @loading()\r\n                .target(target)\r\n                .start()\r\n            defered.resolve {\r\n                selected: choicesField.val()\r\n                finish: (ok=true) =>\r\n                    currentLoading.finish()\r\n                    if ok\r\n                        @.hide(el)\r\n            }\r\n\r\n        el.on \"click.confirm-dialog\", \".button-red\", (event) =>\r\n            event.preventDefault()\r\n            defered.reject()\r\n            @.hide(el)\r\n\r\n        @lightboxService.open(el)\r\n\r\n        return defered.promise\r\n\r\n    error: (message) ->\r\n        defered = @q.defer()\r\n\r\n        el = angular.element(\".lightbox-generic-error\")\r\n\r\n        # Render content\r\n        el.find(\".title\").html(message)\r\n\r\n        # Assign event handlers\r\n        el.on \"click.confirm-dialog\", \".button-green\", (event) =>\r\n            event.preventDefault()\r\n            defered.resolve()\r\n            @.hide(el)\r\n\r\n        el.on \"click.confirm-dialog\", \".close\", (event) =>\r\n            event.preventDefault()\r\n            defered.resolve()\r\n            @.hide(el)\r\n\r\n        @lightboxService.open(el)\r\n\r\n        return defered.promise\r\n\r\n    success: (title, message, icon, action) ->\r\n        defered = @q.defer()\r\n\r\n        el = angular.element(\".lightbox-generic-success\")\r\n\r\n        el.find(\"img\").remove()\r\n        el.find(\"svg\").remove()\r\n\r\n        if icon\r\n            if icon.type == \"img\"\r\n                detailImage = $('<img>').addClass('lb-icon').attr('src', icon.name)\r\n            else if icon.type == \"svg\"\r\n                detailImage = document.createElement(\"div\")\r\n                taiga.addClass(detailImage, \"icon\")\r\n                taiga.addClass(detailImage, icon.name)\r\n                taiga.addClass(detailImage, \"lb-icon\")\r\n\r\n                svgContainer = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\r\n\r\n                useSVG = document.createElementNS('http://www.w3.org/2000/svg', 'use')\r\n                useSVG.setAttributeNS('http://www.w3.org/1999/xlink','href', '#' + icon.name)\r\n\r\n                detailImage.appendChild(svgContainer).appendChild(useSVG)\r\n\r\n            if detailImage\r\n                el.find('section').prepend(detailImage)\r\n\r\n        # Render content\r\n        el.find(\".title\").html(title) if title\r\n        el.find(\".message\").html(message) if message\r\n        if action\r\n            el.find(\".button-green\").html(action)\r\n            el.find(\".button-green\").attr('title', action)\r\n\r\n        # Assign event handlers\r\n        el.on \"click.confirm-dialog\", \".button-green\", (event) =>\r\n            event.preventDefault()\r\n            defered.resolve()\r\n            @.hide(el)\r\n\r\n        el.on \"click.confirm-dialog\", \".close\", (event) =>\r\n            event.preventDefault()\r\n            defered.resolve()\r\n            @.hide(el)\r\n\r\n        @lightboxService.open(el)\r\n\r\n        return defered.promise\r\n\r\n    loader: (title, message, spin=false) ->\r\n        el = angular.element(\".lightbox-generic-loading\")\r\n\r\n        # Render content\r\n        el.find(\".title\").html(title) if title\r\n        el.find(\".message\").html(message) if message\r\n\r\n        if spin\r\n            el.find(\".spin\").removeClass(\"hidden\")\r\n\r\n        return {\r\n            start: => @lightboxService.open(el)\r\n            stop: => @lightboxService.close(el)\r\n            update: (status, title, message, percent) =>\r\n                el.find(\".title\").html(title) if title\r\n                el.find(\".message\").html(message) if message\r\n\r\n                if percent\r\n                    el.find(\".spin\").addClass(\"hidden\")\r\n                    el.find(\".progress-bar-wrapper\").removeClass(\"hidden\")\r\n                    el.find(\".progress-bar-wrapper > .bar\").width(percent + '%')\r\n                    el.find(\".progress-bar-wrapper > span\").html(percent + '%').css('left', (percent - 9) + '%' )\r\n                else\r\n                    el.find(\".spin\").removeClass(\"hidden\")\r\n                    el.find(\".progress-bar-wrapper\").addClass(\"hidden\")\r\n        }\r\n\r\n    notify: (type, message, title, time) ->\r\n        # NOTE: Typesi are: error, success, light-error\r\n        #       See partials/components/notification-message.jade)\r\n        #       Add default texts to NOTIFICATION_MSG for new notification types\r\n\r\n        selector = \".notification-message-#{type}\"\r\n        el = angular.element(selector)\r\n\r\n        return if el.hasClass(\"active\")\r\n\r\n        if title\r\n            el.find(\"h4\").html(title)\r\n        else\r\n            el.find(\"h4\").html(@translate.instant(NOTIFICATION_MSG[type].title))\r\n\r\n        if message\r\n            el.find(\"p\").html(message)\r\n        else\r\n            el.find(\"p\").html(@translate.instant(NOTIFICATION_MSG[type].message))\r\n\r\n        body = angular.element(\"body\")\r\n        body.find(\".notification-message .notification-light\")\r\n            .removeClass('active')\r\n            .addClass('inactive')\r\n\r\n        body.find(selector)\r\n            .removeClass('inactive')\r\n            .addClass('active')\r\n\r\n        if @.tsem\r\n            cancelTimeout(@.tsem)\r\n\r\n        if !time\r\n            time = if type == 'error' or type == 'light-error' then 3500 else 1500\r\n\r\n        @.tsem = timeout time, =>\r\n            body.find(selector)\r\n                .removeClass('active')\r\n                .addClass('inactive')\r\n                .one 'animationend', () -> $(this).removeClass('inactive')\r\n\r\n            delete @.tsem\r\n\r\n        el.on \"click\", \".icon-close, .close\", (event) =>\r\n            body.find(selector)\r\n                .removeClass('active')\r\n                .addClass('inactive')\r\n\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\nmodule.service(\"$tgConfirm\", ConfirmService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/custom-field-values.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindMethods = @.taiga.bindMethods\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\ngenerateHash = taiga.generateHash\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n# Custom attributes types (see taiga-back/taiga/projects/custom_attributes/choices.py)\r\nTEXT_TYPE = \"text\"\r\nRICHTEXT_TYPE = \"url\"\r\nMULTILINE_TYPE = \"multiline\"\r\nDATE_TYPE = \"date\"\r\nURL_TYPE = \"url\"\r\nDROPDOWN_TYPE = \"dropdown\"\r\nCHECKBOX_TYPE = \"checkbox\"\r\nNUMBER_TYPE = \"number\"\r\n\r\n\r\nTYPE_CHOICES = [\r\n    {\r\n        key: TEXT_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_TEXT\"\r\n    },\r\n    {\r\n        key: MULTILINE_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_MULTI\"\r\n    },\r\n    {\r\n        key: DATE_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DATE\"\r\n    },\r\n    {\r\n        key: URL_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_URL\"\r\n    },\r\n    {\r\n        key: RICHTEXT_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_RICHTEXT\"\r\n    },\r\n    {\r\n        key: DROPDOWN_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DROPDOWN\"\r\n    },\r\n    {\r\n        key: CHECKBOX_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_CHECKBOX\"\r\n    },\r\n    {\r\n        key: NUMBER_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_NUMBER\"\r\n    }\r\n]\r\n\r\n\r\n\r\nclass CustomAttributesValuesController extends taiga.Controller\r\n    @.$inject = [\"$scope\", \"$rootScope\", \"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$q\"]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @rs, @confirm, @q) ->\r\n        bindMethods(@)\r\n        @.type = null\r\n        @.objectId = null\r\n        @.projectId = null\r\n        @.customAttributes = []\r\n        @.customAttributesValues = null\r\n\r\n    initialize: (type, objectId) ->\r\n        @.project = @scope.project\r\n        @.type = type\r\n        @.objectId = objectId\r\n        @.projectId = @scope.projectId\r\n\r\n    loadCustomAttributesValues: ->\r\n        return @.customAttributesValues if not @.objectId\r\n        return @rs.customAttributesValues[@.type].get(@.objectId).then (customAttributesValues) =>\r\n            @.customAttributes = @.project[\"#{@.type}_custom_attributes\"]\r\n            @.customAttributesValues = customAttributesValues\r\n            return customAttributesValues\r\n\r\n    getAttributeValue: (attribute) ->\r\n        attributeValue = _.clone(attribute, false)\r\n        attributeValue.value = @.customAttributesValues.attributes_values[attribute.id]\r\n        return attributeValue\r\n\r\n    updateAttributeValue: (attributeValue) ->\r\n        onSuccess = =>\r\n            @rootscope.$broadcast(\"custom-attributes-values:edit\")\r\n\r\n        onError = (response) =>\r\n            @confirm.notify(\"error\")\r\n            return @q.reject()\r\n\r\n        # We need to update the full array so angular understand the model is modified\r\n        attributesValues = _.clone(@.customAttributesValues.attributes_values, true)\r\n        attributesValues[attributeValue.id] = attributeValue.value\r\n        @.customAttributesValues.attributes_values = attributesValues\r\n        @.customAttributesValues.id = @.objectId\r\n        return @repo.save(@.customAttributesValues).then(onSuccess, onError)\r\n\r\n\r\nCustomAttributesValuesDirective = ($templates, $storage) ->\r\n    template = $templates.get(\"custom-attributes/custom-attributes-values.html\", true)\r\n\r\n    collapsedHash = (type) ->\r\n        return generateHash([\"custom-attributes-collapsed\", type])\r\n\r\n    link = ($scope, $el, $attrs, $ctrls) ->\r\n        $ctrl = $ctrls[0]\r\n        $model = $ctrls[1]\r\n        hash = collapsedHash($attrs.type)\r\n        $scope.collapsed = $storage.get(hash) or false\r\n\r\n        bindOnce $scope, $attrs.ngModel, (value) ->\r\n            $ctrl.initialize($attrs.type, value.id)\r\n            $ctrl.loadCustomAttributesValues()\r\n\r\n        $scope.toggleCollapse = () ->\r\n            $scope.collapsed = !$scope.collapsed\r\n            $storage.set(hash, $scope.collapsed)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    templateFn = ($el, $attrs) ->\r\n        return template({\r\n            requiredEditionPerm: $attrs.requiredEditionPerm\r\n        })\r\n\r\n    return {\r\n        require: [\"tgCustomAttributesValues\", \"ngModel\"]\r\n        controller: CustomAttributesValuesController\r\n        controllerAs: \"ctrl\"\r\n        restrict: \"AE\"\r\n        scope: true\r\n        link: link\r\n        template: templateFn\r\n    }\r\n\r\nmodule.directive(\"tgCustomAttributesValues\", [\"$tgTemplate\", \"$tgStorage\", \"$translate\",\r\n                                              CustomAttributesValuesDirective])\r\n\r\n\r\nCustomAttributeValueDirective = ($template, $selectedText, $compile, $translate, datePickerConfigService, wysiwygService) ->\r\n    template = $template.get(\"custom-attributes/custom-attribute-value.html\", true)\r\n    templateEdit = $template.get(\"custom-attributes/custom-attribute-value-edit.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $ctrl) ->\r\n        prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n\r\n        render = (attributeValue, edit=false) ->\r\n            if attributeValue.type is DATE_TYPE and attributeValue.value\r\n                value = moment(attributeValue.value, \"YYYY-MM-DD\").format(prettyDate)\r\n            if attributeValue.type is NUMBER_TYPE and attributeValue.value\r\n                value = parseFloat(attributeValue.value)\r\n            else\r\n                value = attributeValue.value\r\n\r\n            editable = isEditable()\r\n\r\n            ctx = {\r\n                id: attributeValue.id\r\n                name: attributeValue.name\r\n                description: attributeValue.description\r\n                value: value\r\n                type: attributeValue.type\r\n                isEditable: editable\r\n            }\r\n\r\n            scope = $scope.$new()\r\n            scope.attributeHtml = wysiwygService.getHTML(value)\r\n            scope.extra = attributeValue.extra\r\n            scope.model = value\r\n\r\n            if editable and (edit or not value)\r\n                html = templateEdit(ctx)\r\n\r\n                html = $compile(html)(scope)\r\n                $el.html(html)\r\n\r\n                if attributeValue.type == DATE_TYPE\r\n                    datePickerConfig = datePickerConfigService.get()\r\n                    _.merge(datePickerConfig, {\r\n                        field: $el.find(\"input[name=value]\")[0]\r\n                        onSelect: (date) =>\r\n                            selectedDate = date\r\n                        onOpen: =>\r\n                            $el.picker.setDate(selectedDate) if selectedDate?\r\n                    })\r\n                    $el.picker = new Pikaday(datePickerConfig)\r\n            else\r\n                html = template(ctx)\r\n                html = $compile(html)(scope)\r\n                $el.html(html)\r\n\r\n        isEditable = ->\r\n            permissions = $scope.project.my_permissions\r\n            requiredEditionPerm = $attrs.requiredEditionPerm\r\n            return permissions.indexOf(requiredEditionPerm) > -1\r\n\r\n        $scope.saveCustomRichText = (markdown, callback) =>\r\n            attributeValue.value = markdown\r\n            $ctrl.updateAttributeValue(attributeValue).then ->\r\n                callback()\r\n                render(attributeValue, false)\r\n\r\n        $scope.cancelCustomRichText= () =>\r\n            render(attributeValue, false)\r\n\r\n            return null\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            return if not form.validate()\r\n\r\n            if attributeValue.type is DROPDOWN_TYPE\r\n                formControl = $el.find(\"select[name='value']\")\r\n                attributeValue.value = formControl.val()\r\n            else if attributeValue.type is CHECKBOX_TYPE\r\n                formControl = $el.find(\"input[name=value]\")\r\n                attributeValue.value = formControl[0].checked\r\n            else\r\n                formControl = $el.find(\"input[name=value], textarea[name='value']\")\r\n                attributeValue.value = formControl.val()\r\n                if attributeValue.type is DATE_TYPE and moment(attributeValue.value, prettyDate).isValid()\r\n                    attributeValue.value = moment(attributeValue.value, prettyDate).format(\"YYYY-MM-DD\")\r\n                if attributeValue.type is NUMBER_TYPE\r\n                    attributeValue.value = parseFloat(attributeValue.value)\r\n\r\n            $scope.$apply ->\r\n                $ctrl.updateAttributeValue(attributeValue).then ->\r\n                    render(attributeValue, false)\r\n\r\n        setFocusAndSelectOnInputField = ->\r\n            $el.find(\"input[name='value'], textarea[name='value']\").focus().select()\r\n\r\n        # Bootstrap\r\n        attributeValue = $scope.$eval($attrs.tgCustomAttributeValue)\r\n        if attributeValue.value == null or attributeValue.value == undefined\r\n            attributeValue.value = \"\"\r\n        $scope.customAttributeValue = attributeValue\r\n        render(attributeValue)\r\n\r\n        ## Actions (on view mode)\r\n\r\n        $el.on \"click\", \".js-value-view-mode span a\", (event) ->\r\n            event.stopPropagation()\r\n\r\n        $el.on \"click\", \".js-value-view-mode\", ->\r\n            return if not isEditable()\r\n            return if $selectedText.get().length\r\n            render(attributeValue, true)\r\n            setFocusAndSelectOnInputField()\r\n\r\n        $el.on \"click\", \".js-edit-description\", (event) ->\r\n            event.preventDefault()\r\n            render(attributeValue, true)\r\n            setFocusAndSelectOnInputField()\r\n\r\n        ## Actions (on edit mode)\r\n        $el.on \"keyup\", \"input[name=value], textarea[name='value']\", (event) ->\r\n            if event.keyCode is 13 and event.currentTarget.type isnt \"textarea\"\r\n                submit(event)\r\n            else if event.keyCode == 27\r\n                render(attributeValue, false)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $el.on \"click\", \".js-save-description\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        require: \"^tgCustomAttributesValues\"\r\n        restrict: \"AE\"\r\n    }\r\n\r\nmodule.directive(\"tgCustomAttributeValue\", [\"$tgTemplate\", \"$selectedText\", \"$compile\", \"$translate\",\r\n                                            \"tgDatePickerConfigService\", \"tgWysiwygService\", CustomAttributeValueDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/emojis.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n\r\nclass EmojisService extends taiga.Service\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.emojis = _.map taiga.emojis, (it) ->\r\n            it.image = \"/#{window._version}/emojis/\" + it.image\r\n\r\n            return it\r\n        @.emojisById = _.keyBy(@.emojis, 'id')\r\n        @.emojisByName = _.keyBy(@.emojis, 'name')\r\n\r\n\r\n    searchByName: (name) =>\r\n        return _.filter @.emojis, (it) -> it.name.indexOf(name) != -1\r\n\r\n    getEmojiById: (id) =>\r\n        return @.emojisById[id]\r\n\r\n    getEmojiByName: (name) =>\r\n        return @.emojisByName[name]\r\n\r\n    replaceImgsByEmojiName: (html) =>\r\n        emojiIds = taiga.getMatches(html, /emojis\\/([^\"]+).png\"/gi)\r\n\r\n        for emojiId in emojiIds\r\n            regexImgs = new RegExp('<img(.*)' + emojiId + '[^>]+\\>', 'g')\r\n            emoji = @.getEmojiById(emojiId)\r\n            html = html.replace(regexImgs, ':' + emoji.name + ':')\r\n\r\n        return html\r\n\r\n    replaceEmojiNameByImgs: (text) =>\r\n        emojiIds = taiga.getMatches(text, /:([\\w +-]*):/g)\r\n\r\n        for emojiId in emojiIds\r\n            regexImgs = new RegExp(':' + emojiId + ':', 'g')\r\n            emoji = @.getEmojiByName(emojiId)\r\n\r\n            if emoji\r\n                text = text.replace(regexImgs, '![alt](' + emoji.image + ')')\r\n\r\n        return text\r\n\r\n    replaceEmojiNameByHtmlImgs: (text) =>\r\n        emojiIds = taiga.getMatches(text, /:([\\w +-]*):/g)\r\n\r\n        for emojiId in emojiIds\r\n            regexImgs = new RegExp(':' + _.escapeRegExp(emojiId) + ':', 'g')\r\n            emoji = @.getEmojiByName(emojiId)\r\n\r\n            if emoji\r\n                text = text.replace(regexImgs, '<img src=\"' + emoji.image + '\" />')\r\n\r\n        return text\r\n\r\nmodule.service(\"$tgEmojis\", EmojisService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/estimation.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ngroupBy = @.taiga.groupBy\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n#############################################################################\r\n## User story estimation directive (for Lightboxes)\r\n#############################################################################\r\n\r\nLbUsEstimationDirective = ($tgEstimationsService, $rootScope, $repo, $template, $compile) ->\r\n    # Display the points of a US and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-lb-us-estimation-progress-bar(ng-model=\"us\")\r\n    #\r\n    # Requirements:\r\n    #   - Us object (ng-model)\r\n    #   - scope.project object\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        $scope.$watch $attrs.ngModel, (us) ->\r\n            if us\r\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\r\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\r\n                    us.points = points\r\n                    estimationProcess.render()\r\n\r\n                    $scope.$apply ->\r\n                        $model.$setViewValue(us)\r\n\r\n                estimationProcess.render = () ->\r\n                    ctx = {\r\n                        totalPoints: @calculateTotalPoints()\r\n                        roles: @calculateRoles()\r\n                        editable: @isEditable\r\n                        loading: false\r\n                    }\r\n                    mainTemplate = \"common/estimation/us-estimation-points-per-role.html\"\r\n                    template = $template.get(mainTemplate, true)\r\n                    html = template(ctx)\r\n                    html = $compile(html)($scope)\r\n                    @$el.html(html)\r\n\r\n                estimationProcess.render()\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgLbUsEstimation\", [\"$tgEstimationsService\", \"$rootScope\", \"$tgRepo\", \"$tgTemplate\",\r\n                                      \"$compile\", LbUsEstimationDirective])\r\n\r\n\r\n#############################################################################\r\n## User story estimation directive\r\n#############################################################################\r\n\r\nUsEstimationDirective = ($tgEstimationsService, $rootScope, $repo, $template, $compile, $modelTransform, $confirm) ->\r\n    # Display the points of a US and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-us-estimation-progress-bar(ng-model=\"us\")\r\n    #\r\n    # Requirements:\r\n    #   - Us object (ng-model)\r\n    #   - scope.project object\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        save = (points) ->\r\n            transform = $modelTransform.save (us) =>\r\n                us.points = points\r\n\r\n                return us\r\n\r\n            onError = =>\r\n                $confirm.notify(\"error\")\r\n\r\n            return transform.then(null, onError)\r\n\r\n        $scope.$watchCollection () ->\r\n            return $model.$modelValue && $model.$modelValue.points\r\n        , () ->\r\n            us = $model.$modelValue\r\n            if us\r\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\r\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\r\n                    estimationProcess.loading = roleId\r\n                    estimationProcess.render()\r\n                    save(points).then () ->\r\n                        estimationProcess.loading = false\r\n                        $rootScope.$broadcast(\"object:updated\")\r\n                        estimationProcess.render()\r\n\r\n                estimationProcess.render = () ->\r\n                    ctx = {\r\n                        totalPoints: @calculateTotalPoints()\r\n                        roles: @calculateRoles()\r\n                        editable: @isEditable\r\n                        loading: estimationProcess.loading\r\n                    }\r\n                    mainTemplate = \"common/estimation/us-estimation-points-per-role.html\"\r\n                    template = $template.get(mainTemplate, true)\r\n                    html = template(ctx)\r\n                    html = $compile(html)($scope)\r\n                    @$el.html(html)\r\n\r\n                estimationProcess.render()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgUsEstimation\", [\"$tgEstimationsService\", \"$rootScope\", \"$tgRepo\",\r\n                                    \"$tgTemplate\", \"$compile\", \"$tgQueueModelTransformation\",\r\n                                    \"$tgConfirm\", UsEstimationDirective])\r\n\r\n\r\n#############################################################################\r\n## Estimations service\r\n#############################################################################\r\n\r\nEstimationsService = ($template, $repo, $confirm, $q, $qqueue) ->\r\n    pointsTemplate = $template.get(\"common/estimation/us-estimation-points.html\", true)\r\n\r\n    class EstimationProcess\r\n        constructor: (@$el, @us, @project) ->\r\n            @isEditable = @project.my_permissions.indexOf(\"modify_us\") != -1\r\n            @roles = @project.roles\r\n            @points = @project.points\r\n            @loading = false\r\n            @pointsById = groupBy(@points, (x) -> x.id)\r\n            @onSelectedPointForRole =  (roleId, pointId) ->\r\n            @render = () ->\r\n\r\n        save: (roleId, pointId) ->\r\n            deferred = $q.defer()\r\n            $qqueue.add () =>\r\n                onSuccess = =>\r\n                    deferred.resolve()\r\n                    @render()\r\n\r\n                onError = =>\r\n                    $confirm.notify(\"error\")\r\n                    @us.revert()\r\n                    @render()\r\n                    deferred.reject()\r\n\r\n                $repo.save(@us).then(onSuccess, onError)\r\n\r\n            return deferred.promise\r\n\r\n        calculateTotalPoints: () ->\r\n            values = _.map(@us.points, (v, k) => @pointsById[v]?.value)\r\n\r\n            if values.length == 0\r\n                return \"?\"\r\n\r\n            notNullValues = _.filter(values, (v) -> v?)\r\n            if notNullValues.length == 0\r\n                return \"?\"\r\n\r\n            return _.reduce(notNullValues, (acc, num) -> acc + num)\r\n\r\n        calculateRoles: () ->\r\n            computableRoles = _.filter(@project.roles, \"computable\")\r\n            roles = _.map computableRoles, (role) =>\r\n                pointId = @us.points[role.id]\r\n                pointObj = @pointsById[pointId]\r\n                role = _.clone(role, true)\r\n                role.points = if pointObj? and pointObj.name? then pointObj.name else \"?\"\r\n                return role\r\n\r\n            return roles\r\n\r\n        bindClickEvents: =>\r\n            @$el.on \"click\", \".total.clickable\", (event) =>\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                target = angular.element(event.currentTarget)\r\n                roleId = target.data(\"role-id\")\r\n                @renderPointsSelector(roleId, target)\r\n                target.siblings().removeClass('active')\r\n                target.addClass('active')\r\n\r\n            @$el.on \"click\", \".point\", (event) =>\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                target = angular.element(event.currentTarget)\r\n                roleId = target.data(\"role-id\")\r\n                pointId = target.data(\"point-id\")\r\n                @$el.find(\".popover\").popover().close()\r\n\r\n                points = _.clone(@us.points, true)\r\n                points[roleId] = pointId\r\n\r\n                @onSelectedPointForRole(roleId, pointId, points)\r\n\r\n        renderPointsSelector: (roleId, target) ->\r\n            points = _.map @points, (point) =>\r\n                point = _.clone(point, true)\r\n                point.selected = if @us.points[roleId] == point.id then false else true\r\n                return point\r\n\r\n            maxPointLength = 5\r\n            horizontalList =  _.some points, (point) => point.name.length > maxPointLength\r\n\r\n            html = pointsTemplate({\"points\": points, roleId: roleId, horizontal: horizontalList})\r\n            # Remove any previous state\r\n            @$el.find(\".popover\").popover().close()\r\n            @$el.find(\".pop-points-open\").remove()\r\n            # Render into DOM and show the new created element\r\n            if target?\r\n                @$el.find(target).append(html)\r\n            else\r\n                @$el.append(html)\r\n\r\n            @$el.find(\".pop-points-open\").popover().open ->\r\n                $(this)\r\n                    .removeClass(\"active\")\r\n                    .closest(\"li\").removeClass(\"active\")\r\n\r\n            @$el.find(\".pop-points-open\").show()\r\n\r\n            pop = @$el.find(\".pop-points-open\")\r\n            if pop.offset().top + pop.height() > document.body.clientHeight\r\n                pop.addClass('pop-bottom')\r\n\r\n    create = ($el, us, project) ->\r\n        $el.unbind(\"click\")\r\n\r\n        estimationProcess = new EstimationProcess($el, us, project)\r\n\r\n        if estimationProcess.isEditable\r\n            estimationProcess.bindClickEvents()\r\n\r\n        return estimationProcess\r\n\r\n    return {\r\n        create: create\r\n    }\r\n\r\nmodule.factory(\"$tgEstimationsService\", [\"$tgTemplate\", \"$tgRepo\", \"$tgConfirm\",\r\n                                         \"$q\", \"$tgQqueue\", EstimationsService])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/filters.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n\r\ndefaultFilter = ->\r\n    return (value, defaultValue) ->\r\n        if value is [null, undefined]\r\n            return defaultValue\r\n        return value\r\n\r\nmodule.filter(\"default\", defaultFilter)\r\n\r\n\r\nyesNoFilter = ($translate) ->\r\n    return (value) ->\r\n        if value\r\n            return $translate.instant(\"COMMON.YES\")\r\n\r\n        return $translate.instant(\"COMMON.NO\")\r\n\r\nmodule.filter(\"yesNo\", [\"$translate\", yesNoFilter])\r\n\r\n\r\nunslugify = ->\r\n    return taiga.unslugify\r\n\r\nmodule.filter(\"unslugify\", unslugify)\r\n\r\n\r\nmomentFormat = ->\r\n    return (input, format) ->\r\n        if input\r\n            return moment(input).format(format)\r\n        return \"\"\r\n\r\nmodule.filter(\"momentFormat\", momentFormat)\r\n\r\n\r\nmomentFromNow = ->\r\n    return (input, without_suffix) ->\r\n        if input\r\n            return moment(input).fromNow(without_suffix or false)\r\n        return \"\"\r\n\r\nmodule.filter(\"momentFromNow\", momentFromNow)\r\n\r\n\r\nsizeFormat = =>\r\n    return @.taiga.sizeFormat\r\n\r\nmodule.filter(\"sizeFormat\", sizeFormat)\r\n\r\ntoMutableFilter =  ->\r\n    toMutable = (js) ->\r\n      return js.toJS()\r\n\r\n    memoizedMutable = _.memoize(toMutable)\r\n\r\n    return (input) ->\r\n      if input instanceof Immutable.List\r\n        return memoizedMutable(input)\r\n\r\n      return input\r\n\r\nmodule.filter(\"toMutable\", toMutableFilter)\r\n\r\n\r\nbyRefFilter = ($filterFilter)->\r\n    return (userstories, filter) ->\r\n        if filter?.startsWith(\"#\")\r\n            cleanRef= filter.substr(1)\r\n            return _.filter(userstories, (us) => String(us.ref).startsWith(cleanRef))\r\n\r\n        return $filterFilter(userstories, filter)\r\n\r\nmodule.filter(\"byRef\", [\"filterFilter\", byRefFilter])\r\n\r\n\r\ndarkerFilter = ->\r\n    return (color, luminosity) ->\r\n        # validate hex string\r\n        color = new String(color).replace(/[^0-9a-f]/gi, '')\r\n        if color.length < 6\r\n            color = color[0]+ color[0]+ color[1]+ color[1]+ color[2]+ color[2];\r\n\r\n        luminosity = luminosity || 0\r\n\r\n        # convert to decimal and change luminosity\r\n        newColor = \"#\"\r\n        c = 0\r\n        i = 0\r\n        black = 0\r\n        white = 255\r\n        # for (i = 0; i < 3; i++)\r\n        for i in [0, 1, 2]\r\n            c = parseInt(color.substr(i*2,2), 16)\r\n            c = Math.round(Math.min(Math.max(black, c + (luminosity * white)), white)).toString(16)\r\n            newColor += (\"00\"+c).substr(c.length)\r\n\r\n        return newColor\r\n\r\n\r\nmodule.filter(\"darker\", darkerFilter)\r\n\r\nmarkdownToHTML = (wysiwigService) ->\r\n    return (input) ->\r\n        if input\r\n            return wysiwigService.getHTML(input)\r\n\r\n        return \"\"\r\n\r\nmodule.filter(\"markdownToHTML\", [\"tgWysiwygService\", markdownToHTML])\r\n\r\ninArray = ($filter) ->\r\n    return (list, arrayFilter, element) ->\r\n        if arrayFilter\r\n            filter = $filter(\"filter\")\r\n            return filter list, (listItem) ->\r\n                return arrayFilter.indexOf(listItem[element]) != -1\r\nmodule.filter(\"inArray\", [\"$filter\", inArray])\r\n\r\nemojify = ($emojis) ->\r\n    return (input) ->\r\n        if input\r\n            return $emojis.replaceEmojiNameByHtmlImgs(_.escape(input))\r\n\r\n        return \"\"\r\n\r\nmodule.filter(\"emojify\", [\"$tgEmojis\", emojify])\r\n\r\ntextToHTML = ($filter) ->\r\n    return (input) ->\r\n        if input\r\n            return input.replace(/\\<(?!(\\/?)(strong|br)(\\/?)).*?\\>/g, \"\")\r\n\r\n        return \"\"\r\n\r\nmodule.filter(\"textToHTML\", [\"$filter\", textToHTML])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/lightboxes.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nbindOnce = @.taiga.bindOnce\r\ntimeout = @.taiga.timeout\r\ndebounce = @.taiga.debounce\r\nsizeFormat = @.taiga.sizeFormat\r\ntrim = @.taiga.trim\r\nnormalizeString = @.taiga.normalizeString\r\n\r\n#############################################################################\r\n## Common Lightbox Services\r\n#############################################################################\r\n\r\n# the lightboxContent hide/show doesn't have sense because is an IE hack\r\nclass LightboxService extends taiga.Service\r\n    constructor: (@animationFrame, @q, @rootScope) ->\r\n\r\n    open: ($el, onClose, onEsc, ignoreEsc) ->\r\n        @.onClose = onClose\r\n\r\n        if _.isString($el)\r\n            $el = $($el)\r\n        defered = @q.defer()\r\n\r\n        lightboxContent = $el.children().not(\".close\")\r\n        lightboxContent.hide()\r\n\r\n        @animationFrame.add ->\r\n            $el.css('display', 'flex')\r\n\r\n        @animationFrame.add ->\r\n            $el.addClass(\"open\")\r\n            $el.one \"transitionend\", =>\r\n                firstField = $el.find('input:not(.no-focus),textarea:not(.no-focus)').first()\r\n\r\n                if firstField.length\r\n                    firstField.focus()\r\n                else if document.activeElement\r\n                    $(document.activeElement).blur()\r\n\r\n        @animationFrame.add =>\r\n            lightboxContent.show()\r\n            defered.resolve()\r\n\r\n        if !ignoreEsc\r\n            docEl = angular.element(document)\r\n            docEl.on \"keydown.lightbox\", (e) =>\r\n                code = if e.keyCode then e.keyCode else e.which\r\n                if code == 27\r\n                    if onEsc\r\n                        @rootScope.$applyAsync(onEsc)\r\n                    else\r\n                        @.close($el)\r\n\r\n\r\n        return defered.promise\r\n\r\n    close: ($el) ->\r\n        return new Promise (resolve) =>\r\n            if _.isString($el)\r\n                $el = $($el)\r\n            docEl = angular.element(document)\r\n            docEl.off(\".lightbox\")\r\n            docEl.off(\".keyboard-navigation\") # Hack: to fix problems in the WYSIWYG textareas when press ENTER\r\n\r\n            $el.addClass('close-started') # don't attach animations\r\n\r\n            @animationFrame.add =>\r\n                $el.addClass('close')\r\n\r\n                $el.one \"transitionend\", =>\r\n                    $el.removeAttr('style')\r\n                    $el\r\n                        .removeClass(\"open\")\r\n                        .removeClass('close')\r\n                        .removeClass('close-started')\r\n\r\n                    if @.onClose\r\n                        @rootScope.$apply(@.onClose)\r\n\r\n                    resolve()\r\n\r\n            if $el.hasClass(\"remove-on-close\")\r\n                scope = $el.data(\"scope\")\r\n                scope.$destroy() if scope\r\n                $el.remove()\r\n\r\n\r\n    getLightboxOpen: ->\r\n        return $(\".lightbox.open:not(.close-started)\")\r\n\r\n    closeAll: ->\r\n        docEl = angular.element(document)\r\n        for lightboxEl in docEl.find(\".lightbox.open\")\r\n            @.close($(lightboxEl))\r\n\r\n\r\nmodule.service(\"lightboxService\", [\"animationFrame\", \"$q\", \"$rootScope\", LightboxService])\r\n\r\n\r\nclass LightboxKeyboardNavigationService extends taiga.Service\r\n    stop: ->\r\n        docEl = angular.element(document)\r\n        docEl.off(\".keyboard-navigation\")\r\n\r\n    dispatch: ($el, code) ->\r\n        activeElement = $el.find(\".selected\")\r\n\r\n        # Key: enter\r\n        if code == 13\r\n            if $el.find(\".user-list-single\").length == 1\r\n                $el.find('.user-list-single:first').trigger(\"click\")\r\n            else\r\n                activeElement.trigger(\"click\")\r\n\r\n        # Key: down\r\n        else if code == 40\r\n            if not activeElement.length\r\n                $el.find('.user-list-single:not(\".is-active\"):first').addClass('selected')\r\n            else\r\n                next = activeElement.next('.user-list-single')\r\n                if next.length\r\n                    activeElement.removeClass('selected')\r\n                    next.addClass('selected')\r\n        # Key: up\r\n        else if code == 38\r\n            if not activeElement.length\r\n                $el.find('.user-list-single:last').addClass('selected')\r\n            else\r\n                prev = activeElement.prev('.user-list-single:not(\".is-active\")')\r\n\r\n                if prev.length\r\n                    activeElement.removeClass('selected')\r\n                    prev.addClass('selected')\r\n\r\n    init: ($el) ->\r\n        @stop()\r\n        docEl = angular.element(document)\r\n        docEl.on \"keydown.keyboard-navigation\", (event) =>\r\n            code = if event.keyCode then event.keyCode else event.which\r\n            if code == 40 || code == 38 || code == 13\r\n                event.preventDefault()\r\n                @.dispatch($el, code)\r\n\r\nmodule.service(\"lightboxKeyboardNavigationService\", LightboxKeyboardNavigationService)\r\n\r\n\r\n#############################################################################\r\n## Generic Lighthbox Directive\r\n#############################################################################\r\n\r\n# This adds generic behavior to all blocks with lightbox class like\r\n# close button event handlers.\r\n\r\nLightboxDirective = (lightboxService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n\r\n        if !$attrs.$attr.visible\r\n            $el.on \"click\", \".close\", (event) ->\r\n                event.preventDefault()\r\n                lightboxService.close($el)\r\n\r\n    return {restrict: \"C\", link: link}\r\n\r\nmodule.directive(\"lightbox\", [\"lightboxService\", LightboxDirective])\r\n\r\n#############################################################################\r\n## Block Lightbox Directive\r\n#############################################################################\r\n\r\n# Issue/Userstory blocking message lightbox directive.\r\n\r\nBlockLightboxDirective = ($rootscope, $tgrepo, $confirm, lightboxService, $loading, $modelTransform, $translate) ->\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        title = $translate.instant($attrs.title)\r\n        $el.find(\"h2.title\").text(title)\r\n\r\n        unblock = (finishCallback) =>\r\n            transform = $modelTransform.save (item) ->\r\n                item.is_blocked = false\r\n                item.blocked_note = \"\"\r\n\r\n                return item\r\n\r\n            transform.then ->\r\n                $confirm.notify(\"success\")\r\n                $rootscope.$broadcast(\"object:updated\")\r\n                finishCallback()\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n                item.revert()\r\n\r\n            transform.finally ->\r\n                finishCallback()\r\n\r\n            return transform\r\n\r\n        block = () ->\r\n            currentLoading = $loading()\r\n                .target($el.find(\".button-green\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (item) ->\r\n                item.is_blocked = true\r\n                item.blocked_note = $el.find(\".reason\").val()\r\n\r\n                return item\r\n\r\n            transform.then ->\r\n                $confirm.notify(\"success\")\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n            transform.finally ->\r\n                currentLoading.finish()\r\n                lightboxService.close($el)\r\n\r\n        $scope.$on \"block\", ->\r\n            $el.find(\".reason\").val($model.$modelValue.blocked_note)\r\n            lightboxService.open($el)\r\n\r\n        $scope.$on \"unblock\", (event, model, finishCallback) =>\r\n            unblock(finishCallback)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $el.on \"click\", \".button-green\", (event) ->\r\n            event.preventDefault()\r\n\r\n            block()\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-block.html\"\r\n        link: link\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgLbBlock\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"lightboxService\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$translate\", BlockLightboxDirective])\r\n\r\n\r\n#############################################################################\r\n## Generic Lightbox Blocking-Message Input Directive\r\n#############################################################################\r\n\r\nBlockingMessageInputDirective = ($log, $template, $compile) ->\r\n    template = $template.get(\"common/lightbox/lightbox-blocking-message-input.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        if not $attrs.watch\r\n            return $log.error \"No watch attribute on tg-blocking-message-input directive\"\r\n\r\n        $scope.$watch $attrs.watch, (value) ->\r\n            if value is not undefined and value == true\r\n                $el.find(\".blocked-note\").removeClass(\"hidden\")\r\n            else\r\n                $el.find(\".blocked-note\").addClass(\"hidden\")\r\n\r\n    templateFn = ($el, $attrs) ->\r\n        return template({ngmodel: $attrs.ngModel})\r\n\r\n    return {\r\n        template: templateFn\r\n        link: link\r\n        require: \"ngModel\"\r\n        restrict: \"EA\"\r\n    }\r\n\r\nmodule.directive(\"tgBlockingMessageInput\", [\"$log\", \"$tgTemplate\", \"$compile\", BlockingMessageInputDirective])\r\n\r\n\r\n#############################################################################\r\n## Creare Bulk Userstories Lightbox Directive\r\n#############################################################################\r\n\r\nCreateBulkUserstoriesDirective = ($repo, $rs, $rootscope, lightboxService, $loading, $model) ->\r\n    link = ($scope, $el, attrs) ->\r\n        form = null\r\n\r\n        $scope.$on \"usform:bulk\", (ctx, projectId, status) ->\r\n            form.reset() if form\r\n\r\n            $scope.new = {\r\n                projectId: projectId\r\n                statusId: status\r\n                bulk: \"\"\r\n            }\r\n            lightboxService.open($el)\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley({onlyOneErrorElement: true})\r\n            if not form.validate()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $rs.userstories.bulkCreate($scope.new.projectId, $scope.new.statusId, $scope.new.bulk)\r\n            promise.then (result) ->\r\n                result =  _.map(result.data, (x) => $model.make_model('userstories', x))\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"usform:bulk:success\", result)\r\n                lightboxService.close($el)\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgLbCreateBulkUserstories\", [\r\n    \"$tgRepo\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    \"lightboxService\",\r\n    \"$tgLoading\",\r\n    \"$tgModel\",\r\n    CreateBulkUserstoriesDirective\r\n])\r\n\r\n\r\n#############################################################################\r\n## AssignedTo Lightbox Directive\r\n#############################################################################\r\n\r\nAssignedToLightboxDirective = (lightboxService, lightboxKeyboardNavigationService, $template,\r\n$compile, avatarService, $userListService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        selectedUser = null\r\n        selectedItem = null\r\n        usersTemplate = $template.get(\"common/lightbox/lightbox-assigned-to-users.html\", true)\r\n\r\n        render = (selected, text) ->\r\n            users = $userListService.searchUsers(text, selected)\r\n            visibleUsers = _.slice(users, 0, 5)\r\n            visibleUsers = _.map visibleUsers, (user) ->\r\n                user.avatar = avatarService.getAvatar(user)\r\n\r\n            if selected\r\n                selected.avatar = avatarService.getAvatar(selected) if selected\r\n\r\n            ctx = {\r\n                selected: selected\r\n                users: _.slice(users, 0, 5)\r\n                showMore: users.length > 5\r\n            }\r\n\r\n            html = usersTemplate(ctx)\r\n            html = $compile(html)($scope)\r\n\r\n            $el.find(\".assigned-to-list\").html(html)\r\n\r\n        closeLightbox = () ->\r\n            lightboxKeyboardNavigationService.stop()\r\n            lightboxService.close($el)\r\n\r\n        $scope.$on \"assigned-to:add\", (ctx, item) ->\r\n            selectedItem = item\r\n            assignedToId = item.assigned_to\r\n            selectedUser = $scope.usersById[assignedToId]\r\n            render(selectedUser)\r\n            lightboxService.open($el).then ->\r\n                $el.find('input').focus()\r\n                lightboxKeyboardNavigationService.init($el)\r\n\r\n        $scope.$watch \"usersSearch\", (searchingText) ->\r\n            if searchingText?\r\n                render(selectedUser, searchingText)\r\n                $el.find('input').focus()\r\n\r\n        $el.on \"click\", \".user-list-single\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            closeLightbox()\r\n\r\n            $scope.$apply ->\r\n                $scope.$broadcast(\"assigned-to:added\", target.data(\"user-id\"), selectedItem)\r\n                $scope.usersSearch = null\r\n\r\n        $el.on \"click\", \".remove-assigned-to\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n\r\n            closeLightbox()\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n                $scope.$broadcast(\"assigned-to:added\", null, selectedItem)\r\n\r\n        $el.on \"click\", \".close\", (event) ->\r\n            event.preventDefault()\r\n\r\n            closeLightbox()\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-assigned-to.html\"\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgLbAssignedto\", [\"lightboxService\", \"lightboxKeyboardNavigationService\",\r\n\"$tgTemplate\", \"$compile\", \"tgAvatarService\", \"tgUserListService\", AssignedToLightboxDirective])\r\n\r\n\r\n#############################################################################\r\n## Assigned Users Lightbox directive\r\n#############################################################################\r\n\r\nAssignedUsersLightboxDirective = ($repo, lightboxService, lightboxKeyboardNavigationService,\r\n$template, $compile, avatarService, $userListService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        selectedUsers = []\r\n        selectedItem = null\r\n        usersTemplate = $template.get(\"common/lightbox/lightbox-assigned-users-users.html\", true)\r\n\r\n        # Render the specific list of users.\r\n        render = (assignedUsersIds, text) ->\r\n            users = $userListService.searchUsers(text)\r\n\r\n            # Add selected users\r\n            selected = []\r\n            _.map users, (user) ->\r\n                if user.id in assignedUsersIds\r\n                    user.avatar = avatarService.getAvatar(user)\r\n                    selected.push(user)\r\n\r\n            # Filter users in searchs\r\n\r\n            visible = []\r\n            _.map users, (user) ->\r\n                if user.id not in assignedUsersIds\r\n                    user.avatar = avatarService.getAvatar(user)\r\n                    visible.push(user)\r\n\r\n            ctx = {\r\n                selected: selected\r\n                users:  _.slice(visible, 0, 5)\r\n                showMore: users.length > 5\r\n            }\r\n\r\n            html = usersTemplate(ctx)\r\n            html = $compile(html)($scope)\r\n            $el.find(\".assigned-to-list\").html(html)\r\n\r\n        closeLightbox = () ->\r\n            lightboxKeyboardNavigationService.stop()\r\n            lightboxService.close($el)\r\n\r\n        $scope.$on \"assigned-user:add\", (ctx, item) ->\r\n            selectedItem = item\r\n            selectedUsers = item.assigned_users\r\n            render(selectedUsers)\r\n\r\n            lightboxService.open($el).then ->\r\n                $el.find(\"input\").focus()\r\n                lightboxKeyboardNavigationService.init($el)\r\n\r\n        $scope.$watch \"usersSearch\", (searchingText) ->\r\n            if searchingText?\r\n                render(selectedUsers, searchingText)\r\n                $el.find('input').focus()\r\n\r\n        $el.on \"click\", \".user-list-single\", debounce 200, (event) ->\r\n            closeLightbox()\r\n\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n                $scope.$broadcast(\"assigned-user:added\", target.data(\"user-id\"), selectedItem)\r\n\r\n        $el.on \"click\", \".remove-assigned-to\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            event.stopPropagation()\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n                $scope.$broadcast(\"assigned-user:deleted\", target.data(\"user-id\"), selectedItem)\r\n            closeLightbox()\r\n\r\n        $el.on \"click\", \".close\", (event) ->\r\n            event.preventDefault()\r\n\r\n            closeLightbox()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-assigned-users.html\"\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgLbAssignedUsers\", [\"$tgRepo\", \"lightboxService\",\r\n\"lightboxKeyboardNavigationService\", \"$tgTemplate\", \"$compile\", \"tgAvatarService\",\r\n\"tgUserListService\", AssignedUsersLightboxDirective])\r\n\r\n\r\n#############################################################################\r\n## Watchers Lightbox directive\r\n#############################################################################\r\n\r\nWatchersLightboxDirective = ($repo, lightboxService, lightboxKeyboardNavigationService, $template, $compile, avatarService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        selectedItem = null\r\n        usersTemplate = $template.get(\"common/lightbox/lightbox-assigned-to-users.html\", true)\r\n\r\n        # Get prefiltered users by text\r\n        # and without now watched users.\r\n        getFilteredUsers = (text=\"\") ->\r\n            _filterUsers = (text, user) ->\r\n                if selectedItem && _.find(selectedItem.watchers, (x) -> x == user.id)\r\n                    return false\r\n\r\n                username = user.full_name_display.toUpperCase()\r\n                text = text.toUpperCase()\r\n                return _.includes(username, text)\r\n\r\n            users = _.clone($scope.activeUsers, true)\r\n            users = _.filter(users, _.partial(_filterUsers, text))\r\n            return users\r\n\r\n        # Render the specific list of users.\r\n        render = (users) ->\r\n            visibleUsers = _.slice(users, 0, 5)\r\n\r\n            visibleUsers = _.map visibleUsers, (user) ->\r\n                user.avatar = avatarService.getAvatar(user)\r\n\r\n                return user\r\n\r\n            ctx = {\r\n                selected: false\r\n                users: visibleUsers\r\n                showMore: users.length > 5\r\n            }\r\n\r\n            html = usersTemplate(ctx)\r\n            html = $compile(html)($scope)\r\n            $el.find(\".ticket-watchers\").html(html)\r\n\r\n        closeLightbox = () ->\r\n            lightboxKeyboardNavigationService.stop()\r\n            lightboxService.close($el)\r\n\r\n        $scope.$on \"watcher:add\", (ctx, item) ->\r\n            selectedItem = item\r\n\r\n            users = getFilteredUsers()\r\n            render(users)\r\n\r\n            lightboxService.open($el).then ->\r\n                $el.find(\"input\").focus()\r\n                lightboxKeyboardNavigationService.init($el)\r\n\r\n        $scope.$watch \"usersSearch\", (searchingText) ->\r\n            if not searchingText?\r\n                return\r\n\r\n            users = getFilteredUsers(searchingText)\r\n            render(users)\r\n            $el.find(\"input\").focus()\r\n\r\n        $el.on \"click\", \".user-list-single\", debounce 200, (event) ->\r\n            closeLightbox()\r\n\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n                $scope.$broadcast(\"watcher:added\", target.data(\"user-id\"))\r\n\r\n        $el.on \"click\", \".close\", (event) ->\r\n            event.preventDefault()\r\n\r\n            closeLightbox()\r\n\r\n            $scope.$apply ->\r\n                $scope.usersSearch = null\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-users.html\"\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgLbWatchers\", [\"$tgRepo\", \"lightboxService\", \"lightboxKeyboardNavigationService\", \"$tgTemplate\", \"$compile\", \"tgAvatarService\", WatchersLightboxDirective])\r\n\r\n\r\nLightboxLeaveProjectWarningDirective = (lightboxService, $template, $compile) ->\r\n    link = ($scope, $el, attrs) ->\r\n        lightboxService.open($el)\r\n\r\n    return {\r\n        templateUrl: 'common/lightbox/lightbox-leave-project-warning.html',\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgLightboxLeaveProjectWarning\", [\"lightboxService\", LightboxLeaveProjectWarningDirective])\r\n\r\n\r\n#############################################################################\r\n## Set Due Date Lightbox Directive\r\n#############################################################################\r\n\r\nSetDueDateDirective = ($rootscope, lightboxService, $loading, $translate, $confirm, $modelTransform) ->\r\n    link = ($scope, $el, attrs) ->\r\n        prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n        lightboxService.open($el)\r\n\r\n        if ($scope.object.due_date)\r\n            $scope.new_due_date = moment($scope.object.due_date).format(prettyDate)\r\n\r\n        $el.on \"click\", \".suggestion\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            quantity = target.data('quantity')\r\n            unit = target.data('unit')\r\n            value = moment().add(quantity, unit).format(prettyDate)\r\n            $el.find(\".due-date\").val(value)\r\n\r\n        save = ->\r\n            currentLoading = $loading()\r\n                .target($el.find(\".submit-button\"))\r\n                .start()\r\n\r\n            if $scope.notAutoSave\r\n                new_due_date = $('.due-date').val()\r\n                $scope.object.due_date = if (new_due_date) \\\r\n                    then moment(new_due_date, prettyDate).format(\"YYYY-MM-DD\") \\\r\n                    else null\r\n\r\n                $scope.$apply()\r\n                currentLoading.finish()\r\n                lightboxService.close($el)\r\n                return\r\n\r\n            transform = $modelTransform.save (object) ->\r\n                new_due_date = $('.due-date').val()\r\n                object.due_date = if (new_due_date) \\\r\n                    then moment(new_due_date, prettyDate).format(\"YYYY-MM-DD\") \\\r\n                    else null\r\n                return object\r\n\r\n            transform.then ->\r\n                $confirm.notify(\"success\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n            transform.finally ->\r\n                currentLoading.finish()\r\n                lightboxService.close($el)\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n        $el.on \"click\", \".submit-button\", (event) ->\r\n            event.preventDefault()\r\n            save()\r\n\r\n        remove = ->\r\n            title = $translate.instant(\"LIGHTBOX.DELETE_DUE_DATE.TITLE\")\r\n            subtitle = $translate.instant(\"LIGHTBOX.DELETE_DUE_DATE.SUBTITLE\")\r\n            message = moment($scope.object.due_date).format(prettyDate)\r\n\r\n            $confirm.askOnDelete(title, message, subtitle).then (askResponse) ->\r\n                askResponse.finish()\r\n                $('.due-date').val(null)\r\n                $scope.object.due_date_reason = null\r\n                if $scope.notAutoSave\r\n                    $scope.object.due_date = null\r\n                    lightboxService.close($el)\r\n                else\r\n                    save()\r\n\r\n        $el.on \"click\", \".delete-due-date\", (event) ->\r\n            event.preventDefault()\r\n            remove()\r\n\r\n    return {\r\n        templateUrl: 'common/lightbox/lightbox-due-date.html',\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgLbSetDueDate\", [\"$rootScope\", \"lightboxService\", \"$tgLoading\", \"$translate\", \"$tgConfirm\"\r\n                                    \"$tgQueueModelTransformation\", SetDueDateDirective])\r\n\r\n\r\n\r\n#############################################################################\r\n## Create/Edit Lightbox Directive\r\n#############################################################################\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nCreateEditDirective = (\r\n$log, $repo, $model, $rs, $rootScope, lightboxService, $loading, $translate,\r\n$confirm, $q, attachmentsService, $template, $compile) ->\r\n    link = ($scope, $el, attrs) ->\r\n        schema = null\r\n        objType = null\r\n        form = null\r\n\r\n        attachmentsToAdd = Immutable.List()\r\n        attachmentsToDelete = Immutable.List()\r\n\r\n        schemas = {\r\n            us: {\r\n                objName: 'User Story',\r\n                model: 'userstories',\r\n                params: { include_attachments: true, include_tasks: true },\r\n                data: (project) ->\r\n                    return {\r\n                        translationID: 'US'\r\n                        translationIDPlural: 'US'\r\n                        statusList: _.sortBy(project.us_statuses, \"order\")\r\n                    }\r\n                initialData: (data) ->\r\n                    return {\r\n                        project: data.project.id\r\n                        subject: \"\"\r\n                        description: \"\"\r\n                        tags: []\r\n                        points : {}\r\n                        status: if data.statusId then data.statusId else data.project.default_us_status\r\n                        is_archived: false\r\n                    }\r\n            }\r\n            task: {\r\n                objName: 'Task',\r\n                model: 'tasks',\r\n                params: { include_attachments: true },\r\n                data: (project) ->\r\n                    return {\r\n                        translationID: 'TASK'\r\n                        translationIDPlural: 'TASKS'\r\n                        statusList: _.sortBy(project.task_statuses, \"order\")\r\n                    }\r\n                initialData: (data) ->\r\n                    return {\r\n                        project: data.project.id\r\n                        subject: \"\"\r\n                        description: \"\"\r\n                        assigned_to: null\r\n                        tags: []\r\n                        milestone: data.sprintId\r\n                        status: data.project.default_task_status\r\n                        user_story: data.usId\r\n                        is_archived: false\r\n                    }\r\n            },\r\n            issue: {\r\n                objName: 'Issue',\r\n                model: 'issues',\r\n                params: { include_attachments: true },\r\n                data: (project) ->\r\n                    return {\r\n                        translationID: 'ISSUE'\r\n                        translationIDPlural: 'ISSUES'\r\n                        project: project\r\n                        statusList: _.sortBy(project.issue_statuses, \"order\")\r\n                        typeById: groupBy(project.issue_types, (x) -> x.id)\r\n                        typeList: _.sortBy(project.issue_types, \"order\")\r\n                        severityById: groupBy(project.severities, (x) -> x.id)\r\n                        severityList: _.sortBy(project.severities, \"order\")\r\n                        priorityById: groupBy(project.priorities, (x) -> x.id)\r\n                        priorityList: _.sortBy(project.priorities, \"order\")\r\n                        milestonesById: groupBy(project.milestones, (x) -> x.id)\r\n                    }\r\n                initialData: (data) ->\r\n                    return {\r\n                        assigned_to: null\r\n                        milestone: data.sprintId\r\n                        priority: data.project.default_priority\r\n                        project: data.project.id\r\n                        severity: data.project.default_severity\r\n                        status: data.project.default_issue_status\r\n                        subject: \"\"\r\n                        tags: []\r\n                        type: data.project.default_issue_type\r\n                    }\r\n            }\r\n        }\r\n\r\n        $scope.setMode = (value) ->\r\n            $scope.mode = value\r\n\r\n        $scope.$on \"genericform:new\", (ctx, params) ->\r\n            getSchema(params)\r\n            $scope.mode = 'new'\r\n            $scope.getOrCreate = false\r\n            mount(params)\r\n\r\n        $scope.$on \"genericform:new-or-existing\", (ctx, params) ->\r\n            getSchema(params)\r\n            $scope.mode = 'add-existing'\r\n            $scope.getOrCreate = true\r\n            $scope.existingFilterText = ''\r\n\r\n            $rs[schema.model].listInAllProjects({ project: $scope.project.id }, true).then (data) ->\r\n                $scope.existingItems = angular.copy(data)\r\n            mount(params)\r\n\r\n        $scope.$on \"genericform:edit\", (ctx, params) ->\r\n            getSchema(params)\r\n            $scope.mode = 'edit'\r\n            $scope.getOrCreate = false\r\n            mount(params)\r\n\r\n        getSchema = (params) ->\r\n            _.map params, (value, key) ->\r\n                $scope[key] = value\r\n\r\n            if !$scope.objType || !schemas[$scope.objType]\r\n                return $log.error(\"Invalid objType `#{$scope.objType}` for `genericform` event\")\r\n            schema = schemas[$scope.objType]\r\n\r\n        mount = (params) ->\r\n            $scope.objName = schema.objName\r\n            if $scope.mode == 'edit'\r\n                $scope.obj = params.obj\r\n                $scope.attachments = Immutable.fromJS(params.attachments)\r\n            else\r\n                $scope.obj = $model.make_model(schema.model, schema.initialData(params))\r\n                $scope.attachments = Immutable.List()\r\n\r\n            _.map schema.data($scope.project), (value, key) ->\r\n                $scope[key] = value\r\n\r\n            form.reset() if form\r\n            resetAttachments()\r\n            setStatus($scope.obj.status)\r\n            render()\r\n            $scope.lightboxOpen = true\r\n            lightboxService.open($el, null, null, true)\r\n\r\n        resetAttachments = () ->\r\n            attachmentsToAdd = Immutable.List()\r\n            attachmentsToDelete = Immutable.List()\r\n\r\n        $scope.addAttachment = (attachment) ->\r\n            attachmentsToAdd = attachmentsToAdd.push(attachment)\r\n\r\n        $scope.deleteAttachment = (attachment) ->\r\n            attachmentsToAdd = attachmentsToAdd.filter (it) ->\r\n                return it.get('name') != attachment.get('name')\r\n\r\n            if attachment.get(\"id\")\r\n                attachmentsToDelete = attachmentsToDelete.push(attachment)\r\n\r\n        $scope.addTag = (tag, color) ->\r\n            value = trim(tag.toLowerCase())\r\n            tags = $scope.project.tags\r\n            projectTags = $scope.project.tags_colors\r\n\r\n            tags = [] if not tags?\r\n            projectTags = {} if not projectTags?\r\n\r\n            if value not in tags\r\n                tags.push(value)\r\n\r\n            projectTags[tag] = color || null\r\n            $scope.project.tags = tags\r\n\r\n            itemtags = _.clone($scope.obj.tags)\r\n            inserted = _.find itemtags, (it) -> it[0] == value\r\n\r\n            if !inserted\r\n                itemtags.push([value , color])\r\n                $scope.obj.tags = itemtags\r\n\r\n        $scope.deleteTag = (tag) ->\r\n            value = trim(tag[0].toLowerCase())\r\n            tags = $scope.project.tags\r\n            itemtags = _.clone($scope.obj.tags)\r\n\r\n            _.remove itemtags, (tag) -> tag[0] == value\r\n            $scope.obj.tags = itemtags\r\n            _.pull($scope.obj.tags, value)\r\n\r\n        createAttachments = (obj) ->\r\n            promises = _.map attachmentsToAdd.toJS(), (attachment) ->\r\n                attachmentsService.upload(attachment.file, obj.id, $scope.obj.project, $scope.objType)\r\n            return $q.all(promises)\r\n\r\n        deleteAttachments = (obj) ->\r\n            promises = _.map attachmentsToDelete.toJS(), (attachment) ->\r\n                return attachmentsService.delete($scope.objType, attachment.id)\r\n            return $q.all(promises)\r\n\r\n        addExistingToSprint = (item) ->\r\n            currentLoading = $loading().target($el.find(\".add-existing-button\")).start()\r\n\r\n            if item.milestone\r\n                sprintChangeConfirmAndSave(item)\r\n            else\r\n                onSuccess = ->\r\n                    close()\r\n                    $rootScope.$broadcast(\"#{$scope.objType}form:add:success\", item)\r\n                onError = ->\r\n                    close()\r\n                saveItem(item, onSuccess, onError)\r\n\r\n        sprintChangeConfirmAndSave = (item) ->\r\n            oldSprintName = $scope.milestonesById[item.milestone].name\r\n            newSprintName = $scope.milestonesById[$scope.relatedObjectId].name\r\n            title = $translate.instant(\"ISSUES.CONFIRM_CHANGE_FROM_SPRINT.TITLE\")\r\n            message = $translate.instant(\"ISSUES.CONFIRM_CHANGE_FROM_SPRINT.MESSAGE\",\r\n                {issue: item.subject, oldSprintName: oldSprintName, newSprintName: newSprintName})\r\n\r\n            $confirm.ask(title, null, message).then (askResponse) ->\r\n                onSuccess = ->\r\n                    askResponse.finish()\r\n                    lightboxService.closeAll()\r\n                    $scope.lightboxOpen = false\r\n                    $rootScope.$broadcast(\"#{$scope.objType}form:add:success\", item)\r\n\r\n                onError = ->\r\n                    askResponse.finish(false)\r\n                    $confirm.notify(\"error\")\r\n                saveItem(item, onSuccess, onError)\r\n\r\n        saveItem = (item, onSuccess, onError) ->\r\n            item.setAttr($scope.relatedField, $scope.relatedObjectId)\r\n            $repo.save(item, true).then(onSuccess, onError)\r\n\r\n\r\n        isDisabledExisting = (item) ->\r\n            return item && item[$scope.relatedField] == $scope.relatedObjectId\r\n\r\n        $scope.isDisabledExisting = (selectedItem) ->\r\n            isDisabledExisting(selectedItem)\r\n\r\n        $scope.addExistingToSprint = (selectedItem) ->\r\n            addExistingToSprint(selectedItem)\r\n\r\n        submit = debounce 2000, (event) ->\r\n            form = $el.find(\"form\").checksley()\r\n            if not form.validate()\r\n                return\r\n\r\n            currentLoading = $loading().target($el.find(\".submit-button\")).start()\r\n\r\n            if $scope.mode == 'new'\r\n                promise = $repo.create(schema.model, $scope.obj)\r\n                broadcastEvent = \"#{$scope.objType}form:new:success\"\r\n            else\r\n                if ($scope.obj.due_date instanceof moment)\r\n                    prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n                    $scope.obj.due_date = $scope.obj.due_date.format(\"YYYY-MM-DD\")\r\n\r\n                promise = $repo.save($scope.obj, true)\r\n                broadcastEvent = \"#{$scope.objType}form:edit:success\"\r\n\r\n            promise.then (data) ->\r\n                deleteAttachments(data).then () ->\r\n                    createAttachments(data).then () ->\r\n                        currentLoading.finish()\r\n                        close()\r\n                        if data.ref\r\n                            $rs[schema.model].getByRef(data.project, data.ref, schema.params).then (obj) ->\r\n                                $rootScope.$broadcast(broadcastEvent, obj)\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        checkClose = () ->\r\n            if !$scope.obj.isModified()\r\n                close()\r\n                $scope.$apply ->\r\n                    $scope.obj.revert()\r\n            else\r\n                $confirm.ask(\r\n                    $translate.instant(\"LIGHTBOX.CREATE_EDIT.CONFIRM_CLOSE\"))\r\n                    .then (result) ->\r\n                        result.finish()\r\n                        close()\r\n\r\n        close = () ->\r\n            lightboxService.closeAll()\r\n            $scope.lightboxOpen = false\r\n\r\n        docEl = angular.element(document)\r\n        docEl.on \"keydown.lightbox-create-edit\", (event) ->\r\n            if $scope.lightboxOpen\r\n                event.stopPropagation()\r\n                code = if event.keyCode then event.keyCode else event.which\r\n                if code == 27\r\n                    checkClose()\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $el.find('.close').on \"click\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            checkClose()\r\n\r\n        $el.on \"click\", \".status-dropdown\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            setStatus(angular.element(event.currentTarget).data(\"status-id\"))\r\n            $scope.$apply()\r\n            $scope.$broadcast(\"status:changed\", $scope.obj.status)\r\n            $el.find(\".pop-status\").popover().close()\r\n\r\n        $el.on \"click\", \".team-requirement\", (event) ->\r\n            $scope.obj.team_requirement = not $scope.obj.team_requirement\r\n            $scope.$apply()\r\n\r\n        $el.on \"click\", \".client-requirement\", (event) ->\r\n            $scope.obj.client_requirement = not $scope.obj.client_requirement\r\n            $scope.$apply()\r\n\r\n        $el.on \"click\", \".is-blocked\", (event) ->\r\n            $scope.obj.is_blocked = not $scope.obj.is_blocked\r\n            $scope.$apply()\r\n\r\n        $el.on \"click\", \".iocaine\", (event) ->\r\n            $scope.obj.is_iocaine = not $scope.obj.is_iocaine\r\n            $scope.$broadcast(\"isiocaine:changed\", $scope.obj)\r\n\r\n        $scope.isTeamRequirement = () ->\r\n            return $scope.obj?.team_requirement\r\n\r\n        $scope.isClientRequirement = () ->\r\n            return $scope.obj?.client_requirement\r\n\r\n        setStatus = (id) ->\r\n            $scope.obj.status = id\r\n            $scope.selectedStatus = _.find $scope.statusList, (item) -> item.id == id\r\n            $scope.obj.is_closed = $scope.selectedStatus.is_closed\r\n\r\n        render = (sprint) ->\r\n            template = $template.get(\"common/lightbox/lightbox-create-edit/lb-create-edit.html\")\r\n            templateScope = $scope.$new()\r\n            compiledTemplate = $compile(template)(templateScope)\r\n            $el.html(compiledTemplate)\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgLbCreateEdit\", [\r\n    \"$log\",\r\n    \"$tgRepo\",\r\n    \"$tgModel\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    \"lightboxService\",\r\n    \"$tgLoading\",\r\n    \"$translate\",\r\n    \"$tgConfirm\",\r\n    \"$q\",\r\n    \"tgAttachmentsService\",\r\n    \"$tgTemplate\",\r\n    \"$compile\",\r\n    CreateEditDirective\r\n])\r\n\r\n\r\n#############################################################################\r\n## RelateToEpic Lightbox Directive\r\n#############################################################################\r\n\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nRelateToEpicLightboxDirective = ($rootScope, $confirm, lightboxService, $tgCurrentUserService\r\ntgResources, $tgResources, $epicsService, tgAnalytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        us = null\r\n\r\n        $scope.projects = null\r\n        $scope.projectEpics = Immutable.List()\r\n        $scope.loading = false\r\n        $scope.selectedProject = $scope.project.id\r\n\r\n        newEpicForm = $el.find(\".new-epic-form\").checksley()\r\n        existingEpicForm = $el.find(\".existing-epic-form\").checksley()\r\n\r\n        loadProjects = ->\r\n            if $scope.projects == null\r\n                $scope.projects = $tgCurrentUserService.projects.get(\"unblocked\")\r\n\r\n        filterEpics = (selectedProjectId, filterText) ->\r\n            tgResources.epics.listInAllProjects(\r\n                {\r\n                    is_epics_activated: true,\r\n                    project__blocked_code: 'null',\r\n                    project: selectedProjectId,\r\n                    q: filterText\r\n                }, true).then (data) ->\r\n                    excludeIds = []\r\n                    if (us.epics)\r\n                        excludeIds = us.epics.map((epic) -> epic.id)\r\n                    filteredData = data.filter((epic) -> excludeIds.indexOf(epic.get('id')) == -1)\r\n                    $scope.projectEpics = filteredData\r\n\r\n        selectProject = (selectedProjectId) ->\r\n            $scope.selectedEpic = null\r\n            $scope.searchEpic = \"\"\r\n            filterEpics(selectedProjectId, $scope.searchEpic)\r\n\r\n        $el.on \"click\", \".close\", (event) ->\r\n            event.preventDefault()\r\n            lightboxService.close($el)\r\n\r\n        $scope.$on \"relate-to-epic:add\", (ctx, item) ->\r\n            us = item\r\n            $scope.selectedEpic = null\r\n            $scope.searchEpic = \"\"\r\n            loadProjects()\r\n            filterEpics($scope.selectedProject, $scope.searchEpic).then () ->\r\n                lightboxService.open($el).then ->\r\n                    $el.find('input').focus\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $scope.selectProject = (selectedProjectId) ->\r\n            selectProject(selectedProjectId)\r\n\r\n        $scope.onUpdateSearchEpic = debounceLeading 300, () ->\r\n            $scope.selectedEpic = null\r\n            filterEpics($scope.selectedProject, $scope.searchEpic)\r\n\r\n        $scope.saveRelatedEpic = (selectedEpicId, onSavedRelatedEpic) ->\r\n            return if not existingEpicForm.validate()\r\n\r\n            $scope.loading = true\r\n\r\n            onError = (data) ->\r\n                $scope.loading = false\r\n                $confirm.notify(\"error\")\r\n                existingEpicForm.setErrors(data)\r\n\r\n            onSuccess = (data) ->\r\n                tgAnalytics.trackEvent(\r\n                    \"user story related epic\", \"create\", \"create related epic on user story\", 1)\r\n                $scope.loading = false\r\n                $rootScope.$broadcast(\"related-epics:changed\", us)\r\n                lightboxService.close($el)\r\n\r\n            usId = us.id\r\n            tgResources.epics.addRelatedUserstory(selectedEpicId, usId).then(\r\n                onSuccess, onError)\r\n\r\n        $scope.createEpic = (selectedProjectId, epicSubject) ->\r\n            return if not newEpicForm.validate()\r\n\r\n            @.loading = true\r\n\r\n            onError = (data)->\r\n                $scope.loading = false\r\n                $confirm.notify(\"error\")\r\n                newEpicForm.setErrors(errors)\r\n\r\n            onSuccess = () ->\r\n                tgAnalytics.trackEvent(\r\n                    \"user story related epic\", \"create\", \"create related epic on user story\", 1)\r\n                $scope.loading = false\r\n                $rootScope.$broadcast(\"related-epics:changed\", us)\r\n                lightboxService.close($el)\r\n\r\n            onCreateEpic = (epic) ->\r\n                epicId = epic.get('id')\r\n                usId = us.id\r\n                tgResources.epics.addRelatedUserstory(epicId, usId).then(onSuccess, onError)\r\n\r\n            $epicsService.createEpic(\r\n                {subject: epicSubject}, null, selectedProjectId).then(onCreateEpic, onError)\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-relate-to-epic.html\"\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgLbRelatetoepic\", [\r\n    \"$rootScope\", \"$tgConfirm\", \"lightboxService\", \"tgCurrentUserService\", \"tgResources\",\r\n    \"$tgResources\", \"tgEpicsService\", \"$tgAnalytics\", RelateToEpicLightboxDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/loader.coffee\r\n###\r\n\r\n# FIXME: this code not follows any style and any good practices on coffeescript\r\n# and it should be rewritten in coffeescript style classes.\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\ntimeout = @.taiga.timeout\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nLoaderDirective = (tgLoader, $rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        tgLoader.onStart () ->\r\n            $(document.body).addClass(\"loader-active\")\r\n            $el.addClass(\"active\")\r\n\r\n        tgLoader.onEnd () ->\r\n            $(document.body).removeClass(\"loader-active\")\r\n            $el.removeClass(\"active\")\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgLoader\", [\"tgLoader\", \"$rootScope\", LoaderDirective])\r\n\r\nLoader = ($rootscope) ->\r\n    config = {\r\n        minTime: 300\r\n    }\r\n\r\n    open = false\r\n    startLoadTime = 0\r\n    requestCount = 0\r\n    lastResponseDate = 0\r\n\r\n    pageLoaded = (force = false) ->\r\n        if startLoadTime\r\n            timeoutValue = 0\r\n\r\n            if !force\r\n                endTime = new Date().getTime()\r\n                diff = endTime - startLoadTime\r\n\r\n                if diff < config.minTime\r\n                    timeoutValue = config.minTime - diff\r\n\r\n            timeout timeoutValue, ->\r\n                $rootscope.$broadcast(\"loader:end\")\r\n                open = false\r\n                window.prerenderReady = true # Needed by Prerender Server\r\n\r\n        startLoadTime = 0\r\n        requestCount = 0\r\n        lastResponseDate = 0\r\n\r\n    autoClose = () ->\r\n        intervalAuto = setInterval (() ->\r\n            if lastResponseDate && requestCount == 0\r\n                pageLoaded()\r\n\r\n                clearInterval(intervalAuto)\r\n        ), 50\r\n\r\n    start = () ->\r\n        startLoadTime = new Date().getTime()\r\n        $rootscope.$broadcast(\"loader:start\")\r\n        open = true\r\n\r\n    return {\r\n        pageLoaded: pageLoaded\r\n        open: () -> open\r\n        start: (auto=false) ->\r\n            if !open\r\n                start()\r\n                autoClose() if auto\r\n        onStart: (fn) ->\r\n            return $rootscope.$on(\"loader:start\", fn)\r\n\r\n        onEnd: (fn) ->\r\n            return $rootscope.$on(\"loader:end\", fn)\r\n\r\n        logRequest: () ->\r\n            requestCount++\r\n\r\n        logResponse: () ->\r\n            requestCount--\r\n            lastResponseDate = new Date().getTime()\r\n    }\r\n\r\n\r\nLoader.$inject = [\"$rootScope\"]\r\n\r\nmodule.factory(\"tgLoader\", Loader)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/loading.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nTgLoadingService = ($compile) ->\r\n    spinner = \"<img class='loading-spinner' src='/\" + window._version + \"/svg/spinner-circle.svg' alt='loading...' />\"\r\n\r\n    return () ->\r\n        service = {\r\n            settings: {\r\n                target: null,\r\n                scope: null,\r\n                classes: []\r\n                timeout: 0,\r\n                template: null\r\n            },\r\n            target: (target) ->\r\n                service.settings.target = target\r\n\r\n                return service\r\n            scope: (scope) ->\r\n                service.settings.scope = scope\r\n\r\n                return service\r\n            template: (template) ->\r\n                service.settings.template = template\r\n\r\n                return service\r\n            removeClasses: (classess...) ->\r\n                service.settings.classes = classess\r\n\r\n                return service\r\n            timeout: (timeout) ->\r\n                service.settings.timeout = timeout\r\n\r\n                return service\r\n\r\n            start: ->\r\n                target = service.settings.target\r\n\r\n                service.settings.classes.map (className) -> target.removeClass(className)\r\n\r\n                if not target.hasClass('loading') && !service.settings.template\r\n                    service.settings.template = target.html()\r\n\r\n                # The loader is shown after that quantity of milliseconds\r\n                timeoutId = setTimeout (->\r\n                    if not target.hasClass('loading')\r\n                        target.addClass('loading')\r\n\r\n                        target.html(spinner)\r\n                    ), service.settings.timeout\r\n\r\n                service.settings.timeoutId = timeoutId\r\n\r\n                return service\r\n\r\n            finish: ->\r\n                target = service.settings.target\r\n                timeoutId = service.settings.timeoutId\r\n\r\n                if timeoutId\r\n                    clearTimeout(timeoutId)\r\n\r\n                    removeClasses = service.settings.classes\r\n                    removeClasses.map (className) -> service.settings.target.addClass(className)\r\n\r\n                    target.html(service.settings.template)\r\n                    target.removeClass('loading')\r\n\r\n                    if service.settings.scope\r\n                        $compile(target.contents())(service.settings.scope)\r\n\r\n                return service\r\n        }\r\n\r\n        return service\r\n\r\nTgLoadingService.$inject = [\r\n    \"$compile\"\r\n]\r\n\r\nmodule.factory(\"$tgLoading\", TgLoadingService)\r\n\r\nLoadingDirective = ($loading) ->\r\n    link = ($scope, $el, attr) ->\r\n        currentLoading = null\r\n        template = $el.html()\r\n\r\n        $scope.$watch attr.tgLoading, (showLoading) =>\r\n\r\n            if showLoading\r\n                currentLoading = $loading()\r\n                    .target($el)\r\n                    .timeout(100)\r\n                    .template(template)\r\n                    .scope($scope)\r\n                    .start()\r\n             else if currentLoading\r\n                 currentLoading.finish()\r\n\r\n    return {\r\n        priority: 99999,\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgLoading\", [\"$tgLoading\", LoadingDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/popovers.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n#############################################################################\r\n## UserStory status Directive (popover for change status)\r\n#############################################################################\r\n\r\nUsStatusDirective = ($repo, $template) ->\r\n    ###\r\n    Print the status of a US and a popover to change it.\r\n    - tg-us-status: The user story\r\n    - on-update: Method call after US is updated\r\n\r\n    Example:\r\n\r\n      div.status(tg-us-status=\"us\" on-update=\"ctrl.loadSprintState()\")\r\n        a.us-status(href=\"\", title=\"Status Name\")\r\n\r\n    NOTE: This directive need 'usStatusById' and 'project'.\r\n    ###\r\n    template = $template.get(\"common/popover/popover-us-status.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        render = (us) ->\r\n            usStatusDomParent = $el.find(\".us-status\")\r\n            usStatusDom = $el.find(\".us-status .us-status-bind\")\r\n            usStatusById = $scope.usStatusById\r\n\r\n            if usStatusById[us.status]\r\n                usStatusDom.text(usStatusById[us.status].name)\r\n                usStatusDomParent.css(\"color\", usStatusById[us.status].color)\r\n\r\n        $el.on \"click\", \".us-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n\r\n            target = angular.element(event.currentTarget)\r\n\r\n            us = $scope.$eval($attrs.tgUsStatus)\r\n            us.status = target.data(\"status-id\")\r\n            render(us)\r\n\r\n            $el.find(\".pop-status\").popover().close()\r\n\r\n            $scope.$apply () ->\r\n                $repo.save(us).then ->\r\n                    $scope.$eval($attrs.onUpdate)\r\n\r\n\r\n        $scope.$on(\"userstories:loaded\", -> render($scope.$eval($attrs.tgUsStatus)))\r\n        $scope.$on(\"$destroy\", -> $el.off())\r\n\r\n        # Bootstrap\r\n        us = $scope.$eval($attrs.tgUsStatus)\r\n        render(us)\r\n\r\n        bindOnce $scope, \"project\", (project) ->\r\n            html = template({\"statuses\": project.us_statuses})\r\n            $el.append(html)\r\n\r\n            # If the user has not enough permissions the click events are unbinded\r\n            if $scope.project.my_permissions.indexOf(\"modify_us\") == -1\r\n                $el.unbind(\"click\")\r\n                $el.find(\"a\").addClass(\"not-clickable\")\r\n\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgUsStatus\", [\"$tgRepo\", \"$tgTemplate\", UsStatusDirective])\r\n\r\n#############################################################################\r\n## Related Task Status Directive\r\n#############################################################################\r\n\r\nRelatedTaskStatusDirective = ($repo, $template) ->\r\n    ###\r\n    Print the status of a related task and a popover to change it.\r\n    - tg-related-task-status: The related task\r\n    - on-update: Method call after US is updated\r\n\r\n    Example:\r\n\r\n      div.status(tg-related-task-status=\"task\" on-update=\"ctrl.loadSprintState()\")\r\n        a.task-status(href=\"\", title=\"Status Name\")\r\n\r\n    NOTE: This directive need 'taskStatusById' and 'project'.\r\n    ###\r\n    selectionTemplate = $template.get(\"common/popover/popover-related-task-status.html\", true)\r\n\r\n    updateTaskStatus = ($el, task, taskStatusById) ->\r\n        taskStatusDomParent = $el.find(\".us-status\")\r\n        taskStatusDom = $el.find(\".task-status .task-status-bind\")\r\n\r\n        if taskStatusById[task.status]\r\n            taskStatusDom.text(taskStatusById[task.status].name)\r\n            taskStatusDomParent.css('color', taskStatusById[task.status].color)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        task = $scope.$eval($attrs.tgRelatedTaskStatus)\r\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\r\n        autoSave = !notAutoSave\r\n\r\n        $el.on \"click\", \".task-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n            # pop = $el.find(\".pop-status\")\r\n            # popoverService.open(pop)\r\n\r\n        $el.on \"click\", \".status\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            target = angular.element(event.currentTarget)\r\n            task.status = target.data(\"status-id\")\r\n            $el.find(\".pop-status\").popover().close()\r\n            updateTaskStatus($el, task, $scope.taskStatusById)\r\n\r\n            if autoSave\r\n                $scope.$apply () ->\r\n                    $repo.save(task).then ->\r\n                        $scope.$eval($attrs.onUpdate)\r\n                        $scope.$emit(\"related-tasks:status-changed\")\r\n\r\n        $scope.$watch $attrs.tgRelatedTaskStatus, () ->\r\n            task = $scope.$eval($attrs.tgRelatedTaskStatus)\r\n            updateTaskStatus($el, task, $scope.taskStatusById)\r\n\r\n        taiga.bindOnce $scope, \"project\", (project) ->\r\n            $el.append(selectionTemplate({ 'statuses':  project.task_statuses }))\r\n            updateTaskStatus($el, task, $scope.taskStatusById)\r\n\r\n            # If the user has not enough permissions the click events are unbinded\r\n            if project.my_permissions.indexOf(\"modify_task\") == -1\r\n                $el.unbind(\"click\")\r\n                $el.find(\"a\").addClass(\"not-clickable\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgRelatedTaskStatus\", [\"$tgRepo\", \"$tgTemplate\", RelatedTaskStatusDirective])\r\n\r\n#############################################################################\r\n## jQuery plugin for Popover\r\n#############################################################################\r\n\r\n$.fn.popover = () ->\r\n    $el = @\r\n\r\n    isVisible = () =>\r\n        $el.css({\r\n            \"display\": \"block\",\r\n            \"visibility\": \"hidden\"\r\n        })\r\n\r\n        docViewTop = $(window).scrollTop()\r\n        docViewBottom = docViewTop + $(window).height()\r\n\r\n        docViewWidth = $(window).width()\r\n        docViewRight = docViewWidth\r\n        docViewLeft = 0\r\n\r\n        elemTop = $el.offset().top\r\n        elemBottom = elemTop + $el.height()\r\n\r\n        elemWidth = $el.width()\r\n        elemLeft = $el.offset().left\r\n        elemRight = $el.offset().left + elemWidth\r\n\r\n        $el.css({\r\n            \"display\": \"none\",\r\n            \"visibility\": \"visible\"\r\n        })\r\n\r\n        return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop) && (elemLeft >= docViewLeft) && (elemRight <= docViewRight))\r\n\r\n    closePopover = (onClose) =>\r\n        if onClose then onClose.call($el)\r\n\r\n        $el.fadeOut () =>\r\n            $el\r\n                .removeClass(\"active\")\r\n                .removeClass(\"fix\")\r\n\r\n        $el.off(\"popup:close\")\r\n\r\n\r\n    closeAll = () =>\r\n        $(\".popover.active\").each () ->\r\n            $(this).trigger(\"popup:close\")\r\n\r\n    open = (onClose) =>\r\n        if $el.hasClass(\"active\")\r\n            close()\r\n        else\r\n            closeAll()\r\n\r\n            if !isVisible()\r\n                $el.addClass(\"fix\")\r\n\r\n            $el.fadeIn () =>\r\n                $el.addClass(\"active\")\r\n                $(document.body).off(\"popover\")\r\n\r\n                $(document.body).one \"click.popover\", () =>\r\n                    closeAll()\r\n\r\n            $el.on \"popup:close\", (e) => closePopover(onClose)\r\n\r\n    close = () =>\r\n        $el.trigger(\"popup:close\")\r\n\r\n    return {open: open, close: close, closeAll: closeAll}\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/raven-logger.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nExceptionHandlerFactory = ($log, @config) ->\r\n    ravenConfig = @config.get(\"ravenConfig\", null)\r\n    if ravenConfig\r\n      $log.debug \"Using the RavenJS exception handler.\"\r\n      Raven.config(ravenConfig).install()\r\n      return (exception, cause) ->\r\n        $log.error.apply($log, arguments)\r\n        Raven.captureException(exception)\r\n\r\n    else\r\n      $log.debug \"Using the default logging exception handler.\"\r\n      return (exception, cause) ->\r\n          $log.error.apply($log, arguments)\r\n\r\nmodule.factory(\"$exceptionHandler\", [\"$log\", \"$tgConfig\", ExceptionHandlerFactory])\r\n","###\r\n# Copyright (C) 2014-2017 Andrey Antukh <niwi@niwi.nz>\r\n# Copyright (C) 2014-2017 Jesús Espino Garcia <jespinog@gmail.com>\r\n# Copyright (C) 2014-2017 David Barragán Merino <bameda@dbarragan.com>\r\n# Copyright (C) 2014-2017 Alejandro Alonso <alejandro.alonso@kaleidos.net>\r\n# Copyright (C) 2014-2017 Juan Francisco Alcántara <juanfran.alcantara@kaleidos.net>\r\n# Copyright (C) 2014-2017 Xavi Julian <xavier.julian@kaleidos.net>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/sections.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\nclass SectionsService extends taiga.Service\r\n    @.$inject = [\"$translate\", \"tgCurrentUserService\"]\r\n\r\n    SECTIONS = {\r\n        1: {id: 1, title: 'TIMELINE', path:'timeline', enabled: ''}\r\n        2: {id: 2, title: 'EPICS', path:'epics', enabled: 'is_epics_activated'}\r\n        3: {id: 3, title: 'BACKLOG', path:'backlog', enabled: 'is_backlog_activated'}\r\n        4: {id: 4, title: 'KANBAN', path:'kanban', enabled: 'is_kanban_activated'}\r\n        5: {id: 5, title: 'ISSUES', path:'issues', enabled: 'is_issues_activated'}\r\n        6: {id: 6, title: 'WIKI', path:'wiki', enabled: 'is_wiki_activated'}\r\n    }\r\n\r\n    constructor: (@translate, @currentUserService) ->\r\n        super()\r\n        _.map(SECTIONS, (x) => x.title = @translate.instant(\"PROJECT.SECTION.#{x.title}\"))\r\n    list: () ->\r\n        return SECTIONS\r\n    getPath: (projectSlug, sectionId) ->\r\n        defaultHomePage = \"timeline\"\r\n\r\n        projects = @currentUserService.projects?.get(\"all\")\r\n        if not projects\r\n            return defaultHomePage\r\n\r\n        project = projects.find (p) -> return p.get('slug') == projectSlug\r\n        if not project\r\n            return defaultHomePage\r\n\r\n        if not sectionId\r\n            sectionId = project.get('my_homepage')\r\n\r\n        section = _.find(SECTIONS, {\"id\": sectionId})\r\n        if !section or project?.get(section.enabled) is not true\r\n            return defaultHomePage\r\n\r\n        return section.path\r\n\r\nmodule.service(\"$tgSections\", SectionsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/common/tags.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntrim = @.taiga.trim\r\nbindOnce = @.taiga.bindOnce\r\n\r\n\r\nmodule = angular.module(\"taigaCommon\")\r\n\r\n# Directive that parses/format tags inputfield.\r\n\r\nTagsDirective = ->\r\n    formatter = (v) ->\r\n        if _.isArray(v)\r\n            return v.join(\", \")\r\n        return \"\"\r\n\r\n    parser = (v) ->\r\n        return [] if not v\r\n        result = _(v.split(\",\")).map((x) -> _.trim(x))\r\n\r\n        return result.value()\r\n\r\n    link = ($scope, $el, $attrs, $ctrl) ->\r\n        $ctrl.$formatters.push(formatter)\r\n        $ctrl.$parsers.push(parser)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        require: \"ngModel\"\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgTags\", TagsDirective)\r\n\r\n\r\nColorizeTagsBacklogDirective = ($emojis) ->\r\n    template = _.template(\"\"\"\r\n        <% _.each(tags, function(tag) { %>\r\n            <% if (tag[1] !== null) { %>\r\n            <span class=\"tag\"\r\n                  style=\"border-left: 5px solid <%- tag[1] %>\"\r\n                  title=\"<%- tag[0] %>\">\r\n                  <%= emojify(tag[0]) %>\r\n            </span>\r\n            <% } %>\r\n        <% }) %>\r\n        <% _.each(tags, function(tag) { %>\r\n            <% if (tag[1] === null) { %>\r\n            <span class=\"tag\"\r\n                  title=\"<%- tag[0] %>\">\r\n                  <%= emojify(tag[0]) %>\r\n            </span>\r\n            <% } %>\r\n        <% }) %>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs, $ctrl) ->\r\n        render = (tags) ->\r\n            html = template({tags: tags, emojify: (text) -> $emojis.replaceEmojiNameByHtmlImgs(_.escape(text))})\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.tgColorizeBacklogTags, (tags) ->\r\n            render(tags) if tags?\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgColorizeBacklogTags\", [\"$tgEmojis\", ColorizeTagsBacklogDirective])\r\n\r\n\r\n#############################################################################\r\n## TagLine  Directive (for Lightboxes)\r\n#############################################################################\r\n\r\nLbTagLineDirective = ($rs, $template, $compile) ->\r\n    ENTER_KEY = 13\r\n    COMMA_KEY = 188\r\n\r\n    templateTags = $template.get(\"common/tag/lb-tag-line-tags.html\", true)\r\n\r\n    autocomplete = null\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        withoutColors = _.has($attrs, \"withoutColors\")\r\n\r\n        ## Render\r\n        renderTags = (tags, tagsColors = []) ->\r\n            color = if not withoutColors then tagsColors[t] else null\r\n\r\n            ctx = {\r\n                tags: _.map(tags, (t) -> {\r\n                    name: t,\r\n                    style: if color then \"border-left: 5px solid #{color}\" else \"\"\r\n                })\r\n            }\r\n\r\n            html = $compile(templateTags(ctx))($scope)\r\n            $el.find(\".tags-container\").html(html)\r\n\r\n        showSaveButton = ->\r\n            $el.find(\".save\").removeClass(\"hidden\")\r\n\r\n        hideSaveButton = ->\r\n            $el.find(\".save\").addClass(\"hidden\")\r\n\r\n        resetInput = ->\r\n            $el.find(\"input\").val(\"\")\r\n            autocomplete.close()\r\n\r\n        ## Aux methods\r\n        addValue = (value) ->\r\n            value = trim(value.toLowerCase())\r\n            return if value.length == 0\r\n\r\n            tags = _.clone($model.$modelValue, false)\r\n            tags = [] if not tags?\r\n            tags.push(value) if value not in tags\r\n\r\n            $scope.$apply ->\r\n                $model.$setViewValue(tags)\r\n\r\n            hideSaveButton()\r\n\r\n        deleteValue = (value) ->\r\n            value = trim(value.toLowerCase())\r\n            return if value.length == 0\r\n\r\n            tags = _.clone($model.$modelValue, false)\r\n            tags = _.pull(tags, value)\r\n\r\n            $scope.$apply ->\r\n                $model.$setViewValue(tags)\r\n\r\n        saveInputTag = () ->\r\n            value = $el.find(\"input\").val()\r\n\r\n            addValue(value)\r\n            resetInput()\r\n\r\n        ## Events\r\n        $el.on \"keypress\", \"input\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n\r\n            if event.keyCode == ENTER_KEY\r\n                event.preventDefault()\r\n                saveInputTag()\r\n            else if String.fromCharCode(event.keyCode) == ','\r\n                event.preventDefault()\r\n                saveInputTag()\r\n            else\r\n                if target.val().length\r\n                    showSaveButton()\r\n                else\r\n                    hideSaveButton()\r\n\r\n        $el.on \"click\", \".save\", (event) ->\r\n            event.preventDefault()\r\n            saveInputTag()\r\n\r\n        $el.on \"click\", \".remove-tag\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            value = target.siblings(\".tag-name\").text()\r\n            deleteValue(value)\r\n\r\n        bindOnce $scope, \"project\", (project) ->\r\n            input = $el.find(\"input\")\r\n\r\n            autocomplete = new Awesomplete(input[0], {\r\n                list: _.keys(project.tags_colors)\r\n            })\r\n\r\n            input.on \"awesomplete-selectcomplete\", () ->\r\n                addValue(input.val())\r\n                input.val(\"\")\r\n\r\n        $scope.$watch $attrs.ngModel, (tags) ->\r\n            tagsColors = $scope.project?.tags_colors or []\r\n            renderTags(tags, tagsColors)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link:link,\r\n        require:\"ngModel\"\r\n        templateUrl: \"common/tag/lb-tag-line.html\"\r\n    }\r\n\r\nmodule.directive(\"tgLbTagLine\", [\"$tgResources\", \"$tgTemplate\", \"$compile\", LbTagLineDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/backlog/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaBacklog\")\r\n\r\n#############################################################################\r\n## Creare/Edit Sprint Lightbox Directive\r\n#############################################################################\r\n\r\nCreateEditSprint = ($repo, $confirm, $rs, $rootscope, lightboxService, $loading, $translate) ->\r\n    link = ($scope, $el, attrs) ->\r\n        hasErrors = false\r\n        createSprint = true\r\n        form = null\r\n        $scope.newSprint = {}\r\n        ussToAdd = null\r\n\r\n        resetSprint = () ->\r\n            form.reset() if form\r\n\r\n            $scope.newSprint = {\r\n                project: null\r\n                name: null\r\n                estimated_start: null\r\n                estimated_finish: null\r\n            }\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n\r\n            submitButton = $el.find(\".submit-button\")\r\n            form = $el.find(\"form\").checksley()\r\n\r\n            if not form.validate()\r\n                hasErrors = true\r\n                $el.find(\".last-sprint-name\").addClass(\"disappear\")\r\n                return\r\n\r\n            hasErrors = false\r\n            broadcastEvent = null\r\n\r\n            estimated_start = $('.date-start').val()\r\n            estimated_end = $('.date-end').val()\r\n\r\n            if createSprint\r\n                newSprint = angular.copy($scope.newSprint)\r\n                newSprint.estimated_start = moment(estimated_start, prettyDate).format(\"YYYY-MM-DD\")\r\n                newSprint.estimated_finish = moment(estimated_end, prettyDate).format(\"YYYY-MM-DD\")\r\n\r\n                promise = $repo.create(\"milestones\", newSprint)\r\n                broadcastEvent = \"sprintform:create:success\"\r\n            else\r\n                newSprint = $scope.newSprint.realClone()\r\n                newSprint.estimated_start =  moment(estimated_start, prettyDate).format(\"YYYY-MM-DD\")\r\n                newSprint.estimated_finish = moment(estimated_end, prettyDate).format(\"YYYY-MM-DD\")\r\n\r\n                promise = $repo.save(newSprint)\r\n                broadcastEvent = \"sprintform:edit:success\"\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise.then (data) ->\r\n                currentLoading.finish()\r\n                $scope.sprintsCounter += 1 if createSprint\r\n\r\n                $scope.sprints = _.map $scope.sprints, (it) ->\r\n                    if it.id == data.id\r\n                        return data\r\n                    else\r\n                        return it\r\n\r\n                if broadcastEvent == \"sprintform:create:success\" && ussToAdd\r\n                    $rootscope.$broadcast(broadcastEvent, data, ussToAdd)\r\n                else\r\n                    $rootscope.$broadcast(broadcastEvent, data)\r\n\r\n                lightboxService.close($el)\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"light-error\", data._error_message)\r\n                else if data.__all__\r\n                    $confirm.notify(\"light-error\", data.__all__[0])\r\n\r\n        remove = ->\r\n            title = $translate.instant(\"LIGHTBOX.DELETE_SPRINT.TITLE\")\r\n            message = $scope.newSprint.name\r\n\r\n            $confirm.askOnDelete(title, message).then (askResponse) =>\r\n                onSuccess = ->\r\n                    askResponse.finish()\r\n                    $scope.milestonesCounter -= 1\r\n                    lightboxService.close($el)\r\n                    $rootscope.$broadcast(\"sprintform:remove:success\", $scope.newSprint)\r\n\r\n                onError = ->\r\n                    askResponse.finish(false)\r\n                    $confirm.notify(\"error\")\r\n                $repo.remove($scope.newSprint).then(onSuccess, onError)\r\n\r\n        getLastSprint = ->\r\n            openSprints = _.filter $scope.sprints, (sprint) ->\r\n                return !sprint.closed\r\n\r\n            sortedSprints = _.sortBy openSprints, (sprint) ->\r\n                return moment(sprint.estimated_finish, 'YYYY-MM-DD').format('X')\r\n\r\n            return sortedSprints[sortedSprints.length - 1]\r\n\r\n         $scope.$on \"sprintform:create\", (event, projectId, uss) ->\r\n            ussToAdd = uss\r\n            resetSprint()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            form.reset()\r\n\r\n            createSprint = true\r\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n            $scope.newSprint.project = projectId\r\n            $scope.newSprint.name = null\r\n            $scope.newSprint.slug = null\r\n\r\n            lastSprint = getLastSprint()\r\n\r\n            estimatedStart = moment()\r\n\r\n            if lastSprint\r\n                estimatedStart = moment(lastSprint.estimated_finish)\r\n            else if $scope.newSprint.estimated_start\r\n                estimatedStart = moment($scope.newSprint.estimated_start)\r\n\r\n            $scope.newSprint.estimated_start = estimatedStart.format(prettyDate)\r\n\r\n            estimatedFinish = moment().add(2, \"weeks\")\r\n\r\n            if lastSprint\r\n                estimatedFinish = moment(lastSprint.estimated_finish).add(2, \"weeks\")\r\n            else if $scope.newSprint.estimated_finish\r\n                estimatedFinish = moment($scope.newSprint.estimated_finish)\r\n\r\n            $scope.newSprint.estimated_finish = estimatedFinish.format(prettyDate)\r\n\r\n            lastSprintNameDom = $el.find(\".last-sprint-name\")\r\n            if lastSprint?.name?\r\n                text = $translate.instant(\"LIGHTBOX.ADD_EDIT_SPRINT.LAST_SPRINT_NAME\", {\r\n                            lastSprint: lastSprint.name})\r\n                lastSprintNameDom.html(text)\r\n\r\n            $el.find(\".delete-sprint\").addClass(\"hidden\")\r\n\r\n            text = $translate.instant(\"LIGHTBOX.ADD_EDIT_SPRINT.TITLE\")\r\n            $el.find(\".title\").text(text)\r\n\r\n            text = $translate.instant(\"COMMON.CREATE\")\r\n            $el.find(\".button-green\").text(text)\r\n\r\n            lightboxService.open($el)\r\n            $el.find(\".sprint-name\").focus()\r\n            $el.find(\".last-sprint-name\").removeClass(\"disappear\")\r\n\r\n        $scope.$on \"sprintform:edit\", (ctx, sprint) ->\r\n            resetSprint()\r\n\r\n            createSprint = false\r\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n\r\n            $scope.$apply () ->\r\n                $scope.newSprint = sprint.realClone()\r\n                $scope.newSprint.estimated_start = moment($scope.newSprint.estimated_start).format(prettyDate)\r\n                $scope.newSprint.estimated_finish = moment($scope.newSprint.estimated_finish).format(prettyDate)\r\n\r\n            $el.find(\".delete-sprint\").removeClass(\"hidden\")\r\n\r\n            editSprint = $translate.instant(\"BACKLOG.EDIT_SPRINT\")\r\n            $el.find(\".title\").text(editSprint)\r\n\r\n            save = $translate.instant(\"COMMON.SAVE\")\r\n            $el.find(\".button-green\").text(save)\r\n\r\n            lightboxService.open($el)\r\n            $el.find(\".sprint-name\").focus().select()\r\n            $el.find(\".last-sprint-name\").addClass(\"disappear\")\r\n\r\n        $el.on \"keyup\", \".sprint-name\", (event) ->\r\n            if $el.find(\".sprint-name\").val().length > 0 or hasErrors\r\n                $el.find(\".last-sprint-name\").addClass(\"disappear\")\r\n            else\r\n                $el.find(\".last-sprint-name\").removeClass(\"disappear\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $el.on \"click\", \".delete-sprint\", (event) ->\r\n            event.preventDefault()\r\n            remove()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        resetSprint()\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgLbCreateEditSprint\", [\r\n    \"$tgRepo\",\r\n    \"$tgConfirm\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    \"lightboxService\"\r\n    \"$tgLoading\",\r\n    \"$translate\",\r\n    CreateEditSprint\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/backlog/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoggleText = @.taiga.toggleText\r\nscopeDefer = @.taiga.scopeDefer\r\nbindOnce = @.taiga.bindOnce\r\ngroupBy = @.taiga.groupBy\r\ntimeout = @.taiga.timeout\r\nbindMethods = @.taiga.bindMethods\r\ngenerateHash = @.taiga.generateHash\r\n\r\nmodule = angular.module(\"taigaBacklog\")\r\n\r\n#############################################################################\r\n## Backlog Controller\r\n#############################################################################\r\n\r\nclass BacklogController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin, taiga.UsFiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgEvents\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"$tgLoading\",\r\n        \"tgResources\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"tgErrorHandlingService\",\r\n        \"$tgStorage\",\r\n        \"tgFilterRemoteStorageService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    storeCustomFiltersName: 'backlog-custom-filters'\r\n    storeFiltersName: 'backlog-filters'\r\n    backlogOrder: {}\r\n    milestonesOrder: {}\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @appMetaService, @navUrls,\r\n                  @events, @analytics, @translate, @loading, @rs2, @modelTransform, @errorHandlingService,\r\n                  @storage, @filterRemoteStorageService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @.backlogOrder = {}\r\n        @.milestonesOrder = {}\r\n\r\n        @.page = 1\r\n        @.disablePagination = false\r\n        @.firstLoadComplete = false\r\n        @scope.userstories = []\r\n\r\n        return if @.applyStoredFilters(@params.pslug, \"backlog-filters\")\r\n\r\n        @scope.sectionName = @translate.instant(\"BACKLOG.SECTION_NAME\")\r\n        @showTags = false\r\n        @activeFilters = false\r\n        @scope.showGraphPlaceholder = null\r\n        @displayVelocity = false\r\n\r\n        @.initializeEventHandlers()\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            @.firstLoadComplete = true\r\n\r\n            title = @translate.instant(\"BACKLOG.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @translate.instant(\"BACKLOG.PAGE_DESCRIPTION\", {\r\n                projectName: @scope.project.name,\r\n                projectDescription: @scope.project.description\r\n            })\r\n            @appMetaService.setAll(title, description)\r\n\r\n            if @rs.userstories.getShowTags(@scope.projectId)\r\n                @showTags = true\r\n\r\n                @scope.$broadcast(\"showTags\", @showTags)\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    filtersReloadContent: () ->\r\n        @.loadUserstories(true)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"usform:bulk:success\", =>\r\n            @.loadUserstories(true)\r\n            @.loadProjectStats()\r\n            @confirm.notify(\"success\")\r\n            @analytics.trackEvent(\"userstory\", \"create\", \"bulk create userstory on backlog\", 1)\r\n\r\n        @scope.$on \"sprintform:create:success\", (e, data, ussToMove) =>\r\n            @.loadSprints().then () =>\r\n                @scope.$broadcast(\"sprintform:create:success:callback\", ussToMove)\r\n\r\n            @.loadProjectStats()\r\n            @confirm.notify(\"success\")\r\n            @analytics.trackEvent(\"sprint\", \"create\", \"create sprint on backlog\", 1)\r\n\r\n        @scope.$on \"usform:new:success\", =>\r\n            @.loadUserstories(true)\r\n            @.loadProjectStats()\r\n\r\n            @rootscope.$broadcast(\"filters:update\")\r\n            @confirm.notify(\"success\")\r\n            @analytics.trackEvent(\"userstory\", \"create\", \"create userstory on backlog\", 1)\r\n\r\n        @scope.$on \"sprintform:edit:success\", =>\r\n            @.loadProjectStats()\r\n\r\n        @scope.$on \"sprintform:remove:success\", (event, sprint) =>\r\n            @.loadSprints()\r\n            @.loadProjectStats()\r\n            @.loadUserstories(true)\r\n\r\n            if sprint.closed\r\n                @.loadClosedSprints()\r\n\r\n            @rootscope.$broadcast(\"filters:update\")\r\n\r\n        @scope.$on \"usform:edit:success\", (event, data) =>\r\n            index = _.findIndex @scope.userstories, (us) ->\r\n                return us.id == data.id\r\n\r\n            @scope.userstories[index] = data\r\n\r\n            @rootscope.$broadcast(\"filters:update\")\r\n\r\n        @scope.$on(\"sprint:us:move\", @.moveUs)\r\n        @scope.$on \"sprint:us:moved\", () =>\r\n            @.loadSprints()\r\n            @.loadClosedSprints()\r\n            @.loadProjectStats()\r\n\r\n        @scope.$on(\"backlog:load-closed-sprints\", @.loadClosedSprints)\r\n        @scope.$on(\"backlog:unload-closed-sprints\", @.unloadClosedSprints)\r\n\r\n    initializeSubscription: ->\r\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\r\n        @events.subscribe @scope, routingKey1, (message) =>\r\n            @.loadAllPaginatedUserstories()\r\n            @.loadSprints()\r\n\r\n        routingKey2 = \"changes.project.#{@scope.projectId}.milestones\"\r\n        @events.subscribe @scope, routingKey2, (message) =>\r\n            @.loadSprints()\r\n\r\n    toggleShowTags: ->\r\n        @scope.$apply =>\r\n            @showTags = !@showTags\r\n            @rs.userstories.storeShowTags(@scope.projectId, @showTags)\r\n\r\n    toggleActiveFilters: ->\r\n        @activeFilters = !@activeFilters\r\n\r\n    toggleVelocityForecasting: ->\r\n        @displayVelocity = !@displayVelocity\r\n        if !@displayVelocity\r\n            @scope.visibleUserStories = _.map @scope.userstories, (it) ->\r\n                return it.ref\r\n        else\r\n            @scope.visibleUserStories = _.map @.forecastedStories, (it) ->\r\n                return it.ref\r\n        scopeDefer @scope, =>\r\n            @scope.$broadcast(\"userstories:loaded\")\r\n\r\n    loadProjectStats: ->\r\n        return @rs.projects.stats(@scope.projectId).then (stats) =>\r\n            @scope.stats = stats\r\n            totalPoints = if stats.total_points then stats.total_points else stats.defined_points\r\n\r\n            if totalPoints\r\n                @scope.stats.completedPercentage = Math.round(100 * stats.closed_points / totalPoints)\r\n            else\r\n                @scope.stats.completedPercentage = 0\r\n\r\n            @scope.showGraphPlaceholder = !(stats.total_points? && stats.total_milestones?)\r\n            @.calculateForecasting()\r\n            return stats\r\n\r\n    setMilestonesOrder: (sprints) ->\r\n        for sprint in sprints\r\n            @.milestonesOrder[sprint.id] = {}\r\n            for it in sprint.user_stories\r\n                @.milestonesOrder[sprint.id][it.id] = it.sprint_order\r\n\r\n    unloadClosedSprints: ->\r\n        @scope.$apply =>\r\n            @scope.closedSprints =  []\r\n            @rootscope.$broadcast(\"closed-sprints:reloaded\", [])\r\n\r\n    loadClosedSprints: ->\r\n        params = {closed: true}\r\n        return @rs.sprints.list(@scope.projectId, params).then (result) =>\r\n            sprints = result.milestones\r\n\r\n            @.setMilestonesOrder(sprints)\r\n\r\n            @scope.totalClosedMilestones = result.closed\r\n\r\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in partials files\r\n            for sprint in sprints\r\n                sprint.user_stories = _.sortBy(sprint.user_stories, \"sprint_order\")\r\n            @scope.closedSprints =  sprints\r\n            @scope.closedSprintsById = groupBy(sprints, (x) -> x.id)\r\n            @rootscope.$broadcast(\"closed-sprints:reloaded\", sprints)\r\n            return sprints\r\n\r\n    loadSprints: ->\r\n        params = {closed: false}\r\n        return @rs.sprints.list(@scope.projectId, params).then (result) =>\r\n            sprints = result.milestones\r\n\r\n            @.setMilestonesOrder(sprints)\r\n\r\n            @scope.totalMilestones = sprints\r\n            @scope.totalClosedMilestones = result.closed\r\n            @scope.totalOpenMilestones = result.open\r\n            @scope.totalMilestones = @scope.totalOpenMilestones + @scope.totalClosedMilestones\r\n\r\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in partials files\r\n            for sprint in sprints\r\n                sprint.user_stories = _.sortBy(sprint.user_stories, \"sprint_order\")\r\n\r\n            @scope.sprints = sprints\r\n\r\n            @scope.closedSprints =  [] if !@scope.closedSprints\r\n\r\n            @scope.sprintsCounter = sprints.length\r\n            @scope.sprintsById = groupBy(sprints, (x) -> x.id)\r\n            @rootscope.$broadcast(\"sprints:loaded\", sprints)\r\n\r\n            @scope.currentSprint = @.findCurrentSprint()\r\n\r\n            return sprints\r\n\r\n    openSprints: ->\r\n        return _.filter(@scope.sprints, (sprint) => not sprint.closed).reverse()\r\n\r\n    loadAllPaginatedUserstories: () ->\r\n        page = @.page\r\n\r\n        @.loadUserstories(true, @scope.userstories.length).then () =>\r\n          @.page = page\r\n\r\n    loadUserstories: (resetPagination = false, pageSize) ->\r\n        return null if !@scope.projectId\r\n\r\n        @.loadingUserstories = true\r\n        @.disablePagination = true\r\n        params = _.clone(@location.search())\r\n        @rs.userstories.storeQueryParams(@scope.projectId, params)\r\n\r\n        if resetPagination\r\n            @.page = 1\r\n\r\n        params.page = @.page\r\n\r\n        promise = @rs.userstories.listUnassigned(@scope.projectId, params, pageSize)\r\n\r\n        return promise.then (result) =>\r\n\r\n            userstories = result[0]\r\n            header = result[1]\r\n\r\n            if resetPagination\r\n                @scope.userstories = []\r\n\r\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in the partials files\r\n            @scope.userstories = @scope.userstories.concat(_.sortBy(userstories, \"backlog_order\"))\r\n            @scope.visibleUserStories = _.map @scope.userstories, (it) ->\r\n                return it.ref\r\n\r\n            for it in @scope.userstories\r\n                @.backlogOrder[it.id] = it.backlog_order\r\n\r\n            @.loadingUserstories = false\r\n\r\n            if header('x-pagination-next')\r\n                @.disablePagination = false\r\n                @.page++\r\n\r\n            # The broadcast must be executed when the DOM has been fully reloaded.\r\n            # We can't assure when this exactly happens so we need a defer\r\n            scopeDefer @scope, =>\r\n                @scope.$broadcast(\"userstories:loaded\")\r\n\r\n            return userstories\r\n\r\n    loadBacklog: ->\r\n        return @q.all([\r\n            @.loadProjectStats(),\r\n            @.loadSprints(),\r\n            @.loadUserstories()\r\n        ]).then(@.calculateForecasting)\r\n\r\n    calculateForecasting: ->\r\n        stats = @scope.stats\r\n        total_points = stats.total_points\r\n        current_sum = stats.assigned_points\r\n        backlog_points_sum = 0\r\n        @forecastedStories = []\r\n\r\n        for us in @scope.userstories\r\n            current_sum += us.total_points\r\n            backlog_points_sum += us.total_points\r\n            @forecastedStories.push(us)\r\n\r\n            if stats.speed > 0 && backlog_points_sum > stats.speed\r\n                break\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.is_backlog_activated\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.closedMilestones = !!project.total_closed_milestones\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.points = _.sortBy(project.points, \"order\")\r\n        @scope.pointsById = groupBy(project.points, (x) -> x.id)\r\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\r\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"id\")\r\n\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.initializeSubscription()\r\n\r\n        return @.loadBacklog()\r\n            .then(=> @.generateFilters(milestone = \"null\"))\r\n            .then(=> @scope.$emit(\"backlog:loaded\"))\r\n\r\n    prepareBulkUpdateData: (uses, field=\"backlog_order\") ->\r\n         return _.map(uses, (x) -> {\"us_id\": x.id, \"order\": x[field]})\r\n\r\n    # --move us api behavior--\r\n    # If your are moving multiples USs you must use the bulk api\r\n    # If there is only one US you must use patch (repo.save)\r\n    #\r\n    # The new US position is the position of the previous US + 1.\r\n    # If the previous US has a position value that it is equal to\r\n    # other USs, you must send all the USs with that position value\r\n    # only if they are before of the target position with this USs\r\n    # if it's a patch you must add them to the header, if is a bulk\r\n    # you must send them with the other USs\r\n    moveUs: (ctx, usList, newUsIndex, newSprintId) ->\r\n        oldSprintId = usList[0].milestone\r\n        project = usList[0].project\r\n\r\n        if oldSprintId\r\n            sprint = @scope.sprintsById[oldSprintId] || @scope.closedSprintsById[oldSprintId]\r\n\r\n        if newSprintId\r\n            newSprint = @scope.sprintsById[newSprintId] || @scope.closedSprintsById[newSprintId]\r\n\r\n        currentSprintId = if newSprintId != oldSprintId then newSprintId else oldSprintId\r\n\r\n        orderList = null\r\n        orderField = \"\"\r\n\r\n        if newSprintId != oldSprintId\r\n            if newSprintId == null # From sprint to backlog\r\n                for us, key in usList # delete from sprint userstories\r\n                    _.remove sprint.user_stories, (it) -> it.id == us.id\r\n\r\n                orderField = \"backlog_order\"\r\n                orderList = @.backlogOrder\r\n\r\n                beforeDestination = _.slice(@scope.userstories, 0, newUsIndex)\r\n                afterDestination = _.slice(@scope.userstories, newUsIndex)\r\n\r\n                @scope.userstories = @scope.userstories.concat(usList)\r\n            else # From backlog to sprint\r\n                for us in usList # delete from sprint userstories\r\n                    _.remove @scope.userstories, (it) -> it.id == us.id\r\n\r\n                orderField = \"sprint_order\"\r\n                orderList = @.milestonesOrder[newSprint.id]\r\n\r\n                beforeDestination = _.slice(newSprint.user_stories, 0, newUsIndex)\r\n                afterDestination = _.slice(newSprint.user_stories, newUsIndex)\r\n\r\n                newSprint.user_stories = newSprint.user_stories.concat(usList)\r\n        else\r\n            if oldSprintId == null # backlog\r\n                orderField = \"backlog_order\"\r\n                orderList = @.backlogOrder\r\n\r\n                list = _.filter @scope.userstories, (listIt) -> # Remove moved US from list\r\n                    return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\r\n\r\n                beforeDestination = _.slice(list, 0, newUsIndex)\r\n                afterDestination = _.slice(list, newUsIndex)\r\n            else # sprint\r\n                orderField = \"sprint_order\"\r\n                orderList = @.milestonesOrder[sprint.id]\r\n\r\n                list = _.filter newSprint.user_stories, (listIt) -> # Remove moved US from list\r\n                    return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\r\n\r\n                beforeDestination = _.slice(list, 0, newUsIndex)\r\n                afterDestination = _.slice(list, newUsIndex)\r\n\r\n        # previous us\r\n        previous = beforeDestination[beforeDestination.length - 1]\r\n\r\n        # this will store the previous us with the same position\r\n        setPreviousOrders = []\r\n\r\n        if !previous\r\n            startIndex = 0\r\n        else if previous\r\n            startIndex = orderList[previous.id] + 1\r\n\r\n            previousWithTheSameOrder = _.filter(beforeDestination, (it) ->\r\n                it[orderField] == orderList[previous.id]\r\n            )\r\n\r\n            # we must send the USs previous to the dropped USs to tell the backend\r\n            # which USs are before the dropped USs, if they have the same value to\r\n            # order, the backend doens't know after which one do you want to drop\r\n            # the USs\r\n            if previousWithTheSameOrder.length > 1\r\n                setPreviousOrders = _.map(previousWithTheSameOrder, (it) ->\r\n                    {us_id: it.id, order: orderList[it.id]}\r\n                )\r\n\r\n        modifiedUs = []\r\n\r\n        for us, key in usList # update sprint and new position\r\n            us.milestone = currentSprintId\r\n            us[orderField] = startIndex + key\r\n            orderList[us.id] = us[orderField]\r\n\r\n            modifiedUs.push({us_id: us.id, order: us[orderField]})\r\n\r\n        startIndex = orderList[usList[usList.length - 1].id]\r\n\r\n        for it, key in afterDestination # increase position of the us after the dragged us's\r\n            orderList[it.id] = startIndex + key + 1\r\n\r\n        setNextOrders = _.map(afterDestination, (it) =>\r\n            {us_id: it.id, order: orderList[it.id]}\r\n        )\r\n\r\n        # refresh order\r\n        @scope.userstories = _.sortBy @scope.userstories, (it) => @.backlogOrder[it.id]\r\n        @scope.visibleUserStories = _.map @scope.userstories, (it) -> return it.ref\r\n\r\n        for sprint in @scope.sprints\r\n            sprint.user_stories = _.sortBy sprint.user_stories, (it) => @.milestonesOrder[sprint.id][it.id]\r\n\r\n        for sprint in @scope.closedSprints\r\n            sprint.user_stories = _.sortBy sprint.user_stories, (it) => @.milestonesOrder[sprint.id][it.id]\r\n\r\n        # saving\r\n        if usList.length > 1 && (newSprintId != oldSprintId) # drag multiple to sprint\r\n            data = modifiedUs.concat(setPreviousOrders, setNextOrders)\r\n            promise = @rs.userstories.bulkUpdateMilestone(project, newSprintId, data)\r\n        else if usList.length > 1 # drag multiple in backlog\r\n            data = modifiedUs.concat(setPreviousOrders, setNextOrders)\r\n            promise = @rs.userstories.bulkUpdateBacklogOrder(project, data)\r\n        else  # drag single\r\n            setOrders = {}\r\n            for it in setPreviousOrders\r\n                setOrders[it.us_id] = it.order\r\n            for it in setNextOrders\r\n                setOrders[it.us_id] = it.order\r\n\r\n            options = {\r\n                headers: {\r\n                    \"set-orders\": JSON.stringify(setOrders)\r\n                }\r\n            }\r\n\r\n            promise = @repo.save(usList[0], true, {}, options, true)\r\n\r\n        promise.then () =>\r\n            @rootscope.$broadcast(\"sprint:us:moved\")\r\n\r\n            if @scope.closedSprintsById && @scope.closedSprintsById[oldSprintId]\r\n                @rootscope.$broadcast(\"backlog:load-closed-sprints\")\r\n\r\n        return promise\r\n\r\n    ## Template actions\r\n\r\n    updateUserStoryStatus: () ->\r\n        @.generateFilters().then () =>\r\n            @rootscope.$broadcast(\"filters:update\")\r\n            @.loadProjectStats()\r\n            if @.isFilterDataTypeSelected('status')\r\n                @.filtersReloadContent()\r\n\r\n    editUserStory: (projectId, ref, $event) ->\r\n        target = $($event.target)\r\n\r\n        currentLoading = @loading()\r\n            .target(target)\r\n            .removeClasses(\"edit-story\")\r\n            .timeout(200)\r\n            .start()\r\n\r\n        return @rs.userstories.getByRef(projectId, ref).then (us) =>\r\n            @rs2.attachments.list(\"us\", us.id, projectId).then (attachments) =>\r\n                @rootscope.$broadcast(\"genericform:edit\", {\r\n                    'objType': 'us',\r\n                    'obj': us,\r\n                    'attachments': attachments.toJS()\r\n                })\r\n                currentLoading.finish()\r\n\r\n    deleteUserStory: (us) ->\r\n        title = @translate.instant(\"US.TITLE_DELETE_ACTION\")\r\n\r\n        message = us.subject\r\n\r\n        @confirm.askOnDelete(title, message).then (askResponse) =>\r\n            # We modify the userstories in scope so the user doesn't see the removed US for a while\r\n            @scope.userstories = _.without(@scope.userstories, us)\r\n            promise = @.repo.remove(us)\r\n            promise.then =>\r\n                askResponse.finish()\r\n\r\n                @q.all([\r\n                    @.loadProjectStats(),\r\n                    @.loadSprints()\r\n                ])\r\n            promise.then null, =>\r\n                askResponse.finish(false)\r\n                @confirm.notify(\"error\")\r\n\r\n    addNewUs: (type) ->\r\n        switch type\r\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new\",\r\n                {\r\n                    'objType': 'us',\r\n                    'project': @scope.project\r\n                })\r\n            when \"bulk\" then @rootscope.$broadcast(\"usform:bulk\", @scope.projectId,\r\n                                                   @scope.project.default_us_status)\r\n\r\n    addNewSprint: () ->\r\n        @rootscope.$broadcast(\"sprintform:create\", @scope.projectId)\r\n\r\n    findCurrentSprint: () ->\r\n        currentDate = new Date().getTime()\r\n\r\n        return  _.find @scope.sprints, (sprint) ->\r\n            start = moment(sprint.estimated_start, 'YYYY-MM-DD').format('x')\r\n            end = moment(sprint.estimated_finish, 'YYYY-MM-DD').format('x')\r\n\r\n            return currentDate >= start && currentDate <= end\r\n\r\nmodule.controller(\"BacklogController\", BacklogController)\r\n\r\n#############################################################################\r\n## Backlog Directive\r\n#############################################################################\r\n\r\nBacklogDirective = ($repo, $rootscope, $translate, $rs) ->\r\n    ## Doom line Link\r\n    doomLineTemplate = _.template(\"\"\"\r\n    <div class=\"doom-line\"><span><%- text %></span></div>\r\n    \"\"\")\r\n\r\n    linkDoomLine = ($scope, $el, $attrs, $ctrl) ->\r\n        reloadDoomLine = ->\r\n            if $scope.displayVelocity\r\n                removeDoomlineDom()\r\n\r\n            if $scope.stats? and $scope.stats.total_points? and $scope.stats.total_points != 0 and !$scope.displayVelocity?\r\n                removeDoomlineDom()\r\n\r\n                stats = $scope.stats\r\n                total_points = stats.total_points\r\n                current_sum = stats.assigned_points\r\n\r\n                return if not $scope.userstories\r\n\r\n                for us, i in $scope.userstories\r\n                    current_sum += us.total_points\r\n\r\n                    if current_sum > total_points\r\n                        domElement = $el.find('.backlog-table-body .us-item-row')[i]\r\n                        addDoomLineDom(domElement)\r\n\r\n                        break\r\n\r\n        removeDoomlineDom = ->\r\n            $el.find(\".doom-line\").remove()\r\n\r\n        addDoomLineDom = (element) ->\r\n            text = $translate.instant(\"BACKLOG.DOOMLINE\")\r\n            $(element).before(doomLineTemplate({\"text\": text}))\r\n\r\n        getUsItems = ->\r\n            rowElements = $el.find('.backlog-table-body .us-item-row')\r\n            return _.map(rowElements, (x) -> angular.element(x))\r\n\r\n        $scope.$on(\"userstories:loaded\", reloadDoomLine)\r\n        $scope.$on(\"userstories:forecast\", removeDoomlineDom)\r\n        $scope.$watch(\"stats\", reloadDoomLine)\r\n\r\n    ## Move to current sprint link\r\n\r\n    linkToolbar = ($scope, $el, $attrs, $ctrl) ->\r\n        getUsToMove = () ->\r\n            # Calculating the us's to be modified\r\n            ussDom = $el.find(\".backlog-table-body input:checkbox:checked\")\r\n\r\n            return _.map ussDom, (item) ->\r\n                item =  $(item).closest('.tg-scope')\r\n                itemScope = item.scope()\r\n                itemScope.us.milestone = $scope.sprints[0].id\r\n                return itemScope.us\r\n\r\n        moveUssToSprint = (selectedUss, sprint) ->\r\n            ussCurrent = _($scope.userstories)\r\n\r\n            # Remove them from backlog\r\n            $scope.userstories = ussCurrent.without.apply(ussCurrent, selectedUss).value()\r\n\r\n            extraPoints = _.map(selectedUss, (v, k) -> v.total_points)\r\n            totalExtraPoints =  _.reduce(extraPoints, (acc, num) -> acc + num)\r\n\r\n            # Add them to current sprint\r\n            sprint.user_stories = _.union(sprint.user_stories, selectedUss)\r\n\r\n            # Update the total of points\r\n            sprint.total_points += totalExtraPoints\r\n\r\n            data = _.map selectedUss, (us) ->\r\n                return {\r\n                    us_id: us.id\r\n                    order: us.sprint_order\r\n                }\r\n            $rs.userstories.bulkUpdateMilestone($scope.project.id, $scope.sprints[0].id, data).then =>\r\n                $ctrl.loadSprints()\r\n                $ctrl.loadProjectStats()\r\n                $ctrl.toggleVelocityForecasting()\r\n                $ctrl.calculateForecasting()\r\n\r\n            $el.find(\".move-to-sprint\").hide()\r\n\r\n        moveToCurrentSprint = (selectedUss) ->\r\n            moveUssToSprint(selectedUss, $scope.currentSprint)\r\n\r\n        moveToLatestSprint = (selectedUss) ->\r\n            moveUssToSprint(selectedUss, $scope.sprints[0])\r\n\r\n        $scope.$on \"sprintform:create:success:callback\", (e, ussToMove) ->\r\n            _.partial(moveToCurrentSprint, ussToMove)()\r\n\r\n        shiftPressed = false\r\n        lastChecked = null\r\n\r\n        checkSelected = (target) ->\r\n            lastChecked = target.closest(\".us-item-row\")\r\n            target.closest('.us-item-row').toggleClass('ui-multisortable-multiple')\r\n            moveToSprintDom = $el.find(\".move-to-sprint\")\r\n            selectedUsDom = $el.find(\".backlog-table-body input:checkbox:checked\")\r\n\r\n            if selectedUsDom.length > 0 and $scope.sprints.length > 0\r\n                moveToSprintDom.show()\r\n            else\r\n                moveToSprintDom.hide()\r\n\r\n\r\n        $(window).on \"keydown.shift-pressed keyup.shift-pressed\", (event) ->\r\n            shiftPressed = !!event.shiftKey\r\n\r\n            return true\r\n\r\n        # Enable move to current sprint only when there are selected us's\r\n        $el.on \"change\", \".backlog-table-body input:checkbox\", (event) ->\r\n            # check elements between the last two if shift is pressed\r\n            if lastChecked && shiftPressed\r\n                elements = []\r\n                current = $(event.currentTarget).closest(\".us-item-row\")\r\n                nextAll = lastChecked.nextAll()\r\n                prevAll = lastChecked.prevAll()\r\n\r\n                if _.some(nextAll, (next) -> next == current[0])\r\n                    elements = lastChecked.nextUntil(current)\r\n                else if _.some(prevAll, (prev) -> prev == current[0])\r\n                    elements = lastChecked.prevUntil(current)\r\n\r\n                _.map elements, (elm) ->\r\n                    input = $(elm).find(\"input:checkbox\")\r\n                    input.prop('checked', true)\r\n                    checkSelected(input)\r\n\r\n            target = angular.element(event.currentTarget)\r\n            target.closest(\".us-item-row\").toggleClass('is-checked')\r\n            checkSelected(target)\r\n\r\n        $el.on \"click\", \"#move-to-latest-sprint\", (event) =>\r\n            ussToMove = getUsToMove()\r\n\r\n            $scope.$apply(_.partial(moveToLatestSprint, ussToMove))\r\n\r\n        $el.on \"click\", \"#move-to-current-sprint\", (event) =>\r\n            ussToMove = getUsToMove()\r\n\r\n            $scope.$apply(_.partial(moveToCurrentSprint, ussToMove))\r\n\r\n        $el.on \"click\", \"#show-tags\", (event) ->\r\n            event.preventDefault()\r\n\r\n            $ctrl.toggleShowTags()\r\n\r\n            showHideTags($ctrl)\r\n\r\n        $el.on \"click\", \".forecasting-add-sprint\", (event) ->\r\n            ussToMoveList = $ctrl.forecastedStories\r\n            if $scope.currentSprint\r\n                ussToMove = _.map ussToMoveList, (us, index) ->\r\n                    us.milestone = $scope.currentSprint.id\r\n                    us.order = index\r\n                    return us\r\n\r\n                $scope.$apply(_.partial(moveToCurrentSprint, ussToMove))\r\n            else\r\n                ussToMove = _.map ussToMoveList, (us, index) ->\r\n                    us.order = index\r\n                    return us\r\n\r\n                $rootscope.$broadcast(\"sprintform:create\", $scope.projectId, ussToMove)\r\n\r\n    showHideTags = ($ctrl) ->\r\n        elm = angular.element(\"#show-tags\")\r\n\r\n        if $ctrl.showTags\r\n            elm.addClass(\"active\")\r\n\r\n            text = $translate.instant(\"BACKLOG.TAGS.HIDE\")\r\n            elm.text(text)\r\n        else\r\n            elm.removeClass(\"active\")\r\n\r\n            text = $translate.instant(\"BACKLOG.TAGS.SHOW\")\r\n            elm.text(text)\r\n\r\n    openFilterInit = ($scope, $el, $ctrl) ->\r\n        sidebar = $el.find(\"sidebar.backlog-filter\")\r\n\r\n        sidebar.addClass(\"active\")\r\n\r\n        $ctrl.activeFilters = true\r\n\r\n    showHideFilter = ($scope, $el, $ctrl) ->\r\n        sidebar = $el.find(\"sidebar.backlog-filter\")\r\n        sidebar.one \"transitionend\", () ->\r\n            timeout 150, ->\r\n                $rootscope.$broadcast(\"resize\")\r\n                $('.burndown').css(\"visibility\", \"visible\")\r\n\r\n        target = angular.element(\"#show-filters-button\")\r\n        $('.burndown').css(\"visibility\", \"hidden\")\r\n        sidebar.toggleClass(\"active\")\r\n        target.toggleClass(\"active\")\r\n\r\n        hideText = $translate.instant(\"BACKLOG.FILTERS.HIDE\")\r\n        showText = $translate.instant(\"BACKLOG.FILTERS.SHOW\")\r\n\r\n        toggleText(target, [hideText, showText])\r\n\r\n        $ctrl.toggleActiveFilters()\r\n\r\n    ## Filters Link\r\n\r\n    linkFilters = ($scope, $el, $attrs, $ctrl) ->\r\n        $scope.filtersSearch = {}\r\n        $el.on \"click\", \"#show-filters-button\", (event) ->\r\n            event.preventDefault()\r\n            $scope.$apply ->\r\n                showHideFilter($scope, $el, $ctrl)\r\n\r\n    link = ($scope, $el, $attrs, $rootscope) ->\r\n        $ctrl = $el.controller()\r\n\r\n        linkToolbar($scope, $el, $attrs, $ctrl)\r\n        linkFilters($scope, $el, $attrs, $ctrl)\r\n        linkDoomLine($scope, $el, $attrs, $ctrl)\r\n\r\n        filters = $ctrl.location.search()\r\n        if filters.status ||\r\n           filters.tags ||\r\n           filters.q ||\r\n           filters.assigned_to ||\r\n           filters.owner\r\n            openFilterInit($scope, $el, $ctrl)\r\n\r\n        $scope.$on \"showTags\", () ->\r\n            showHideTags($ctrl)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n            $(window).off(\".shift-pressed\")\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgBacklog\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"$tgResources\", BacklogDirective])\r\n\r\n#############################################################################\r\n## User story points directive\r\n#############################################################################\r\n\r\nUsRolePointsSelectorDirective = ($rootscope, $template, $compile, $translate) ->\r\n    selectionTemplate = $template.get(\"backlog/us-role-points-popover.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        # Watchers\r\n        bindOnce $scope, \"project\", (project) ->\r\n            roles = _.filter(project.roles, \"computable\")\r\n            numberOfRoles = _.size(roles)\r\n\r\n            if numberOfRoles > 1\r\n                $el.append($compile(selectionTemplate({\"roles\": roles}))($scope))\r\n            else\r\n                $el.find(\".icon-arrow-down\").remove()\r\n                $el.find(\".header-points\").addClass(\"not-clickable\")\r\n\r\n        $scope.$on \"uspoints:select\", (ctx, roleId, roleName) ->\r\n            $el.find(\".popover\").popover().close()\r\n            $el.find(\".header-points\").html(\"#{roleName}/<span>Total</span>\")\r\n\r\n        $scope.$on \"uspoints:clear-selection\", (ctx, roleId) ->\r\n            $el.find(\".popover\").popover().close()\r\n\r\n            text = $translate.instant(\"COMMON.FIELDS.POINTS\")\r\n            $el.find(\".header-points\").text(text)\r\n\r\n        # Dom Event Handlers\r\n        $el.on \"click\", (event) ->\r\n            target = angular.element(event.target)\r\n\r\n            if target.is(\"span\") or target.is(\"div\")\r\n                event.stopPropagation()\r\n\r\n            $el.find(\".popover\").popover().open()\r\n\r\n        $el.on \"click\", \".clear-selection\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $rootscope.$broadcast(\"uspoints:clear-selection\")\r\n\r\n        $el.on \"click\", \".role\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            target = angular.element(event.currentTarget)\r\n            rolScope = target.scope()\r\n            $rootscope.$broadcast(\"uspoints:select\", target.data(\"role-id\"), target.text())\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgUsRolePointsSelector\", [\"$rootScope\", \"$tgTemplate\", \"$compile\", \"$translate\", UsRolePointsSelectorDirective])\r\n\r\n\r\nUsPointsDirective = ($tgEstimationsService, $repo, $tgTemplate) ->\r\n    rolesTemplate = $tgTemplate.get(\"common/estimation/us-points-roles-popover.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        updatingSelectedRoleId = null\r\n        selectedRoleId = null\r\n        filteringRoleId = null\r\n        estimationProcess = null\r\n\r\n        $scope.$on \"uspoints:select\", (ctx, roleId, roleName) ->\r\n            us = $scope.$eval($attrs.tgBacklogUsPoints)\r\n            selectedRoleId = roleId\r\n            estimationProcess.render()\r\n\r\n        $scope.$on \"uspoints:clear-selection\", (ctx) ->\r\n            us = $scope.$eval($attrs.tgBacklogUsPoints)\r\n            selectedRoleId = null\r\n            estimationProcess.render()\r\n\r\n        $scope.$watch $attrs.tgBacklogUsPoints, (us) ->\r\n            if us\r\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\r\n\r\n                # Update roles\r\n                roles = estimationProcess.calculateRoles()\r\n                if roles.length == 0\r\n                    $el.find(\".icon-arrow-bottom\").remove()\r\n                    $el.find(\"a.us-points\").addClass(\"not-clickable\")\r\n\r\n                else if roles.length == 1\r\n                    # Preselect the role if we have only one\r\n                    selectedRoleId = _.keys(us.points)[0]\r\n\r\n                if estimationProcess.isEditable\r\n                    bindClickElements()\r\n\r\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\r\n                    us.points = points\r\n                    estimationProcess.render()\r\n\r\n                    @save(roleId, pointId).then ->\r\n                        $ctrl.loadProjectStats()\r\n\r\n                estimationProcess.render = () ->\r\n                    totalPoints = @calculateTotalPoints()\r\n                    if not selectedRoleId? or roles.length == 1\r\n                        text = totalPoints\r\n                        title = totalPoints\r\n                    else\r\n                        pointId = @us.points[selectedRoleId]\r\n                        pointObj = @pointsById[pointId]\r\n                        text = \"#{pointObj.name} / <span>#{totalPoints}</span>\"\r\n                        title = \"#{pointObj.name} / #{totalPoints}\"\r\n\r\n                    ctx = {\r\n                        totalPoints: totalPoints\r\n                        roles: @calculateRoles()\r\n                        editable: @isEditable\r\n                        text:  text\r\n                        title: title\r\n                    }\r\n                    mainTemplate = \"common/estimation/us-estimation-total.html\"\r\n                    template = $tgTemplate.get(mainTemplate, true)\r\n                    html = template(ctx)\r\n                    @$el.html(html)\r\n\r\n                estimationProcess.render()\r\n\r\n        renderRolesSelector = () ->\r\n            roles = estimationProcess.calculateRoles()\r\n            html = rolesTemplate({\"roles\": roles})\r\n            # Render into DOM and show the new created element\r\n            $el.append(html)\r\n            $el.find(\".pop-role\").popover().open(() -> $(this).remove())\r\n\r\n        bindClickElements = () ->\r\n            $el.on \"click\", \"a.us-points\", (event) ->\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                us = $scope.$eval($attrs.tgBacklogUsPoints)\r\n                updatingSelectedRoleId = selectedRoleId\r\n                if selectedRoleId?\r\n                    estimationProcess.renderPointsSelector(selectedRoleId)\r\n                else\r\n                    renderRolesSelector()\r\n\r\n            $el.on \"click\", \".role\", (event) ->\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                target = angular.element(event.currentTarget)\r\n                us = $scope.$eval($attrs.tgBacklogUsPoints)\r\n                updatingSelectedRoleId = target.data(\"role-id\")\r\n                popRolesDom = $el.find(\".pop-role\")\r\n                popRolesDom.find(\"a\").removeClass(\"active\")\r\n                popRolesDom.find(\"a[data-role-id='#{updatingSelectedRoleId}']\").addClass(\"active\")\r\n                estimationProcess.renderPointsSelector(updatingSelectedRoleId)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBacklogUsPoints\", [\"$tgEstimationsService\", \"$tgRepo\", \"$tgTemplate\", UsPointsDirective])\r\n\r\n\r\n#############################################################################\r\n## Burndown graph directive\r\n#############################################################################\r\nToggleBurndownVisibility = ($storage) ->\r\n    hide = () ->\r\n        $(\".js-burndown-graph\").removeClass(\"shown\")\r\n        $(\".js-toggle-burndown-visibility-button\").removeClass(\"active\")\r\n        $(\".js-burndown-graph\").removeClass(\"open\")\r\n\r\n    show = (firstLoad) ->\r\n        $(\".js-toggle-burndown-visibility-button\").addClass(\"active\")\r\n\r\n        if firstLoad\r\n            $(\".js-burndown-graph\").addClass(\"shown\")\r\n        else\r\n            $(\".js-burndown-graph\").addClass(\"open\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        firstLoad = true\r\n        hash = generateHash([\"is-burndown-grpahs-collapsed\"])\r\n        $scope.isBurndownGraphCollapsed = $storage.get(hash) or false\r\n\r\n        toggleGraph = ->\r\n            if $scope.isBurndownGraphCollapsed\r\n                hide(firstLoad)\r\n            else\r\n                show(firstLoad)\r\n\r\n            firstLoad = false\r\n\r\n        $scope.$watch \"showGraphPlaceholder\", () ->\r\n            if $scope.showGraphPlaceholder?\r\n                $scope.isBurndownGraphCollapsed = $scope.isBurndownGraphCollapsed || $scope.showGraphPlaceholder\r\n                toggleGraph()\r\n\r\n        $el.on \"click\", \".js-toggle-burndown-visibility-button\", ->\r\n            $scope.isBurndownGraphCollapsed = !$scope.isBurndownGraphCollapsed\r\n            $storage.set(hash, $scope.isBurndownGraphCollapsed)\r\n            toggleGraph()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgToggleBurndownVisibility\", [\"$tgStorage\", ToggleBurndownVisibility])\r\n\r\n\r\n#############################################################################\r\n## Burndown graph directive\r\n#############################################################################\r\n\r\nBurndownBacklogGraphDirective = ($translate) ->\r\n    redrawChart = (element, dataToDraw) ->\r\n        width = element.width()\r\n        element.height(width/6)\r\n        milestonesRange = [0..(dataToDraw.milestones.length - 1)]\r\n        data = []\r\n        zero_line = _.map(dataToDraw.milestones, (ml) -> 0)\r\n        data.push({\r\n            data: _.zip(milestonesRange, zero_line)\r\n            lines:\r\n                fillColor : \"rgba(0,0,0,0)\"\r\n            points:\r\n                show: false\r\n        })\r\n        optimal_line = _.map(dataToDraw.milestones, (ml) -> ml.optimal)\r\n        data.push({\r\n            data: _.zip(milestonesRange, optimal_line)\r\n            lines:\r\n                fillColor : \"rgba(120,120,120,0.2)\"\r\n        })\r\n        evolution_line = _.filter(_.map(dataToDraw.milestones, (ml) -> ml.evolution), (evolution) -> evolution?)\r\n        data.push({\r\n            data: _.zip(milestonesRange, evolution_line)\r\n            lines:\r\n                fillColor : \"rgba(102,153,51,0.3)\"\r\n        })\r\n        client_increment_line = _.map dataToDraw.milestones, (ml) ->\r\n            -ml[\"team-increment\"] - ml[\"client-increment\"]\r\n        data.push({\r\n            data: _.zip(milestonesRange, client_increment_line)\r\n            lines:\r\n                fillColor : \"rgba(255,51,51,0.3)\"\r\n        })\r\n        team_increment_line = _.map(dataToDraw.milestones, (ml) -> -ml[\"team-increment\"])\r\n        data.push({\r\n            data: _.zip(milestonesRange, team_increment_line)\r\n            lines:\r\n                fillColor : \"rgba(153,51,51,0.3)\"\r\n        })\r\n        colors = [\r\n            \"rgba(0,0,0,1)\"\r\n            \"rgba(120,120,120,0.2)\"\r\n            \"rgba(102,153,51,1)\"\r\n            \"rgba(153,51,51,1)\"\r\n            \"rgba(255,51,51,1)\"\r\n        ]\r\n\r\n        options = {\r\n            grid: {\r\n                borderWidth: { top: 0, right: 1, left:0, bottom: 0 }\r\n                borderColor: \"#ccc\"\r\n                hoverable: true\r\n            }\r\n            xaxis: {\r\n                ticks: dataToDraw.milestones.length\r\n                axisLabel: $translate.instant(\"BACKLOG.CHART.XAXIS_LABEL\"),\r\n                axisLabelUseCanvas: true\r\n                axisLabelFontSizePixels: 12\r\n                axisLabelFontFamily: \"Verdana, Arial, Helvetica, Tahoma, sans-serif\"\r\n                axisLabelPadding: 5\r\n                tickFormatter: (val, axis) -> \"\"\r\n            }\r\n            yaxis: {\r\n                axisLabel: $translate.instant(\"BACKLOG.CHART.YAXIS_LABEL\"),\r\n                axisLabelUseCanvas: true\r\n                axisLabelFontSizePixels: 12\r\n                axisLabelFontFamily: \"Verdana, Arial, Helvetica, Tahoma, sans-serif\"\r\n                axisLabelPadding: 5\r\n            }\r\n            series: {\r\n                shadowSize: 0\r\n                lines: {\r\n                    show: true\r\n                    fill: true\r\n                }\r\n                points: {\r\n                    show: true\r\n                    fill: true\r\n                    radius: 4\r\n                    lineWidth: 2\r\n                }\r\n            }\r\n            colors: colors\r\n            tooltip: true\r\n            tooltipOpts: {\r\n                content: (label, xval, yval, flotItem) ->\r\n                    if flotItem.seriesIndex == 1\r\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\r\n                        return $translate.instant(\"BACKLOG.CHART.OPTIMAL\", ctx)\r\n                    else if flotItem.seriesIndex == 2\r\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\r\n                        return $translate.instant(\"BACKLOG.CHART.REAL\", ctx)\r\n                    else if flotItem.seriesIndex == 3\r\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\r\n                        return $translate.instant(\"BACKLOG.CHART.INCREMENT_CLIENT\", ctx)\r\n                    else\r\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\r\n                        return $translate.instant(\"BACKLOG.CHART.INCREMENT_TEAM\", ctx)\r\n            }\r\n        }\r\n\r\n        element.empty()\r\n        element.plot(data, options).data(\"plot\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        element = angular.element($el)\r\n\r\n        $scope.$watch \"stats\", (value) ->\r\n            if $scope.stats?\r\n                redrawChart(element, $scope.stats)\r\n\r\n                $scope.$on \"resize\", ->\r\n                    redrawChart(element, $scope.stats)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBurndownBacklogGraph\", [\"$translate\", BurndownBacklogGraphDirective])\r\n\r\n\r\n#############################################################################\r\n## Backlog progress bar directive\r\n#############################################################################\r\n\r\nTgBacklogProgressBarDirective = ($template, $compile) ->\r\n    template = $template.get(\"backlog/progress-bar.html\", true)\r\n\r\n    render = (scope, el, projectPointsPercentaje, closedPointsPercentaje) ->\r\n        html = template({\r\n            projectPointsPercentaje: projectPointsPercentaje,\r\n            closedPointsPercentaje:closedPointsPercentaje\r\n        })\r\n        html = $compile(html)(scope)\r\n        el.html(html)\r\n\r\n    adjustPercentaje = (percentage) ->\r\n        adjusted = _.max([0 , percentage])\r\n        adjusted = _.min([100, adjusted])\r\n        return Math.round(adjusted)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        element = angular.element($el)\r\n\r\n        $scope.$watch $attrs.tgBacklogProgressBar, (stats) ->\r\n            if stats?\r\n                totalPoints = if stats.total_points then stats.total_points else stats.defined_points\r\n                definedPoints = stats.defined_points\r\n                closedPoints = stats.closed_points\r\n                if definedPoints > totalPoints\r\n                    projectPointsPercentaje = totalPoints * 100 / definedPoints\r\n                    closedPointsPercentaje = closedPoints * 100 / definedPoints\r\n                else\r\n                    projectPointsPercentaje = 100\r\n                    closedPointsPercentaje = closedPoints * 100 / totalPoints\r\n\r\n                projectPointsPercentaje = adjustPercentaje(projectPointsPercentaje - 3)\r\n                closedPointsPercentaje = adjustPercentaje(closedPointsPercentaje - 3)\r\n                render($scope, $el, projectPointsPercentaje, closedPointsPercentaje)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBacklogProgressBar\", [\"$tgTemplate\", \"$compile\", TgBacklogProgressBarDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/backlog/sortable.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaBacklog\")\r\n\r\n#############################################################################\r\n## Sortable Directive\r\n#############################################################################\r\n\r\ndeleteElement = (el) ->\r\n    $(el).scope().$destroy()\r\n    $(el).off()\r\n    $(el).remove()\r\n\r\nBacklogSortableDirective = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, \"project\", (project) ->\r\n            # If the user has not enough permissions we don't enable the sortable\r\n            if not (project.my_permissions.indexOf(\"modify_us\") > -1)\r\n                return\r\n\r\n            initIsBacklog = false\r\n\r\n            drake = dragula([$el[0], $('.js-empty-backlog')[0]], {\r\n                copySortSource: false,\r\n                copy: false,\r\n                isContainer: (el) -> return el.classList.contains('sprint-table'),\r\n                moves: (item) ->\r\n                    if !$(item).hasClass('row')\r\n                        return false\r\n\r\n                    return true\r\n            })\r\n\r\n            drake.on 'drag', (item, container) ->\r\n                # it doesn't move is the filter is open\r\n                parent = $(item).parent()\r\n                initIsBacklog = parent.hasClass('backlog-table-body')\r\n\r\n                $(document.body).addClass(\"drag-active\")\r\n\r\n                isChecked = $(item).find(\"input[type='checkbox']\").is(\":checked\")\r\n\r\n                window.dragMultiple.start(item, container)\r\n\r\n            drake.on 'cloned', (item) ->\r\n                $(item).addClass('multiple-drag-mirror')\r\n\r\n            drake.on 'dragend', (item) ->\r\n                parent = $(item).parent()\r\n\r\n                $('.doom-line').remove()\r\n\r\n                parent = $(item).parent()\r\n\r\n                isBacklog = parent.hasClass('backlog-table-body') || parent.hasClass('js-empty-backlog')\r\n\r\n                if initIsBacklog || isBacklog\r\n                    sameContainer = (initIsBacklog == isBacklog)\r\n                else\r\n                    sameContainer = $(item).scope().sprint.id == parent.scope().sprint.id\r\n\r\n                dragMultipleItems = window.dragMultiple.stop()\r\n\r\n                $(document.body).removeClass(\"drag-active\")\r\n\r\n                sprint = null\r\n\r\n                firstElement = if dragMultipleItems.length then dragMultipleItems[0] else item\r\n\r\n                if isBacklog\r\n                    index = $(firstElement).index(\".backlog-table-body .row\")\r\n                else\r\n                    index = $(firstElement).index()\r\n                    sprint = parent.scope().sprint.id\r\n\r\n                if !sameContainer\r\n                    if dragMultipleItems.length\r\n                        usList = _.map dragMultipleItems, (item) ->\r\n                            return item = $(item).scope().us\r\n                    else\r\n                        usList = [$(item).scope().us]\r\n\r\n                    if (dragMultipleItems.length)\r\n                        _.each dragMultipleItems, (item) ->\r\n                            deleteElement(item)\r\n                    else\r\n                        deleteElement(item)\r\n                else\r\n                    if dragMultipleItems.length\r\n                        usList = _.map dragMultipleItems, (item) ->\r\n                            return item = $(item).scope().us\r\n                    else\r\n                        usList = [$(item).scope().us]\r\n\r\n                $scope.$emit(\"sprint:us:move\", usList, index, sprint)\r\n\r\n            scroll = autoScroll([window], {\r\n                margin: 20,\r\n                pixels: 30,\r\n                scrollWhenOutside: true,\r\n                autoScroll: () ->\r\n                    return this.down && drake.dragging\r\n            })\r\n\r\n            $scope.$on \"$destroy\", ->\r\n                $el.off()\r\n                drake.destroy()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBacklogSortable\", BacklogSortableDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/backlog/sprints.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmodule = angular.module(\"taigaBacklog\")\r\n\r\n\r\n#############################################################################\r\n## Sprint Actions Directive\r\n#############################################################################\r\n\r\nBacklogSprintDirective = ($repo, $rootscope) ->\r\n    sprintTableMinHeight = 50\r\n    slideOptions = {\r\n        duration: 500,\r\n        easing: 'linear'\r\n    }\r\n\r\n    toggleSprint = ($el) =>\r\n        sprintTable = $el.find(\".sprint-table\")\r\n        sprintArrow = $el.find(\".compact-sprint\")\r\n\r\n        sprintArrow.toggleClass('active')\r\n        sprintTable.toggleClass('open')\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$watch $attrs.tgBacklogSprint, (sprint) ->\r\n            sprint = $scope.$eval($attrs.tgBacklogSprint)\r\n\r\n            if sprint.closed\r\n                $el.addClass(\"sprint-closed\")\r\n            else\r\n                toggleSprint($el)\r\n\r\n        # Event Handlers\r\n        $el.on \"click\", \".sprint-name > .compact-sprint\", (event) ->\r\n            event.preventDefault()\r\n\r\n            toggleSprint($el)\r\n\r\n            $el.find(\".sprint-table\").slideToggle(slideOptions)\r\n\r\n        $el.on \"click\", \".edit-sprint\", (event) ->\r\n            event.preventDefault()\r\n\r\n            sprint = $scope.$eval($attrs.tgBacklogSprint)\r\n            $rootscope.$broadcast(\"sprintform:edit\", sprint)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBacklogSprint\", [\"$tgRepo\", \"$rootScope\", BacklogSprintDirective])\r\n\r\n\r\n#############################################################################\r\n## Sprint Header Directive\r\n#############################################################################\r\n\r\nBacklogSprintHeaderDirective = ($navUrls, $template, $compile, $translate) ->\r\n    template = $template.get(\"backlog/sprint-header.html\")\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        prettyDate = $translate.instant(\"BACKLOG.SPRINTS.DATE\")\r\n\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_milestone\") != -1\r\n\r\n        isVisible = ->\r\n            return $scope.project.my_permissions.indexOf(\"view_milestones\") != -1\r\n\r\n        render = (sprint) ->\r\n            taskboardUrl = $navUrls.resolve(\"project-taskboard\",\r\n                                            {project: $scope.project.slug, sprint: sprint.slug})\r\n\r\n            start = moment(sprint.estimated_start).format(prettyDate)\r\n            finish = moment(sprint.estimated_finish).format(prettyDate)\r\n\r\n            estimatedDateRange = \"#{start}-#{finish}\"\r\n\r\n            ctx = {\r\n                name: sprint.name\r\n                taskboardUrl: taskboardUrl\r\n                estimatedDateRange: estimatedDateRange\r\n                closedPoints: sprint.closed_points or 0\r\n                totalPoints: sprint.total_points or 0\r\n                isVisible: isVisible()\r\n                isEditable: isEditable()\r\n            }\r\n\r\n            templateScope = $scope.$new()\r\n\r\n            _.assign(templateScope, ctx)\r\n\r\n            compiledTemplate = $compile(template)(templateScope)\r\n            $el.html(compiledTemplate)\r\n\r\n        $scope.$watch \"sprint\", (sprint) ->\r\n            render(sprint)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n    }\r\n\r\nmodule.directive(\"tgBacklogSprintHeader\", [\"$tgNavUrls\", \"$tgTemplate\", \"$compile\", \"$translate\"\r\n                                           BacklogSprintHeaderDirective])\r\n\r\n\r\n#############################################################################\r\n## Toggle Closed Sprints Directive\r\n#############################################################################\r\n\r\nToggleExcludeClosedSprintsVisualization = ($rootscope, $loading, $translate) ->\r\n    excludeClosedSprints = true\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        # insert loading wrapper\r\n        loadingElm = $(\"<div>\")\r\n        $el.after(loadingElm)\r\n\r\n        currentLoading = null\r\n\r\n        # Event Handlers\r\n        $el.on \"click\", (event) ->\r\n            event.preventDefault()\r\n            excludeClosedSprints  = not excludeClosedSprints\r\n\r\n            currentLoading = $loading()\r\n                .target(loadingElm)\r\n                .start()\r\n\r\n            if excludeClosedSprints\r\n                $rootscope.$broadcast(\"backlog:unload-closed-sprints\")\r\n            else\r\n                $rootscope.$broadcast(\"backlog:load-closed-sprints\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $scope.$on \"closed-sprints:reloaded\", (ctx, sprints) =>\r\n            currentLoading.finish()\r\n\r\n            if sprints.length > 0\r\n                key = \"BACKLOG.SPRINTS.ACTION_HIDE_CLOSED_SPRINTS\"\r\n            else\r\n                key = \"BACKLOG.SPRINTS.ACTION_SHOW_CLOSED_SPRINTS\"\r\n\r\n            text = $translate.instant(key)\r\n\r\n            $el.find(\".text\").text(text)\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgBacklogToggleClosedSprintsVisualization\", [\"$rootScope\", \"$tgLoading\", \"$translate\",\r\n                                                               ToggleExcludeClosedSprintsVisualization])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/charts.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoggleText = @.taiga.toggleText\r\nscopeDefer = @.taiga.scopeDefer\r\nbindOnce = @.taiga.bindOnce\r\ngroupBy = @.taiga.groupBy\r\ntimeout = @.taiga.timeout\r\n\r\nmodule = angular.module(\"taigaTaskboard\")\r\n\r\n#############################################################################\r\n## Sprint burndown graph directive\r\n#############################################################################\r\n\r\nSprintGraphDirective = ($translate)->\r\n    redrawChart = (element, dataToDraw) ->\r\n        width = element.width()\r\n        element.height(240)\r\n\r\n        days = _.map(dataToDraw, (x) -> moment.utc(x.day))\r\n\r\n        data = []\r\n        data.unshift({\r\n            data: _.zip(days, _.map(dataToDraw, (d) -> d.optimal_points))\r\n            lines:\r\n                fillColor : \"rgba(120,120,120,0.2)\"\r\n        })\r\n        data.unshift({\r\n            data: _.zip(days, _.map(dataToDraw, (d) -> d.open_points))\r\n            lines:\r\n                fillColor : \"rgba(102,153,51,0.3)\"\r\n        })\r\n\r\n        options =\r\n            grid:\r\n                borderWidth: { top: 0, right: 1, left:0, bottom: 0 }\r\n                borderColor: '#ccc'\r\n                hoverable: true\r\n            xaxis:\r\n                tickSize: [1, \"day\"]\r\n                min: days[0]\r\n                max: _.last(days)\r\n                mode: \"time\"\r\n                daysNames: days\r\n                axisLabel: $translate.instant(\"TASKBOARD.CHARTS.XAXIS_LABEL\")\r\n                axisLabelUseCanvas: true\r\n                axisLabelFontSizePixels: 12\r\n                axisLabelFontFamily: 'Verdana, Arial, Helvetica, Tahoma, sans-serif'\r\n                axisLabelPadding: 5\r\n            yaxis:\r\n                min: 0\r\n                axisLabel: $translate.instant(\"TASKBOARD.CHARTS.YAXIS_LABEL\")\r\n                axisLabelUseCanvas: true\r\n                axisLabelFontSizePixels: 12\r\n                axisLabelFontFamily: 'Verdana, Arial, Helvetica, Tahoma, sans-serif'\r\n                axisLabelPadding: 5\r\n            series:\r\n                shadowSize: 0\r\n                lines:\r\n                    show: true\r\n                    fill: true\r\n                points:\r\n                    show: true\r\n                    fill: true\r\n                    radius: 4\r\n                    lineWidth: 2\r\n            colors: [\"rgba(102,153,51,1)\", \"rgba(120,120,120,0.2)\"]\r\n            tooltip: true\r\n            tooltipOpts:\r\n                content: (label, xval, yval, flotItem) ->\r\n                    formattedDate = moment(xval).format($translate.instant(\"TASKBOARD.CHARTS.DATE\"))\r\n                    roundedValue = Math.round(yval)\r\n\r\n                    if flotItem.seriesIndex == 1\r\n                        return $translate.instant(\"TASKBOARD.CHARTS.OPTIMAL\", {\r\n                            formattedDate: formattedDate,\r\n                            roundedValue: roundedValue\r\n                        })\r\n\r\n                    else\r\n                        return $translate.instant(\"TASKBOARD.CHARTS.REAL\", {\r\n                            formattedDate: formattedDate,\r\n                            roundedValue: roundedValue\r\n                        })\r\n\r\n        element.empty()\r\n        element.plot(data, options).data(\"plot\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        element = angular.element($el)\r\n\r\n        $scope.$on \"resize\", ->\r\n            redrawChart(element, $scope.stats.days) if $scope.stats\r\n\r\n        $scope.$on \"taskboard:graph:toggle-visibility\", ->\r\n            $el.parent().toggleClass('open')\r\n\r\n            # fix chart overflow\r\n            timeout(100, ->\r\n                redrawChart(element, $scope.stats.days) if $scope.stats\r\n            )\r\n\r\n        $scope.$watch 'stats', (value) ->\r\n            if not $scope.stats?\r\n                return\r\n            redrawChart(element, $scope.stats.days)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgSprintGraph\", [\"$translate\", SprintGraphDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\ntrim = @.taiga.trim\r\n\r\n\r\nmodule = angular.module(\"taigaTaskboard\")\r\n\r\n\r\nCreateBulkTasksDirective = ($repo, $rs, $rootscope, $loading, lightboxService, $model) ->\r\n    link = ($scope, $el, attrs) ->\r\n        $scope.form = {data: \"\", usId: null}\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            if not form.validate()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            data = $scope.form.data\r\n            projectId = $scope.projectId\r\n            sprintId = $scope.form.sprintId\r\n            usId = $scope.form.usId\r\n\r\n            promise = $rs.tasks.bulkCreate(projectId, sprintId, usId, data)\r\n            promise.then (result) ->\r\n                result =  _.map(result, (x) => $model.make_model('tasks', x))\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"taskform:bulk:success\", result)\r\n                lightboxService.close($el)\r\n\r\n            # TODO: error handling\r\n            promise.then null, ->\r\n                currentLoading.finish()\r\n\r\n        $scope.$on \"taskform:bulk\", (ctx, sprintId, usId)->\r\n            lightboxService.open($el)\r\n            $scope.form = {data: \"\", sprintId: sprintId, usId: usId}\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgLbCreateBulkTasks\", [\r\n    \"$tgRepo\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    \"$tgLoading\",\r\n    \"lightboxService\",\r\n    \"$tgModel\",\r\n    CreateBulkTasksDirective\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntoggleText = @.taiga.toggleText\r\nmixOf = @.taiga.mixOf\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nscopeDefer = @.taiga.scopeDefer\r\ntimeout = @.taiga.timeout\r\nbindMethods = @.taiga.bindMethods\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nmodule = angular.module(\"taigaTaskboard\")\r\n\r\n\r\n#############################################################################\r\n## Taskboard Controller\r\n#############################################################################\r\n\r\nclass TaskboardController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"tgResources\"\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"tgAppMetaService\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\"\r\n        \"$tgEvents\"\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgTaskboardTasks\",\r\n        \"tgTaskboardIssues\",\r\n        \"$tgStorage\",\r\n        \"tgFilterRemoteStorageService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @appMetaService, @location, @navUrls,\r\n                  @events, @analytics, @translate, @errorHandlingService, @taskboardTasksService,\r\n                  @taskboardIssuesService, @storage, @filterRemoteStorageService) ->\r\n        bindMethods(@)\r\n        @taskboardTasksService.reset()\r\n        @scope.userstories = []\r\n        @.openFilter = false\r\n\r\n        return if @.applyStoredFilters(@params.pslug, \"tasks-filters\")\r\n\r\n        @scope.sectionName = @translate.instant(\"TASKBOARD.SECTION_NAME\")\r\n        @.initializeEventHandlers()\r\n\r\n        taiga.defineImmutableProperty @.scope, \"usTasks\", () =>\r\n            return @taskboardTasksService.usTasks\r\n\r\n        taiga.defineImmutableProperty @.scope, \"milestoneIssues\", () =>\r\n            return @taskboardIssuesService.milestoneIssues\r\n\r\n    firstLoad: () ->\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then => @._setMeta()\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    setZoom: (zoomLevel, zoom) ->\r\n        if @.zoomLevel == zoomLevel\r\n            return null\r\n\r\n        @.isFirstLoad = !@.zoomLevel\r\n\r\n        previousZoomLevel = @.zoomLevel\r\n\r\n        @.zoomLevel = zoomLevel\r\n        @.zoom = zoom\r\n\r\n        if @.isFirstLoad\r\n            @.firstLoad().then () =>\r\n                @.isFirstLoad = false\r\n                @taskboardTasksService.resetFolds()\r\n\r\n        else if @.zoomLevel > 1 && previousZoomLevel <= 1\r\n            @.zoomLoading = true\r\n            @q.all([@.loadTasks(), @.loadIssues()]).then () =>\r\n                @.zoomLoading = false\r\n                @taskboardTasksService.resetFolds()\r\n\r\n        if @.zoomLevel == '0'\r\n            @rootscope.$broadcast(\"sprint:zoom0\")\r\n\r\n    changeQ: (q) ->\r\n        @.replaceFilter(\"q\", q)\r\n        @.loadTasks()\r\n        @.generateFilters()\r\n\r\n    removeFilter: (filter) ->\r\n        @.unselectFilter(filter.dataType, filter.id)\r\n        @.loadTasks()\r\n        @.generateFilters()\r\n\r\n    addFilter: (newFilter) ->\r\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id)\r\n        @.loadTasks()\r\n        @.generateFilters()\r\n\r\n    selectCustomFilter: (customFilter) ->\r\n        @.replaceAllFilters(customFilter.filter)\r\n        @.loadTasks()\r\n        @.generateFilters()\r\n\r\n    removeCustomFilter: (customFilter) ->\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters').then (userFilters) =>\r\n            delete userFilters[customFilter.id]\r\n\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, 'tasks-custom-filters').then(@.generateFilters)\r\n\r\n    isFilterDataTypeSelected: (filterDataType) ->\r\n        for filter in @.selectedFilters\r\n            if (filter['dataType'] == filterDataType)\r\n                return true\r\n        return false\r\n\r\n    saveCustomFilter: (name) ->\r\n        filters = {}\r\n        urlfilters = @location.search()\r\n        filters.tags = urlfilters.tags\r\n        filters.status = urlfilters.status\r\n        filters.assigned_to = urlfilters.assigned_to\r\n        filters.owner = urlfilters.owner\r\n        filters.role = urlfilters.role\r\n\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters').then (userFilters) =>\r\n            userFilters[name] = filters\r\n\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, 'tasks-custom-filters').then(@.generateFilters)\r\n\r\n    generateFilters: ->\r\n        @.storeFilters(@params.pslug, @location.search(), \"tasks-filters\")\r\n\r\n        urlfilters = @location.search()\r\n\r\n        loadFilters = {}\r\n        loadFilters.project = @scope.projectId\r\n        loadFilters.milestone = @scope.sprintId\r\n        loadFilters.tags = urlfilters.tags\r\n        loadFilters.status = urlfilters.status\r\n        loadFilters.assigned_to = urlfilters.assigned_to\r\n        loadFilters.owner = urlfilters.owner\r\n        loadFilters.role = urlfilters.role\r\n        loadFilters.q = urlfilters.q\r\n\r\n        return @q.all([\r\n            @rs.tasks.filtersData(loadFilters),\r\n            @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters')\r\n        ]).then (result) =>\r\n            data = result[0]\r\n            customFiltersRaw = result[1]\r\n\r\n            statuses = _.map data.statuses, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            tags = _.map data.tags, (it) ->\r\n                it.id = it.name\r\n\r\n                return it\r\n\r\n            tagsWithAtLeastOneElement = _.filter tags, (tag) ->\r\n                return tag.count > 0\r\n\r\n            assignedTo = _.map data.assigned_to, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.full_name || \"Unassigned\"\r\n\r\n                return it\r\n            role = _.map data.roles, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.name || \"Unassigned\"\r\n\r\n                return it\r\n            owner = _.map data.owners, (it) ->\r\n                it.id = it.id.toString()\r\n                it.name = it.full_name\r\n\r\n                return it\r\n\r\n            @.selectedFilters = []\r\n\r\n            if loadFilters.status\r\n                selected = @.formatSelectedFilters(\"status\", statuses, loadFilters.status)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.tags\r\n                selected = @.formatSelectedFilters(\"tags\", tags, loadFilters.tags)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.assigned_to\r\n                selected = @.formatSelectedFilters(\"assigned_to\", assignedTo, loadFilters.assigned_to)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.owner\r\n                selected = @.formatSelectedFilters(\"owner\", owner, loadFilters.owner)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.role\r\n                selected = @.formatSelectedFilters(\"role\", role, loadFilters.role)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            @.filterQ = loadFilters.q\r\n\r\n            @.filters = [\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\r\n                    dataType: \"status\",\r\n                    content: statuses\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\r\n                    dataType: \"tags\",\r\n                    content: tags,\r\n                    hideEmpty: true,\r\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_TO\"),\r\n                    dataType: \"assigned_to\",\r\n                    content: assignedTo\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\r\n                    dataType: \"role\",\r\n                    content: role\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\r\n                    dataType: \"owner\",\r\n                    content: owner\r\n                }\r\n            ]\r\n\r\n            @.customFilters = []\r\n            _.forOwn customFiltersRaw, (value, key) =>\r\n                @.customFilters.push({id: key, name: key, filter: value})\r\n\r\n    _setMeta: ->\r\n        prettyDate = @translate.instant(\"BACKLOG.SPRINTS.DATE\")\r\n\r\n        title = @translate.instant(\"TASKBOARD.PAGE_TITLE\", {\r\n            projectName: @scope.project.name\r\n            sprintName: @scope.sprint.name\r\n        })\r\n        description =  @translate.instant(\"TASKBOARD.PAGE_DESCRIPTION\", {\r\n            projectName: @scope.project.name\r\n            sprintName: @scope.sprint.name\r\n            startDate: moment(@scope.sprint.estimated_start).format(prettyDate)\r\n            endDate: moment(@scope.sprint.estimated_finish).format(prettyDate)\r\n            completedPercentage: @scope.stats.completedPercentage or \"0\"\r\n            completedPoints: @scope.stats.completedPointsSum or \"--\"\r\n            totalPoints: @scope.stats.totalPointsSum or \"--\"\r\n            openTasks: @scope.stats.openTasks or \"--\"\r\n            totalTasks: @scope.stats.total_tasks or \"--\"\r\n        })\r\n\r\n        @appMetaService.setAll(title, description)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"taskform:bulk:success\", (event, tasks) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardTasksService.add(tasks)\r\n\r\n            @analytics.trackEvent(\"task\", \"create\", \"bulk create task on taskboard\", 1)\r\n\r\n        @scope.$on \"taskform:new:success\", (event, task) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardTasksService.add(task)\r\n\r\n            @analytics.trackEvent(\"task\", \"create\", \"create task on taskboard\", 1)\r\n\r\n        @scope.$on \"taskform:edit:success\", (event, task) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardTasksService.replaceModel(task)\r\n\r\n        @scope.$on \"issueform:new:success\", (event, issue) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardIssuesService.add(issue)\r\n\r\n            @analytics.trackEvent(\"issue\", \"create\", \"create issue on taskboard\", 1)\r\n\r\n        @scope.$on \"issueform:add:success\", (event, issue) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardIssuesService.add(issue)\r\n\r\n        @scope.$on \"issueform:edit:success\", (event, issue) =>\r\n            @.refreshTagsColors().then () =>\r\n                @taskboardIssuesService.replaceModel(issue)\r\n\r\n        @scope.$on \"taskboard:task:deleted\", (event, task) =>\r\n            @.loadTasks()\r\n\r\n        @scope.$on \"taskboard:issue:deleted\", (event, issue) =>\r\n            @.loadIssues()\r\n\r\n        @scope.$on(\"taskboard:task:move\", @.taskMove)\r\n        @scope.$on(\"assigned-to:added\", @.onAssignedToChanged)\r\n\r\n        @scope.$on \"taskboard:items:move\", (event, itemsMoved) =>\r\n            if itemsMoved.uss\r\n                @.firstLoad()\r\n            else\r\n                @.loadTasks() if itemsMoved.tasks\r\n                @.loadIssues() if itemsMoved.issues\r\n\r\n    onAssignedToChanged: (ctx, userid, model) ->\r\n        if model.getName() == 'tasks'\r\n            model.assigned_to = userid\r\n            @taskboardTasksService.replaceModel(model)\r\n\r\n            @repo.save(model).then =>\r\n                @.generateFilters()\r\n                if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\r\n                    @.loadTasks()\r\n        if model.getName() == 'issues'\r\n            model.assigned_to = userid\r\n            @taskboardIssuesService.replaceModel(model)\r\n\r\n            @repo.save(model).then =>\r\n                @.generateFilters()\r\n                if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\r\n                    @.loadIssues()\r\n\r\n\r\n    initializeSubscription: ->\r\n        routingKey = \"changes.project.#{@scope.projectId}.tasks\"\r\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\r\n            @.loadTaskboard())\r\n\r\n        routingKey = \"changes.project.#{@scope.projectId}.issues\"\r\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\r\n            @.loadIssues())\r\n\r\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\r\n        @events.subscribe @scope, routingKey1, (message) =>\r\n            @.refreshTagsColors()\r\n            @.loadSprintStats()\r\n            @.loadSprint()\r\n\r\n    loadProject: ->\r\n        return @rs.projects.get(@scope.projectId).then (project) =>\r\n            if not project.is_backlog_activated\r\n                @errorHandlingService.permissionDenied()\r\n\r\n            @scope.project = project\r\n            # Not used at this momment\r\n            @scope.pointsList = _.sortBy(project.points, \"order\")\r\n            @scope.pointsById = groupBy(project.points, (e) -> e.id)\r\n            @scope.roleById = groupBy(project.roles, (e) -> e.id)\r\n            @scope.taskStatusList = _.sortBy(project.task_statuses, \"order\")\r\n            @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\r\n            @scope.usStatusById = groupBy(project.us_statuses, (e) -> e.id)\r\n            @scope.issueStatusById = groupBy(project.issue_statuses, (e) -> e.id)\r\n\r\n            @scope.$emit('project:loaded', project)\r\n\r\n            @.fillUsersAndRoles(project.members, project.roles)\r\n\r\n            return project\r\n\r\n    loadSprintStats: ->\r\n        return @rs.sprints.stats(@scope.projectId, @scope.sprintId).then (stats) =>\r\n            totalPointsSum =_.reduce(_.values(stats.total_points), ((res, n) -> res + n), 0)\r\n            completedPointsSum = _.reduce(_.values(stats.completed_points), ((res, n) -> res + n), 0)\r\n            remainingPointsSum = totalPointsSum - completedPointsSum\r\n            remainingTasks = stats.total_tasks - stats.completed_tasks\r\n            @scope.stats = stats\r\n            @scope.stats.totalPointsSum = totalPointsSum\r\n            @scope.stats.completedPointsSum = completedPointsSum\r\n            @scope.stats.remainingPointsSum = remainingPointsSum\r\n            @scope.stats.remainingTasks = remainingTasks\r\n            if stats.totalPointsSum\r\n                @scope.stats.completedPercentage = Math.round(100*stats.completedPointsSum/stats.totalPointsSum)\r\n            else\r\n                @scope.stats.completedPercentage = 0\r\n\r\n            @scope.stats.openTasks = stats.total_tasks - stats.completed_tasks\r\n            return stats\r\n\r\n    refreshTagsColors: ->\r\n        return @rs.projects.tagsColors(@scope.projectId).then (tags_colors) =>\r\n            @scope.project.tags_colors = tags_colors._attrs\r\n\r\n    loadSprint: ->\r\n        return @rs.sprints.get(@scope.projectId, @scope.sprintId).then (sprint) =>\r\n            @scope.sprint = sprint\r\n            @scope.userstories = _.sortBy(sprint.user_stories, \"sprint_order\")\r\n\r\n            @taskboardTasksService.setUserstories(@scope.userstories)\r\n\r\n            return sprint\r\n\r\n    loadIssues: ->\r\n        params = {}\r\n\r\n        if @.zoomLevel > 1\r\n            params.include_attachments = 1\r\n\r\n        params = _.merge params, @location.search()\r\n\r\n        return @rs.issues.listInProject(@scope.projectId, @scope.sprintId, params).then (issues) =>\r\n            @taskboardIssuesService.init(@scope.project, @scope.usersById, @scope.issueStatusById)\r\n            @taskboardIssuesService.set(issues)\r\n            @scope.taskBoardLoading = false\r\n\r\n    loadTasks: ->\r\n        params = {}\r\n\r\n        if @.zoomLevel > 1\r\n            params.include_attachments = 1\r\n\r\n        params = _.merge params, @location.search()\r\n        return @rs.tasks.list(@scope.projectId, @scope.sprintId, null, params).then (tasks) =>\r\n            @taskboardTasksService.init(@scope.project, @scope.usersById)\r\n            @taskboardTasksService.set(tasks)\r\n\r\n    loadTaskboard: ->\r\n        return @q.all([\r\n            @.refreshTagsColors(),\r\n            @.loadSprintStats(),\r\n            @.loadSprint().then(=>\r\n                @.loadTasks()\r\n                @.loadIssues()\r\n            )\r\n        ])\r\n\r\n    loadInitialData: ->\r\n        params = {\r\n            pslug: @params.pslug\r\n            sslug: @params.sslug\r\n        }\r\n\r\n        promise = @repo.resolve(params).then (data) =>\r\n            @scope.projectId = data.project\r\n            @scope.sprintId = data.milestone\r\n            @.initializeSubscription()\r\n            return data\r\n\r\n        return promise.then(=> @.loadProject())\r\n                      .then =>\r\n                          @.generateFilters()\r\n\r\n                          return @.loadTaskboard().then(=> @.setRolePoints())\r\n\r\n    showPlaceHolder: (statusId, usId) ->\r\n        if !@taskboardTasksService.tasksRaw.length\r\n            if @scope.taskStatusList[0].id == statusId &&\r\n              (!@scope.userstories.length || @scope.userstories[0].id == usId)\r\n                return true\r\n\r\n        return false\r\n\r\n    editTask: (id) ->\r\n        task = @.taskboardTasksService.getTask(id)\r\n\r\n        task = task.set('loading-edit', true)\r\n        @taskboardTasksService.replace(task)\r\n\r\n        @rs.tasks.getByRef(task.getIn(['model', 'project']), task.getIn(['model', 'ref']))\r\n        .then (editingTask) =>\r\n            @rs2.attachments.list(\"task\", task.get('id'), task.getIn(['model', 'project']))\r\n            .then (attachments) =>\r\n                @rootscope.$broadcast(\"genericform:edit\", {\r\n                    'objType': 'task',\r\n                    'obj': editingTask,\r\n                    'project': @scope.project,\r\n                    'sprintId': @scope.sprintId,\r\n                    'attachments': attachments.toJS()\r\n                })\r\n\r\n                task = task.set('loading-edit', false)\r\n                @taskboardTasksService.replace(task)\r\n\r\n    editIssue: (id) ->\r\n        issue = @.taskboardIssuesService.getIssue(id)\r\n        issue = issue.set('loading-edit', true)\r\n\r\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\r\n        .then (editingIssue) =>\r\n            @rs2.attachments.list(\"issue\", issue.get('id'), issue.getIn(['model', 'project']))\r\n            .then (attachments) =>\r\n                @rootscope.$broadcast(\"genericform:edit\", {\r\n                    'objType': 'issue',\r\n                    'obj': editingIssue,\r\n                    'project': @scope.project,\r\n                    'sprintId': @scope.sprintId,\r\n                    'attachments': attachments.toJS()\r\n                })\r\n                issue = issue.set('loading-edit', false)\r\n\r\n    deleteTask: (id) ->\r\n        task = @.taskboardTasksService.getTask(id)\r\n        task = task.set('loading-delete', true)\r\n\r\n        @rs.tasks.getByRef(task.getIn(['model', 'project']), task.getIn(['model', 'ref']))\r\n        .then (deletingTask) =>\r\n            task = task.set('loading-delete', false)\r\n            title = @translate.instant(\"TASK.TITLE_DELETE_ACTION\")\r\n            message = deletingTask.subject\r\n            @confirm.askOnDelete(title, message).then (askResponse) =>\r\n                promise = @repo.remove(deletingTask)\r\n                promise.then =>\r\n                    @scope.$broadcast(\"taskboard:task:deleted\")\r\n                    askResponse.finish()\r\n                promise.then null, ->\r\n                    askResponse.finish(false)\r\n                    @confirm.notify(\"error\")\r\n\r\n    deleteIssue: (id) ->\r\n        issue = @.taskboardIssuesService.getIssue(id)\r\n        issue = issue.set('loading-delete', true)\r\n\r\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\r\n        .then (deletingIssue) =>\r\n            issue = issue.set('loading-delete', false)\r\n            title = @translate.instant(\"ISSUES.ACTION_DELETE\")\r\n            message = deletingIssue.subject\r\n            @confirm.askOnDelete(title, message).then (askResponse) =>\r\n                promise = @repo.remove(deletingIssue)\r\n                promise.then =>\r\n                    @scope.$broadcast(\"taskboard:issue:deleted\")\r\n                    askResponse.finish()\r\n                promise.then null, ->\r\n                    askResponse.finish(false)\r\n                    @confirm.notify(\"error\")\r\n\r\n    removeIssueFromSprint: (id) ->\r\n        issue = @.taskboardIssuesService.getIssue(id)\r\n        issue = issue.set('loading-delete', true)\r\n\r\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\r\n        .then (removingIssue) =>\r\n            issue = issue.set('loading-delete', false)\r\n            title = @translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.TITLE\")\r\n            message = @translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\")\r\n            message = @translate.instant(\r\n                \"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\",\r\n                {sprintName: @scope.sprint.name}\r\n            )\r\n\r\n            @confirm.ask(title, null, message).then (askResponse) =>\r\n                removingIssue.milestone = null\r\n                promise = @repo.save(removingIssue)\r\n                promise.then =>\r\n                    @.taskboardIssuesService.remove(removingIssue)\r\n                    askResponse.finish()\r\n                promise.then null, ->\r\n                    askResponse.finish(false)\r\n                    @confirm.notify(\"error\")\r\n\r\n    taskMove: (ctx, task, oldStatusId, usId, statusId, order) ->\r\n        @scope.movingTask = true\r\n        task = @taskboardTasksService.getTaskModel(task.get('id'))\r\n\r\n        moveUpdateData = @taskboardTasksService.move(task.id, usId, statusId, order)\r\n\r\n        params = {\r\n            status__is_archived: false,\r\n            include_attachments: true,\r\n        }\r\n\r\n        options = {\r\n            headers: {\r\n                \"set-orders\": JSON.stringify(moveUpdateData.set_orders)\r\n            }\r\n        }\r\n\r\n        promise = @repo.save(task, true, params, options, true).then (result) =>\r\n            if result[0].user_story\r\n                @.reloadUserStory(result[0].user_story)\r\n\r\n            @scope.movingTask = false\r\n            headers = result[1]\r\n\r\n            if headers && headers['taiga-info-order-updated']\r\n                order = JSON.parse(headers['taiga-info-order-updated'])\r\n                @taskboardTasksService.assignOrders(order)\r\n\r\n            @.loadSprintStats()\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('status')\r\n                @.loadTasks()\r\n\r\n    reloadUserStory: (userStoryId) ->\r\n        @rs.userstories.get(@scope.project.id, userStoryId).then (us) =>\r\n            @scope.userstories = _.map(@scope.userstories, (x) -> if x.id == us.id then us else x)\r\n\r\n    ## Template actions\r\n    addNewTask: (type, us) ->\r\n        switch type\r\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new\",\r\n                {\r\n                    'objType': 'task',\r\n                    'project': @scope.project,\r\n                    'sprintId': @scope.sprintId,\r\n                    'usId': us?.id\r\n                })\r\n            when \"bulk\" then @rootscope.$broadcast(\"taskform:bulk\", @scope.sprintId, us?.id)\r\n\r\n    addNewIssue: (type, us) ->\r\n        switch type\r\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new-or-existing\",\r\n                {\r\n                    objType: 'issue',\r\n                    project: @scope.project,\r\n                    sprintId: @scope.sprintId,\r\n                    relatedField: 'milestone',\r\n                    relatedObjectId: @scope.sprintId,\r\n                    targetName: @scope.sprint.name,\r\n                })\r\n            when \"standard\" then @rootscope.$broadcast(\"taskform:new\", @scope.sprintId, us?.id)\r\n            when \"bulk\" then @rootscope.$broadcast(\"issueform:bulk\", @scope.projectId, @scope.sprintId)\r\n\r\n    toggleFold: (id,  modelName) ->\r\n        if modelName == 'issues'\r\n            @taskboardIssuesService.toggleFold(id)\r\n        else if modelName == 'tasks'\r\n            @taskboardTasksService.toggleFold(id)\r\n\r\n    changeTaskAssignedTo: (id) ->\r\n        task = @taskboardTasksService.getTaskModel(id)\r\n\r\n        @rootscope.$broadcast(\"assigned-to:add\", task)\r\n\r\n    changeIssueAssignedTo: (id) ->\r\n        issue = @taskboardIssuesService.getIssueModel(id)\r\n\r\n        @rootscope.$broadcast(\"assigned-to:add\", issue)\r\n\r\n    setRolePoints: () ->\r\n        computableRoles = _.filter(@scope.project.roles, \"computable\")\r\n\r\n        getRole = (roleId) =>\r\n            roleId = parseInt(roleId, 10)\r\n            return _.find computableRoles, (role) -> role.id == roleId\r\n\r\n        getPoint = (pointId) =>\r\n            poitnId = parseInt(pointId, 10)\r\n            return _.find @scope.project.points, (point) -> point.id == pointId\r\n\r\n        pointsByRole = _.reduce @scope.userstories, (result, us, key) =>\r\n            _.forOwn us.points, (pointId, roleId) ->\r\n                role = getRole(roleId)\r\n                point = getPoint(pointId)\r\n\r\n                if !result[role.id]\r\n                    result[role.id] = role\r\n                    result[role.id].points = 0\r\n\r\n                result[role.id].points += point.value\r\n\r\n            return result\r\n        , {}\r\n\r\n        @scope.pointsByRole = Object.keys(pointsByRole).map (key) -> return pointsByRole[key]\r\n\r\nmodule.controller(\"TaskboardController\", TaskboardController)\r\n\r\n\r\n#############################################################################\r\n## TaskboardDirective\r\n#############################################################################\r\n\r\nTaskboardDirective = ($rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        $el.on \"click\", \".toggle-analytics-visibility\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            target.toggleClass('active')\r\n            $rootscope.$broadcast(\"taskboard:graph:toggle-visibility\")\r\n\r\n        tableBodyDom = $el.find(\".taskboard-table-body\")\r\n        tableBodyDom.on \"scroll\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            tableHeaderDom = $el.find(\".taskboard-table-header .taskboard-table-inner\")\r\n            tableHeaderDom.css(\"left\", -1 * target.scrollLeft())\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgTaskboard\", [\"$rootScope\", TaskboardDirective])\r\n\r\n#############################################################################\r\n## Taskboard Squish Column Directive\r\n#############################################################################\r\n\r\nTaskboardSquishColumnDirective = (rs) ->\r\n    avatarWidth = 40\r\n    maxColumnWidth = 300\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"sprint:zoom0\", () =>\r\n            recalculateTaskboardWidth()\r\n\r\n        $scope.$on \"sprint:task:moved\", () =>\r\n            recalculateTaskboardWidth()\r\n\r\n        $scope.$watch \"usTasks\", () ->\r\n            if $scope.project\r\n                $scope.statusesFolded = rs.tasks.getStatusColumnModes($scope.project.id)\r\n                $scope.usFolded = rs.tasks.getUsRowModes($scope.project.id, $scope.sprintId)\r\n\r\n                recalculateTaskboardWidth()\r\n\r\n        $scope.foldStatus = (status) ->\r\n            $scope.statusesFolded[status.id] = !!!$scope.statusesFolded[status.id]\r\n            rs.tasks.storeStatusColumnModes($scope.projectId, $scope.statusesFolded)\r\n\r\n            recalculateTaskboardWidth()\r\n\r\n        $scope.foldUs = (rowId) ->\r\n            $scope.usFolded[rowId] = !!!$scope.usFolded[rowId]\r\n            rs.tasks.storeUsRowModes($scope.projectId, $scope.sprintId, $scope.usFolded)\r\n\r\n            recalculateTaskboardWidth()\r\n\r\n        getCeilWidth = (usId, statusId) =>\r\n            if usId\r\n                tasks = $scope.usTasks.getIn([usId.toString(), statusId.toString()]).size\r\n            else\r\n                tasks = $scope.usTasks.getIn(['null', statusId.toString()]).size\r\n\r\n            if $scope.statusesFolded[statusId]\r\n                if tasks and $scope.usFolded[usId]\r\n                    tasksMatrixSize = Math.round(Math.sqrt(tasks))\r\n                    width = avatarWidth * tasksMatrixSize\r\n                else\r\n                    width = avatarWidth\r\n\r\n                return width\r\n\r\n            return 0\r\n\r\n        setStatusColumnWidth = (statusId, width) =>\r\n            column = $el.find(\".squish-status-#{statusId}\")\r\n\r\n            if width\r\n                column.css('max-width', width)\r\n            else\r\n                if $scope.ctrl.zoomLevel == '0'\r\n                    column.css(\"max-width\", 148)\r\n                else\r\n                    column.css(\"max-width\", maxColumnWidth)\r\n\r\n        refreshTaskboardTableWidth = () =>\r\n            columnWidths = []\r\n\r\n            columns = $el.find(\".task-colum-name\")\r\n\r\n            columnWidths = _.map columns, (column) ->\r\n                return $(column).outerWidth(true)\r\n\r\n            totalWidth = _.reduce columnWidths, (total, width) ->\r\n                return total + width\r\n\r\n            $el.find('.taskboard-table-inner').css(\"width\", totalWidth)\r\n\r\n            issuesBoxWidth = $el.find('.issues-row .taskboard-row-title-box').outerWidth(true)\r\n            $el.find('.issues-row').css(\"width\", totalWidth - columnWidths.pop())\r\n\r\n            issueCardMaxWidth = if $scope.ctrl.zoomLevel == '0' then 128 else 280\r\n            $el.find('.issues-row .taskboard-cards-box .card').css(\"max-width\", issueCardMaxWidth)\r\n\r\n        recalculateStatusColumnWidth = (statusId) =>\r\n            #unassigned ceil\r\n            statusFoldedWidth = getCeilWidth(null, statusId)\r\n\r\n            _.forEach $scope.userstories, (us) ->\r\n                width = getCeilWidth(us.id, statusId)\r\n                statusFoldedWidth = width if width > statusFoldedWidth\r\n\r\n            setStatusColumnWidth(statusId, statusFoldedWidth)\r\n\r\n        recalculateTaskboardWidth = () =>\r\n            _.forEach $scope.taskStatusList, (status) ->\r\n                recalculateStatusColumnWidth(status.id)\r\n\r\n            refreshTaskboardTableWidth()\r\n\r\n            return\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgTaskboardSquishColumn\", [\"$tgResources\", TaskboardSquishColumnDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/sortable.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoggleText = @.taiga.toggleText\r\nscopeDefer = @.taiga.scopeDefer\r\nbindOnce = @.taiga.bindOnce\r\ngroupBy = @.taiga.groupBy\r\n\r\nmodule = angular.module(\"taigaBacklog\")\r\n\r\n\r\n#############################################################################\r\n## Sortable Directive\r\n#############################################################################\r\n\r\nTaskboardSortableDirective = ($repo, $rs, $rootscope, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        unwatch = $scope.$watch \"usTasks\", (usTasks) ->\r\n            return if !usTasks || !usTasks.size\r\n\r\n            unwatch()\r\n\r\n            if not ($scope.project.my_permissions.indexOf(\"modify_task\") > -1)\r\n                return\r\n\r\n            oldParentScope = null\r\n            newParentScope = null\r\n            itemEl = null\r\n            tdom = $el\r\n\r\n            filterError = ->\r\n                text = $translate.instant(\"BACKLOG.SORTABLE_FILTER_ERROR\")\r\n                $tgConfirm.notify(\"error\", text)\r\n\r\n            deleteElement = (itemEl) ->\r\n                # Completelly remove item and its scope from dom\r\n                itemEl.scope().$destroy()\r\n                itemEl.off()\r\n                itemEl.remove()\r\n\r\n            containers = _.map $el.find('.taskboard-column'), (item) ->\r\n                return item\r\n\r\n            drake = dragula(containers, {\r\n                copySortSource: false,\r\n                copy: false,\r\n                accepts: (el, target) -> return !$(target).hasClass('taskboard-row-title-box')\r\n                moves: (item) ->\r\n                    return $(item).is('tg-card')\r\n            })\r\n\r\n            drake.on 'drag', (item) ->\r\n                oldParentScope = $(item).parent().scope()\r\n\r\n                if $el.hasClass(\"active-filters\")\r\n                    filterError()\r\n\r\n                    setTimeout (() ->\r\n                        drake.cancel(true)\r\n                    ), 0\r\n\r\n                    return false\r\n\r\n            drake.on 'dragend', (item) ->\r\n                parentEl = $(item).parent()\r\n                itemEl = $(item)\r\n                itemTask = itemEl.scope().task\r\n                itemIndex = itemEl.index()\r\n                newParentScope = parentEl.scope()\r\n\r\n                oldUsId = if oldParentScope.us then oldParentScope.us.id else null\r\n                oldStatusId = oldParentScope.st.id\r\n                newUsId = if newParentScope.us then newParentScope.us.id else null\r\n                newStatusId = newParentScope.st.id\r\n\r\n                if newStatusId != oldStatusId or newUsId != oldUsId\r\n                    deleteElement(itemEl)\r\n\r\n                $scope.$apply ->\r\n                    $rootscope.$broadcast(\"taskboard:task:move\", itemTask, itemTask.getIn(['model', 'status']), newUsId, newStatusId, itemIndex)\r\n\r\n\r\n            scroll = autoScroll([$('.taskboard-table-body')[0]], {\r\n                margin: 100,\r\n                pixels: 30,\r\n                scrollWhenOutside: true,\r\n                autoScroll: () ->\r\n                    return this.down && drake.dragging\r\n            })\r\n\r\n            $scope.$on \"$destroy\", ->\r\n                $el.off()\r\n                drake.destroy()\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgTaskboardSortable\", [\r\n    \"$tgRepo\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    \"$translate\",\r\n    TaskboardSortableDirective\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/taskboard-issues.coffee\r\n###\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass TaskboardIssuesService extends taiga.Service\r\n    @.$inject = []\r\n    constructor: () ->\r\n        @.reset()\r\n\r\n    reset: () ->\r\n        @.foldStatusChanged = {}\r\n        @.issuesRaw = []\r\n\r\n    init: (project, usersById, issueStatusById) ->\r\n        @.issueStatusById = issueStatusById\r\n        @.project = project\r\n        @.usersById = usersById\r\n\r\n    resetFolds: () ->\r\n        @.foldStatusChanged = {}\r\n        @.refresh()\r\n\r\n    toggleFold: (issueId) ->\r\n        @.foldStatusChanged[issueId] = !@.foldStatusChanged[issueId]\r\n        @.refresh()\r\n\r\n    add: (issue) ->\r\n        @.issuesRaw = @.issuesRaw.concat(issue)\r\n        @.refresh()\r\n\r\n    remove: (issue) ->\r\n        for key, item of @.issuesRaw\r\n            if issue.id == item.id\r\n                @.issuesRaw.splice(key, 1)\r\n                @.refresh()\r\n                return\r\n\r\n    set: (issues) ->\r\n        @.issuesRaw = issues\r\n        @.refresh()\r\n\r\n    getIssue: (id) ->\r\n        return @.milestoneIssues.find (issue) -> return issue.get('id') == id\r\n\r\n    getIssueModel: (id) ->\r\n        return _.find @.issuesRaw, (issue) -> return issue.id == id\r\n\r\n    replaceModel: (issue) ->\r\n        @.issuesRaw = _.map @.issuesRaw, (item) ->\r\n            if issue.id == item.id\r\n                return issue\r\n            else\r\n                return item\r\n\r\n        @.refresh()\r\n\r\n    refresh: ->\r\n        issues = []\r\n        for issueModel in @.issuesRaw\r\n            issue = {}\r\n            issue.foldStatusChanged = @.foldStatusChanged[issueModel.id]\r\n            issue.model = issueModel.getAttrs()\r\n            issue.modelName = issueModel.getName()\r\n            issue.id = issueModel.id\r\n            issue.status = @.issueStatusById[issueModel.status]\r\n            issue.images = _.filter issue.model.attachments, (it) -> return !!it.thumbnail_card_url\r\n            issue.assigned_to = @.usersById[issueModel.assigned_to]\r\n            issue.colorized_tags = _.map issue.model.tags, (tag) ->\r\n                return {name: tag[0], color: tag[1]}\r\n\r\n            issues.push(issue)\r\n\r\n        @.milestoneIssues = Immutable.fromJS(issues)\r\n\r\nangular.module(\"taigaKanban\").service(\"tgTaskboardIssues\", TaskboardIssuesService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/taskboard/taskboard-tasks.coffee\r\n###\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass TaskboardTasksService extends taiga.Service\r\n    @.$inject = []\r\n    constructor: () ->\r\n        @.reset()\r\n\r\n    reset: () ->\r\n        @.tasksRaw = []\r\n        @.foldStatusChanged = {}\r\n        @.usTasks = Immutable.Map()\r\n\r\n    init: (project, usersById) ->\r\n        @.project = project\r\n        @.usersById = usersById\r\n\r\n    resetFolds: () ->\r\n        @.foldStatusChanged = {}\r\n        @.refresh()\r\n\r\n    toggleFold: (taskId) ->\r\n        @.foldStatusChanged[taskId] = !@.foldStatusChanged[taskId]\r\n        @.refresh()\r\n\r\n    add: (task) ->\r\n        @.tasksRaw = @.tasksRaw.concat(task)\r\n        @.refresh()\r\n\r\n    set: (tasks) ->\r\n        @.tasksRaw = tasks\r\n        @.refreshRawOrder()\r\n        @.refresh()\r\n\r\n    setUserstories: (userstories) ->\r\n        @.userstories = userstories\r\n\r\n    refreshRawOrder: () ->\r\n        @.order = {}\r\n\r\n        @.order[task.id] = task.taskboard_order for task in @.tasksRaw\r\n\r\n    assignOrders: (order) ->\r\n        order = _.invert(order)\r\n        @.order = _.assign(@.order, order)\r\n\r\n        @.refresh()\r\n\r\n    getTask: (id) ->\r\n        findedTask = null\r\n\r\n        @.usTasks.forEach (us) ->\r\n            us.forEach (status) ->\r\n                findedTask = status.find (task) -> return task.get('id') == id\r\n\r\n                return false if findedTask\r\n\r\n            return false if findedTask\r\n\r\n        return findedTask\r\n\r\n    replace: (task) ->\r\n        @.usTasks = @.usTasks.map (us) ->\r\n            return us.map (status) ->\r\n                findedIndex = status.findIndex (usItem) ->\r\n                    return usItem.get('id') == us.get('id')\r\n\r\n                if findedIndex != -1\r\n                    status = status.set(findedIndex, task)\r\n\r\n                return status\r\n\r\n    getTaskModel: (id) ->\r\n        return _.find @.tasksRaw, (task) -> return task.id == id\r\n\r\n    replaceModel: (task) ->\r\n        @.tasksRaw = _.map @.tasksRaw, (it) ->\r\n            if task.id == it.id\r\n                return task\r\n            else\r\n                return it\r\n\r\n        @.refresh()\r\n\r\n    move: (id, usId, statusId, index) ->\r\n        task = @.getTaskModel(id)\r\n\r\n        taskByUsStatus = _.filter @.tasksRaw, (task) =>\r\n            return task.status == statusId && task.user_story == usId\r\n\r\n        taskByUsStatus = _.sortBy taskByUsStatus, (it) => @.order[it.id]\r\n\r\n        taksWithoutMoved = _.filter taskByUsStatus, (it) => it.id != id\r\n        beforeDestination = _.slice(taksWithoutMoved, 0, index)\r\n        afterDestination = _.slice(taksWithoutMoved, index)\r\n\r\n        setOrders = {}\r\n\r\n        previous = beforeDestination[beforeDestination.length - 1]\r\n\r\n        previousWithTheSameOrder = _.filter beforeDestination, (it) =>\r\n            @.order[it.id] == @.order[previous.id]\r\n\r\n        if previousWithTheSameOrder.length > 1\r\n            for it in previousWithTheSameOrder\r\n                setOrders[it.id] = @.order[it.id]\r\n\r\n        if !previous\r\n            @.order[task.id] = 0\r\n        else if previous\r\n            @.order[task.id] = @.order[previous.id] + 1\r\n\r\n        for it, key in afterDestination\r\n            @.order[it.id] = @.order[task.id] + key + 1\r\n\r\n        task.status = statusId\r\n        task.user_story = usId\r\n        task.taskboard_order = @.order[task.id]\r\n\r\n        @.refresh()\r\n\r\n        return {\"task_id\": task.id, \"order\": @.order[task.id], \"set_orders\": setOrders}\r\n\r\n    refresh: ->\r\n        if !@.project\r\n            return\r\n\r\n        @.tasksRaw = _.sortBy @.tasksRaw, (it) => @.order[it.id]\r\n\r\n        tasks = @.tasksRaw\r\n        taskStatusList = _.sortBy(@.project.task_statuses, \"order\")\r\n\r\n        usTasks = {}\r\n\r\n        # Iterate over all userstories and\r\n        # null userstory for unassigned tasks\r\n        for us in _.union(@.userstories, [{id:null}])\r\n            usTasks[us.id] = {}\r\n            for status in taskStatusList\r\n                usTasks[us.id][status.id] = []\r\n\r\n        for taskModel in tasks\r\n            if usTasks[taskModel.user_story]? and usTasks[taskModel.user_story][taskModel.status]?\r\n                task = {}\r\n\r\n                model = taskModel.getAttrs()\r\n\r\n                task.foldStatusChanged = @.foldStatusChanged[taskModel.id]\r\n                task.model = model\r\n                task.images = _.filter model.attachments, (it) -> return !!it.thumbnail_card_url\r\n                task.id = taskModel.id\r\n                task.assigned_to = @.usersById[taskModel.assigned_to]\r\n                task.colorized_tags = _.map task.model.tags, (tag) =>\r\n                    return {name: tag[0], color: tag[1]}\r\n\r\n                usTasks[taskModel.user_story][taskModel.status].push(task)\r\n\r\n        @.usTasks = Immutable.fromJS(usTasks)\r\n\r\nangular.module(\"taigaKanban\").service(\"tgTaskboardTasks\", TaskboardTasksService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/kanban/kanban-usertories.coffee\r\n###\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass KanbanUserstoriesService extends taiga.Service\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.reset()\r\n\r\n    reset: () ->\r\n        @.userstoriesRaw = []\r\n        @.archivedStatus = []\r\n        @.statusHide = []\r\n        @.foldStatusChanged = {}\r\n        @.usByStatus = Immutable.Map()\r\n\r\n    init: (project, usersById) ->\r\n        @.project = project\r\n        @.usersById = usersById\r\n\r\n    resetFolds: () ->\r\n        @.foldStatusChanged = {}\r\n        @.refresh()\r\n\r\n    toggleFold: (usId) ->\r\n        @.foldStatusChanged[usId] = !@.foldStatusChanged[usId]\r\n        @.refresh()\r\n\r\n    set: (userstories) ->\r\n        @.userstoriesRaw = userstories\r\n        @.refreshRawOrder()\r\n        @.refresh()\r\n\r\n    add: (us) ->\r\n        @.userstoriesRaw = @.userstoriesRaw.concat(us)\r\n        @.refreshRawOrder()\r\n        @.refresh()\r\n\r\n    addArchivedStatus: (statusId) ->\r\n        @.archivedStatus.push(statusId)\r\n\r\n    isUsInArchivedHiddenStatus: (usId) ->\r\n        us = @.getUsModel(usId)\r\n\r\n        return @.archivedStatus.indexOf(us.status) != -1 &&\r\n            @.statusHide.indexOf(us.status) != -1\r\n\r\n    hideStatus: (statusId) ->\r\n        @.deleteStatus(statusId)\r\n        @.statusHide.push(statusId)\r\n\r\n    showStatus: (statusId) ->\r\n        _.remove @.statusHide, (it) -> return it == statusId\r\n\r\n    getStatus: (statusId) ->\r\n        return _.filter @.userstoriesRaw, (us) -> return us.status == statusId\r\n\r\n    deleteStatus: (statusId) ->\r\n        toDelete = _.filter @.userstoriesRaw, (us) -> return us.status == statusId\r\n        toDelete = _.map (it) -> return it.id\r\n\r\n        @.archived = _.difference(@.archived, toDelete)\r\n\r\n        @.userstoriesRaw = _.filter @.userstoriesRaw, (us) -> return us.status != statusId\r\n\r\n        @.refresh()\r\n\r\n    refreshRawOrder: () ->\r\n        @.order = {}\r\n\r\n        @.order[it.id] = it.kanban_order for it in @.userstoriesRaw\r\n\r\n    assignOrders: (order) ->\r\n        @.order = _.assign(@.order, order)\r\n\r\n        @.refresh()\r\n\r\n    move: (usList, statusId, index) ->\r\n\r\n        initialLength = usList.length\r\n\r\n        usByStatus = _.filter @.userstoriesRaw, (it) =>\r\n            return it.status == statusId\r\n\r\n        usByStatus = _.sortBy usByStatus, (it) => @.order[it.id]\r\n\r\n        usByStatusWithoutMoved = _.filter usByStatus, (listIt) ->\r\n            return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\r\n\r\n        beforeDestination = _.slice(usByStatusWithoutMoved, 0, index)\r\n        afterDestination = _.slice(usByStatusWithoutMoved, index)\r\n\r\n        setOrders = {}\r\n\r\n        previous = beforeDestination[beforeDestination.length - 1]\r\n\r\n        previousWithTheSameOrder = _.filter beforeDestination, (it) =>\r\n            @.order[it.id] == @.order[previous.id]\r\n\r\n\r\n        if previousWithTheSameOrder.length > 1\r\n            for it in previousWithTheSameOrder\r\n                setOrders[it.id] = @.order[it.id]\r\n\r\n        modifiedUs = []\r\n        setPreviousOrders = []\r\n        setNextOrders = []\r\n\r\n        isArchivedHiddenStatus = @.archivedStatus.indexOf(statusId) != -1 &&\r\n            @.statusHide.indexOf(statusId) != -1\r\n\r\n        if isArchivedHiddenStatus\r\n            startIndex = new Date().getTime()\r\n\r\n        else if !previous\r\n            startIndex = 0\r\n\r\n            for it, key in afterDestination # increase position of the us after the dragged us's\r\n                @.order[it.id] = key + initialLength + 1\r\n                it.kanban_order = @.order[it.id]\r\n\r\n            setNextOrders = _.map(afterDestination, (it) =>\r\n                {us_id: it.id, order: @.order[it.id]}\r\n            )\r\n\r\n        else if previous\r\n            startIndex = @.order[previous.id] + 1\r\n\r\n            previousWithTheSameOrder = _.filter(beforeDestination, (it) =>\r\n                it.kanban_order == @.order[previous.id]\r\n            )\r\n            for it, key in afterDestination # increase position of the us after the dragged us's\r\n                @.order[it.id] = @.order[previous.id] + key + initialLength + 1\r\n                it.kanban_order = @.order[it.id]\r\n\r\n            setNextOrders = _.map(afterDestination, (it) =>\r\n                {us_id: it.id, order: @.order[it.id]}\r\n            )\r\n\r\n            # we must send the USs previous to the dropped USs to tell the backend\r\n            # which USs are before the dropped USs, if they have the same value to\r\n            # order, the backend doens't know after which one do you want to drop\r\n            # the USs\r\n            if previousWithTheSameOrder.length > 1\r\n                setPreviousOrders = _.map(previousWithTheSameOrder, (it) =>\r\n                    {us_id: it.id, order: @.order[it.id]}\r\n                )\r\n\r\n        for us, key in usList\r\n            us.status = statusId\r\n            us.kanban_order = startIndex + key\r\n            @.order[us.id] = us.kanban_order\r\n\r\n            modifiedUs.push({us_id: us.id, order: us.kanban_order})\r\n\r\n        @.refresh()\r\n\r\n        return {\r\n            bulkOrders: modifiedUs.concat(setPreviousOrders, setNextOrders),\r\n            usList: modifiedUs,\r\n            set_orders: setOrders\r\n        }\r\n\r\n    moveToEnd: (id, statusId) ->\r\n        us = @.getUsModel(id)\r\n\r\n        @.order[us.id] = -1\r\n\r\n        us.status = statusId\r\n        us.kanban_order = @.order[us.id]\r\n\r\n        @.refresh()\r\n\r\n        return {\"us_id\": us.id, \"order\": -1}\r\n\r\n    replace: (us) ->\r\n        @.usByStatus = @.usByStatus.map (status) ->\r\n            findedIndex = status.findIndex (usItem) ->\r\n                return usItem.get('id') == us.get('id')\r\n\r\n            if findedIndex != -1\r\n                status = status.set(findedIndex, us)\r\n\r\n            return status\r\n\r\n    replaceModel: (us) ->\r\n        @.userstoriesRaw = _.map @.userstoriesRaw, (usItem) ->\r\n            if us.id == usItem.id\r\n                return us\r\n            else\r\n                return usItem\r\n\r\n        @.refresh()\r\n\r\n    getUs: (id) ->\r\n        findedUs = null\r\n\r\n        @.usByStatus.forEach (status) ->\r\n            findedUs = status.find (us) -> return us.get('id') == id\r\n\r\n            return false if findedUs\r\n\r\n        return findedUs\r\n\r\n    getUsModel: (id) ->\r\n        return _.find @.userstoriesRaw, (us) -> return us.id == id\r\n\r\n    refresh: ->\r\n        @.userstoriesRaw = _.sortBy @.userstoriesRaw, (it) => @.order[it.id]\r\n\r\n        userstories = @.userstoriesRaw\r\n        userstories = _.map userstories, (usModel) =>\r\n            us = {}\r\n\r\n            model = usModel.getAttrs()\r\n\r\n            us.foldStatusChanged = @.foldStatusChanged[usModel.id]\r\n\r\n            us.model = model\r\n            us.images = _.filter model.attachments, (it) -> return !!it.thumbnail_card_url\r\n\r\n            us.id = usModel.id\r\n            us.assigned_to = @.usersById[usModel.assigned_to]\r\n            us.assigned_users = []\r\n\r\n            usModel.assigned_users.forEach (assignedUserId) =>\r\n                assignedUserData = @.usersById[assignedUserId]\r\n                us.assigned_users.push(assignedUserData)\r\n\r\n            us.colorized_tags = _.map us.model.tags, (tag) =>\r\n                return {name: tag[0], color: tag[1]}\r\n\r\n            return us\r\n\r\n        usByStatus = _.groupBy userstories, (us) ->\r\n            return us.model.status\r\n\r\n        @.usByStatus = Immutable.fromJS(usByStatus)\r\n\r\nangular.module(\"taigaKanban\").service(\"tgKanbanUserstories\", KanbanUserstoriesService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/kanban/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoggleText = @.taiga.toggleText\r\nscopeDefer = @.taiga.scopeDefer\r\nbindOnce = @.taiga.bindOnce\r\ngroupBy = @.taiga.groupBy\r\ntimeout = @.taiga.timeout\r\nbindMethods = @.taiga.bindMethods\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nmodule = angular.module(\"taigaKanban\")\r\n\r\n#############################################################################\r\n## Kanban Controller\r\n#############################################################################\r\n\r\nclass KanbanController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin, taiga.UsFiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgEvents\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"$tgModel\",\r\n        \"tgKanbanUserstories\",\r\n        \"$tgStorage\",\r\n        \"tgFilterRemoteStorageService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    storeCustomFiltersName: 'kanban-custom-filters'\r\n    storeFiltersName: 'kanban-filters'\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @location,\r\n                  @appMetaService, @navUrls, @events, @analytics, @translate, @errorHandlingService,\r\n                  @model, @kanbanUserstoriesService, @storage, @filterRemoteStorageService, @projectService) ->\r\n        bindMethods(@)\r\n        @kanbanUserstoriesService.reset()\r\n        @.openFilter = false\r\n        @.selectedUss = {}\r\n\r\n        return if @.applyStoredFilters(@params.pslug, \"kanban-filters\")\r\n\r\n        @scope.sectionName = @translate.instant(\"KANBAN.SECTION_NAME\")\r\n        @.initializeEventHandlers()\r\n\r\n        taiga.defineImmutableProperty @.scope, \"usByStatus\", () =>\r\n            return @kanbanUserstoriesService.usByStatus\r\n\r\n    cleanSelectedUss: () ->\r\n        for key of @.selectedUss\r\n            @.selectedUss[key] = false\r\n\r\n    toggleSelectedUs: (usId) ->\r\n        @.selectedUss[usId] = !@.selectedUss[usId]\r\n\r\n    firstLoad: () ->\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            title = @translate.instant(\"KANBAN.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @translate.instant(\"KANBAN.PAGE_DESCRIPTION\", {\r\n                projectName: @scope.project.name,\r\n                projectDescription: @scope.project.description\r\n            })\r\n            @appMetaService.setAll(title, description)\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    setZoom: (zoomLevel, zoom) ->\r\n        if @.zoomLevel == zoomLevel\r\n            return null\r\n\r\n        @.isFirstLoad = !@.zoomLevel\r\n\r\n        previousZoomLevel = @.zoomLevel\r\n\r\n        @.zoomLevel = zoomLevel\r\n        @.zoom = zoom\r\n\r\n        if @.isFirstLoad\r\n            @.firstLoad().then () =>\r\n                @.isFirstLoad = false\r\n                @kanbanUserstoriesService.resetFolds()\r\n\r\n        else if @.zoomLevel > 1 && previousZoomLevel <= 1\r\n            @.zoomLoading = true\r\n\r\n            @.loadUserstories().then () =>\r\n                @.zoomLoading = false\r\n                @kanbanUserstoriesService.resetFolds()\r\n\r\n    filtersReloadContent: () ->\r\n        @.loadUserstories().then () =>\r\n            openArchived = _.difference(@kanbanUserstoriesService.archivedStatus,\r\n                                        @kanbanUserstoriesService.statusHide)\r\n            if openArchived.length\r\n                for statusId in openArchived\r\n                    @.loadUserStoriesForStatus({}, statusId)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"usform:new:success\", (event, us) =>\r\n            @.refreshTagsColors().then () =>\r\n                @kanbanUserstoriesService.add(us)\r\n\r\n            @analytics.trackEvent(\"userstory\", \"create\", \"create userstory on kanban\", 1)\r\n\r\n        @scope.$on \"usform:bulk:success\", (event, uss) =>\r\n            @.refreshTagsColors().then () =>\r\n                @kanbanUserstoriesService.add(uss)\r\n\r\n            @analytics.trackEvent(\"userstory\", \"create\", \"bulk create userstory on kanban\", 1)\r\n\r\n        @scope.$on \"usform:edit:success\", (event, us) =>\r\n            @.refreshTagsColors().then () =>\r\n                @kanbanUserstoriesService.replaceModel(us)\r\n\r\n        @scope.$on \"kanban:us:deleted\", (event, us) =>\r\n            @.filtersReloadContent()\r\n\r\n        @scope.$on(\"assigned-to:added\", @.onAssignedToChanged)\r\n        @scope.$on(\"assigned-user:added\", @.onAssignedUsersChanged)\r\n        @scope.$on(\"assigned-user:deleted\", @.onAssignedUsersDeleted)\r\n        @scope.$on(\"kanban:us:move\", @.moveUs)\r\n        @scope.$on(\"kanban:show-userstories-for-status\", @.loadUserStoriesForStatus)\r\n        @scope.$on(\"kanban:hide-userstories-for-status\", @.hideUserStoriesForStatus)\r\n\r\n    addNewUs: (type, statusId) ->\r\n        switch type\r\n            when \"standard\" then  @rootscope.$broadcast(\"genericform:new\",\r\n                {\r\n                    'objType': 'us',\r\n                    'project': @scope.project,\r\n                    'statusId': statusId\r\n                })\r\n            when \"bulk\" then @rootscope.$broadcast(\"usform:bulk\",\r\n                                                   @scope.projectId, statusId)\r\n\r\n    editUs: (id) ->\r\n        us = @kanbanUserstoriesService.getUs(id)\r\n        us = us.set('loading-edit', true)\r\n        @kanbanUserstoriesService.replace(us)\r\n\r\n        @rs.userstories.getByRef(us.getIn(['model', 'project']), us.getIn(['model', 'ref']))\r\n        .then (editingUserStory) =>\r\n            @rs2.attachments.list(\r\n                \"us\", us.get('id'), us.getIn(['model', 'project'])).then (attachments) =>\r\n                    @rootscope.$broadcast(\"genericform:edit\", {\r\n                        'objType': 'us',\r\n                        'obj': editingUserStory,\r\n                        'statusList': @scope.usStatusList,\r\n                        'attachments': attachments.toJS()\r\n                    })\r\n\r\n                us = us.set('loading-edit', false)\r\n                @kanbanUserstoriesService.replace(us)\r\n\r\n    deleteUs: (id) ->\r\n        us = @kanbanUserstoriesService.getUs(id)\r\n        us = us.set('loading-delete', true)\r\n\r\n        @rs.userstories.getByRef(us.getIn(['model', 'project']), us.getIn(['model', 'ref']))\r\n        .then (deletingUserStory) =>\r\n            us = us.set('loading-delete', false)\r\n            title = @translate.instant(\"US.TITLE_DELETE_ACTION\")\r\n            message = deletingUserStory.subject\r\n            @confirm.askOnDelete(title, message).then (askResponse) =>\r\n                promise = @repo.remove(deletingUserStory)\r\n                promise.then =>\r\n                    @scope.$broadcast(\"kanban:us:deleted\")\r\n                    askResponse.finish()\r\n                promise.then null, ->\r\n                    askResponse.finish(false)\r\n                    @confirm.notify(\"error\")\r\n\r\n    showPlaceHolder: (statusId) ->\r\n        if @scope.usStatusList[0].id == statusId &&\r\n          !@kanbanUserstoriesService.userstoriesRaw.length\r\n            return true\r\n\r\n        return false\r\n\r\n    toggleFold: (id) ->\r\n        @kanbanUserstoriesService.toggleFold(id)\r\n\r\n    isUsInArchivedHiddenStatus: (usId) ->\r\n        return @kanbanUserstoriesService.isUsInArchivedHiddenStatus(usId)\r\n\r\n    changeUsAssignedTo: (id) ->\r\n        us = @kanbanUserstoriesService.getUsModel(id)\r\n\r\n        @rootscope.$broadcast(\"assigned-to:add\", us)\r\n\r\n    changeUsAssignedUsers: (id) ->\r\n        us = @kanbanUserstoriesService.getUsModel(id)\r\n        @rootscope.$broadcast(\"assigned-user:add\", us)\r\n\r\n    onAssignedToChanged: (ctx, userid, usModel) ->\r\n        usModel.assigned_to = userid\r\n\r\n        @kanbanUserstoriesService.replaceModel(usModel)\r\n\r\n        @repo.save(usModel).then =>\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\r\n                @.filtersReloadContent()\r\n\r\n    onAssignedUsersChanged: (ctx, userid, usModel) ->\r\n        assignedUsers = _.clone(usModel.assigned_users, false)\r\n        assignedUsers.push(userid)\r\n        assignedUsers = _.uniq(assignedUsers)\r\n        usModel.assigned_users = assignedUsers\r\n        if not usModel.assigned_to\r\n            usModel.assigned_to = userid\r\n        @kanbanUserstoriesService.replaceModel(usModel)\r\n\r\n        @repo.save(usModel).then =>\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('assigned_users') || @.isFilterDataTypeSelected('role')\r\n                @.filtersReloadContent()\r\n\r\n    onAssignedUsersDeleted: (ctx, userid, usModel) ->\r\n        assignedUsersIds = _.clone(usModel.assigned_users, false)\r\n        assignedUsersIds = _.pull(assignedUsersIds, userid)\r\n        assignedUsersIds = _.uniq(assignedUsersIds)\r\n        usModel.assigned_users = assignedUsersIds\r\n\r\n        # Update as\r\n        if usModel.assigned_to not in assignedUsersIds and assignedUsersIds.length > 0\r\n            usModel.assigned_to = assignedUsersIds[0]\r\n        if assignedUsersIds.length == 0\r\n            usModel.assigned_to = null\r\n\r\n        @kanbanUserstoriesService.replaceModel(usModel)\r\n\r\n        @repo.save(usModel).then =>\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('assigned_users') || @.isFilterDataTypeSelected('role')\r\n                @.filtersReloadContent()\r\n\r\n    refreshTagsColors: ->\r\n        return @rs.projects.tagsColors(@scope.projectId).then (tags_colors) =>\r\n            @scope.project.tags_colors = tags_colors._attrs\r\n\r\n    loadUserstories: () ->\r\n        params = {\r\n            status__is_archived: false\r\n        }\r\n\r\n        if @.zoomLevel > 1\r\n            params.include_attachments = 1\r\n            params.include_tasks = 1\r\n\r\n        params = _.merge params, @location.search()\r\n\r\n        promise = @rs.userstories.listAll(@scope.projectId, params).then (userstories) =>\r\n            @kanbanUserstoriesService.init(@scope.project, @scope.usersById)\r\n            @kanbanUserstoriesService.set(userstories)\r\n\r\n            # The broadcast must be executed when the DOM has been fully reloaded.\r\n            # We can't assure when this exactly happens so we need a defer\r\n            scopeDefer @scope, =>\r\n                @scope.$broadcast(\"userstories:loaded\", userstories)\r\n\r\n            return userstories\r\n\r\n        promise.then( => @scope.$broadcast(\"redraw:wip\"))\r\n\r\n        return promise\r\n\r\n    loadUserStoriesForStatus: (ctx, statusId) ->\r\n        filteredStatus = @location.search().status\r\n\r\n        # if there are filters applied the action doesn't end if the statusId is not in the url\r\n        if filteredStatus\r\n            filteredStatus = filteredStatus.split(\",\").map (it) -> parseInt(it, 10)\r\n\r\n            return if filteredStatus.indexOf(statusId) == -1\r\n\r\n        params = {\r\n            status: statusId\r\n            include_attachments: true,\r\n            include_tasks: true\r\n        }\r\n\r\n        params = _.merge params, @location.search()\r\n\r\n        return @rs.userstories.listAll(@scope.projectId, params).then (userstories) =>\r\n            @scope.$broadcast(\"kanban:shown-userstories-for-status\", statusId, userstories)\r\n\r\n            return userstories\r\n\r\n    hideUserStoriesForStatus: (ctx, statusId) ->\r\n        @scope.$broadcast(\"kanban:hidden-userstories-for-status\", statusId)\r\n\r\n    loadKanban: ->\r\n        return @q.all([\r\n            @.refreshTagsColors(),\r\n            @.loadUserstories()\r\n        ])\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.is_kanban_activated\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.projectId = project.id\r\n        @scope.points = _.sortBy(project.points, \"order\")\r\n        @scope.pointsById = groupBy(project.points, (x) -> x.id)\r\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\r\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\r\n\r\n        @scope.$emit(\"project:loaded\", project)\r\n        return project\r\n\r\n    initializeSubscription: ->\r\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\r\n        randomTimeout = taiga.randomInt(700, 1000)\r\n        @events.subscribe @scope, routingKey1, debounceLeading(randomTimeout, (message) =>\r\n            @.loadUserstories())\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.initializeSubscription()\r\n        @.loadKanban()\r\n        @.generateFilters()\r\n\r\n    # Utils methods\r\n\r\n    prepareBulkUpdateData: (uses, field=\"kanban_order\") ->\r\n        return _.map(uses, (x) -> {\"us_id\": x.id, \"order\": x[field]})\r\n\r\n    moveUs: (ctx, usList, newStatusId, index) ->\r\n        @.cleanSelectedUss()\r\n\r\n        usList = _.map usList, (us) =>\r\n            return @kanbanUserstoriesService.getUsModel(us.id)\r\n\r\n        data = @kanbanUserstoriesService.move(usList, newStatusId, index)\r\n\r\n        promise = @rs.userstories.bulkUpdateKanbanOrder(@scope.projectId, newStatusId, data.bulkOrders)\r\n\r\n        promise.then () =>\r\n            # saving\r\n            # drag single or different status\r\n            options = {\r\n                headers: {\r\n                    \"set-orders\": JSON.stringify(data.setOrders)\r\n                }\r\n            }\r\n\r\n            params = {\r\n                include_attachments: true,\r\n                include_tasks: true\r\n            }\r\n\r\n            promises = _.map usList, (us) =>\r\n                @repo.save(us, true, params, options, true)\r\n\r\n            promise = @q.all(promises)\r\n\r\n            promise.then (result) =>\r\n                headers = result[1]\r\n\r\n                if headers && headers['taiga-info-order-updated']\r\n                    order = JSON.parse(headers['taiga-info-order-updated'])\r\n                    @kanbanUserstoriesService.assignOrders(order)\r\n                @scope.$broadcast(\"redraw:wip\")\r\n\r\n                @.generateFilters()\r\n                if @.isFilterDataTypeSelected('status')\r\n                    @.filtersReloadContent()\r\n\r\n                return promise\r\n\r\n\r\nmodule.controller(\"KanbanController\", KanbanController)\r\n\r\n#############################################################################\r\n## Kanban Directive\r\n#############################################################################\r\n\r\nKanbanDirective = ($repo, $rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        tableBodyDom = $el.find(\".kanban-table-body\")\r\n\r\n        tableBodyDom.on \"scroll\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            tableHeaderDom = $el.find(\".kanban-table-header .kanban-table-inner\")\r\n            tableHeaderDom.css(\"left\", -1 * target.scrollLeft())\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgKanban\", [\"$tgRepo\", \"$rootScope\", KanbanDirective])\r\n\r\n#############################################################################\r\n## Kanban Archived Status Column Header Control\r\n#############################################################################\r\n\r\nKanbanArchivedStatusHeaderDirective = ($rootscope, $translate, kanbanUserstoriesService) ->\r\n    showArchivedText = $translate.instant(\"KANBAN.ACTION_SHOW_ARCHIVED\")\r\n    hideArchivedText = $translate.instant(\"KANBAN.ACTION_HIDE_ARCHIVED\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        status = $scope.$eval($attrs.tgKanbanArchivedStatusHeader)\r\n        hidden = true\r\n\r\n        kanbanUserstoriesService.addArchivedStatus(status.id)\r\n        kanbanUserstoriesService.hideStatus(status.id)\r\n\r\n        $scope.class = \"icon-watch\"\r\n        $scope.title = showArchivedText\r\n\r\n        $el.on \"click\", (event) ->\r\n            hidden = not hidden\r\n\r\n            $scope.$apply ->\r\n                if hidden\r\n                    $scope.class = \"icon-watch\"\r\n                    $scope.title = showArchivedText\r\n                    $rootscope.$broadcast(\"kanban:hide-userstories-for-status\", status.id)\r\n\r\n                    kanbanUserstoriesService.hideStatus(status.id)\r\n                else\r\n                    $scope.class = \"icon-unwatch\"\r\n                    $scope.title = hideArchivedText\r\n                    $rootscope.$broadcast(\"kanban:show-userstories-for-status\", status.id)\r\n\r\n                    kanbanUserstoriesService.showStatus(status.id)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgKanbanArchivedStatusHeader\", [ \"$rootScope\", \"$translate\", \"tgKanbanUserstories\", KanbanArchivedStatusHeaderDirective])\r\n\r\n\r\n#############################################################################\r\n## Kanban Archived Status Column Intro Directive\r\n#############################################################################\r\n\r\nKanbanArchivedStatusIntroDirective = ($translate, kanbanUserstoriesService) ->\r\n    userStories = []\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        hiddenUserStoriexText = $translate.instant(\"KANBAN.HIDDEN_USER_STORIES\")\r\n        status = $scope.$eval($attrs.tgKanbanArchivedStatusIntro)\r\n        $el.text(hiddenUserStoriexText)\r\n\r\n        updateIntroText = (hasArchived) ->\r\n            if hasArchived\r\n                $el.text(\"\")\r\n            else\r\n                $el.text(hiddenUserStoriexText)\r\n\r\n        $scope.$on \"kanban:us:move\", (ctx, itemUs, oldStatusId, newStatusId, itemIndex) ->\r\n            hasArchived = !!kanbanUserstoriesService.getStatus(newStatusId).length\r\n            updateIntroText(hasArchived)\r\n\r\n        $scope.$on \"kanban:shown-userstories-for-status\", (ctx, statusId, userStoriesLoaded) ->\r\n            if statusId == status.id\r\n                kanbanUserstoriesService.deleteStatus(statusId)\r\n                kanbanUserstoriesService.add(userStoriesLoaded)\r\n\r\n                hasArchived = !!kanbanUserstoriesService.getStatus(statusId).length\r\n                updateIntroText(hasArchived)\r\n\r\n        $scope.$on \"kanban:hidden-userstories-for-status\", (ctx, statusId) ->\r\n            if statusId == status.id\r\n                updateIntroText(false)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgKanbanArchivedStatusIntro\", [\"$translate\", \"tgKanbanUserstories\", KanbanArchivedStatusIntroDirective])\r\n\r\n#############################################################################\r\n## Kanban Squish Column Directive\r\n#############################################################################\r\n\r\nKanbanSquishColumnDirective = (rs, projectService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.foldStatus = (status) ->\r\n            $scope.folds[status.id] = !!!$scope.folds[status.id]\r\n            rs.kanban.storeStatusColumnModes($scope.projectId, $scope.folds)\r\n            updateTableWidth()\r\n            return\r\n\r\n        updateTableWidth = ->\r\n            columnWidths = _.map $scope.usStatusList, (status) ->\r\n                if $scope.folds[status.id]\r\n                    return 40\r\n                else\r\n                    return 310\r\n\r\n            totalWidth = _.reduce columnWidths, (total, width) ->\r\n                return total + width\r\n\r\n            $el.find('.kanban-table-inner').css(\"width\", totalWidth)\r\n\r\n        unwatch = $scope.$watch 'usByStatus', (usByStatus) ->\r\n            if usByStatus.size\r\n                $scope.folds = rs.kanban.getStatusColumnModes(projectService.project.get('id'))\r\n                updateTableWidth()\r\n\r\n                unwatch()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgKanbanSquishColumn\", [\"$tgResources\", \"tgProjectService\", KanbanSquishColumnDirective])\r\n\r\n#############################################################################\r\n## Kanban WIP Limit Directive\r\n#############################################################################\r\n\r\nKanbanWipLimitDirective = ($timeout) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        status = $scope.$eval($attrs.tgKanbanWipLimit)\r\n\r\n        redrawWipLimit = =>\r\n            $el.find(\".kanban-wip-limit\").remove()\r\n            $timeout =>\r\n                element = $el.find(\"tg-card\")[status.wip_limit]\r\n                if element\r\n                    angular.element(element).before(\"<div class='kanban-wip-limit'></div>\")\r\n\r\n        if status and not status.is_archived\r\n            $scope.$on \"redraw:wip\", redrawWipLimit\r\n            $scope.$on \"kanban:us:move\", redrawWipLimit\r\n            $scope.$on \"usform:new:success\", redrawWipLimit\r\n            $scope.$on \"usform:bulk:success\", redrawWipLimit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgKanbanWipLimit\", [\"$timeout\", KanbanWipLimitDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/kanban/sortable.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoggleText = @.taiga.toggleText\r\nscopeDefer = @.taiga.scopeDefer\r\nbindOnce = @.taiga.bindOnce\r\ngroupBy = @.taiga.groupBy\r\ntimeout = @.taiga.timeout\r\n\r\nmodule = angular.module(\"taigaKanban\")\r\n\r\n\r\n#############################################################################\r\n## Sortable Directive\r\n#############################################################################\r\n\r\nKanbanSortableDirective = ($repo, $rs, $rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        unwatch = $scope.$watch \"usByStatus\", (usByStatus) ->\r\n            return if !usByStatus || !usByStatus.size\r\n\r\n            unwatch()\r\n\r\n            if not ($scope.project.my_permissions.indexOf(\"modify_us\") > -1)\r\n                return\r\n\r\n            newParentScope = null\r\n            itemEl = null\r\n            tdom = $el\r\n\r\n            deleteElement = (itemEl) ->\r\n                # Completelly remove item and its scope from dom\r\n                itemEl.scope().$destroy()\r\n                itemEl.off()\r\n                itemEl.remove()\r\n\r\n            containers = _.map $el.find('.taskboard-column'), (item) ->\r\n                return item\r\n\r\n            drake = dragula(containers, {\r\n                copySortSource: false,\r\n                copy: false,\r\n                moves: (item) ->\r\n                    return $(item).is('tg-card')\r\n            })\r\n\r\n            drake.on 'drag', (item) ->\r\n                window.dragMultiple.start(item, containers)\r\n\r\n            drake.on 'cloned', (item, dropTarget) ->\r\n                $(item).addClass('multiple-drag-mirror')\r\n\r\n            drake.on 'dragend', (item) ->\r\n                parentEl = $(item).parent()\r\n                newParentScope = parentEl.scope()\r\n\r\n                newStatusId = newParentScope.s.id\r\n                dragMultipleItems = window.dragMultiple.stop()\r\n\r\n                # if it is not drag multiple\r\n                if !dragMultipleItems.length\r\n                    dragMultipleItems = [item]\r\n\r\n                firstElement = dragMultipleItems[0]\r\n                index = $(parentEl).find('tg-card').index(firstElement)\r\n                newStatus = newParentScope.s.id\r\n\r\n                usList = _.map dragMultipleItems, (item) -> $(item).scope().us\r\n\r\n                finalUsList = _.map usList, (item)  ->\r\n                    return {\r\n                        id: item.get('id'),\r\n                        oldStatusId: item.getIn(['model', 'status'])\r\n                    }\r\n\r\n                $scope.$apply ->\r\n                    _.each usList, (item, key) =>\r\n                        oldStatus = item.getIn(['model', 'status'])\r\n                        sameContainer = newStatus == oldStatus\r\n\r\n                        if !sameContainer\r\n                            itemEl = $(dragMultipleItems[key])\r\n                            deleteElement(itemEl)\r\n\r\n                    $rootscope.$broadcast(\"kanban:us:move\", finalUsList, newStatus, index)\r\n\r\n            scroll = autoScroll(containers, {\r\n                margin: 100,\r\n                pixels: 30,\r\n                scrollWhenOutside: true,\r\n                autoScroll: () ->\r\n                    return this.down && drake.dragging\r\n            })\r\n\r\n            $scope.$on \"$destroy\", ->\r\n                $el.off()\r\n                drake.destroy()\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgKanbanSortable\", [\r\n    \"$tgRepo\",\r\n    \"$tgResources\",\r\n    \"$rootScope\",\r\n    KanbanSortableDirective\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/epics/detail.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaEpics\")\r\n\r\n#############################################################################\r\n## Epic Detail Controller\r\n#############################################################################\r\n\r\nclass EpicDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"tgResources\"\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$log\",\r\n        \"tgAppMetaService\",\r\n        \"$tgAnalytics\",\r\n        \"$tgNavUrls\",\r\n        \"$translate\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @location,\r\n                  @log, @appMetaService, @analytics, @navUrls, @translate, @modelTransform, @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.epicRef = @params.epicref\r\n        @scope.sectionName = @translate.instant(\"EPIC.SECTION_NAME\")\r\n        @.initializeEventHandlers()\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            @._setMeta()\r\n            @.initializeOnDeleteGoToUrl()\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    _setMeta: ->\r\n        title = @translate.instant(\"EPIC.PAGE_TITLE\", {\r\n            epicRef: \"##{@scope.epic.ref}\"\r\n            epicSubject: @scope.epic.subject\r\n            projectName: @scope.project.name\r\n        })\r\n        description = @translate.instant(\"EPIC.PAGE_DESCRIPTION\", {\r\n            epicStatus: @scope.statusById[@scope.epic.status]?.name or \"--\"\r\n            epicDescription: angular.element(@scope.epic.description_html or \"\").text()\r\n        })\r\n        @appMetaService.setAll(title, description)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"attachment:create\", =>\r\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on epic\", 1)\r\n\r\n        @scope.$on \"comment:new\", =>\r\n            @.loadEpic()\r\n\r\n        @scope.$on \"custom-attributes-values:edit\", =>\r\n            @rootscope.$broadcast(\"object:updated\")\r\n\r\n    initializeOnDeleteGoToUrl: ->\r\n       ctx = {project: @scope.project.slug}\r\n       @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-epics\", ctx)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.immutableProject = @projectService.project\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.statusList = project.epic_statuses\r\n        @scope.statusById = groupBy(project.epic_statuses, (x) -> x.id)\r\n        return project\r\n\r\n    loadEpic: ->\r\n        return @rs.epics.getByRef(@scope.projectId, @params.epicref).then (epic) =>\r\n            @scope.epic = epic\r\n            @scope.immutableEpic = Immutable.fromJS(epic._attrs)\r\n            @scope.epicId = epic.id\r\n            @scope.commentModel = epic\r\n\r\n            @modelTransform.setObject(@scope, 'epic')\r\n\r\n            if @scope.epic.neighbors.previous?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.epic.neighbors.previous.ref\r\n                }\r\n                @scope.previousUrl = @navUrls.resolve(\"project-epics-detail\", ctx)\r\n\r\n            if @scope.epic.neighbors.next?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.epic.neighbors.next.ref\r\n                }\r\n                @scope.nextUrl = @navUrls.resolve(\"project-epics-detail\", ctx)\r\n\r\n    loadUserstories: ->\r\n          return @rs2.userstories.listInEpic(@scope.epicId).then (data) =>\r\n              @scope.userstories = data\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.loadEpic().then(=> @.loadUserstories())\r\n\r\n    ###\r\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\r\n    #       See app/modules/components/vote-button for more info\r\n    ###\r\n    onUpvote: ->\r\n        onSuccess = =>\r\n            @.loadEpic()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.epics.upvote(@scope.epicId).then(onSuccess, onError)\r\n\r\n    onDownvote: ->\r\n        onSuccess = =>\r\n            @.loadEpic()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.epics.downvote(@scope.epicId).then(onSuccess, onError)\r\n\r\n    ###\r\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\r\n    #       See app/modules/components/watch-button for more info\r\n    ###\r\n    onWatch: ->\r\n        onSuccess = =>\r\n            @.loadEpic()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.epics.watch(@scope.epicId).then(onSuccess, onError)\r\n\r\n    onUnwatch: ->\r\n        onSuccess = =>\r\n            @.loadEpic()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.epics.unwatch(@scope.epicId).then(onSuccess, onError)\r\n\r\n    onSelectColor: (color) ->\r\n        onSelectColorSuccess = () =>\r\n            @rootscope.$broadcast(\"object:updated\")\r\n            @confirm.notify('success')\r\n\r\n        onSelectColorError = () =>\r\n            @confirm.notify('error')\r\n\r\n        transform = @modelTransform.save (epic) ->\r\n            epic.color = color\r\n            return epic\r\n\r\n        return transform.then(onSelectColorSuccess, onSelectColorError)\r\n\r\nmodule.controller(\"EpicDetailController\", EpicDetailController)\r\n\r\n\r\n#############################################################################\r\n## Epic status display directive\r\n#############################################################################\r\n\r\nEpicStatusDisplayDirective = ($template, $compile) ->\r\n    # Display if an epic is open or closed and its status.\r\n    #\r\n    # Example:\r\n    #     tg-epic-status-display(ng-model=\"epic\")\r\n    #\r\n    # Requirements:\r\n    #   - Epic object (ng-model)\r\n    #   - scope.statusById object\r\n\r\n    template = $template.get(\"common/components/status-display.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (epic) ->\r\n            status =  $scope.statusById[epic.status]\r\n\r\n            html = template({\r\n                is_closed: status.is_closed\r\n                status: status\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.ngModel, (epic) ->\r\n            render(epic) if epic?\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgEpicStatusDisplay\", [\"$tgTemplate\", \"$compile\", EpicStatusDisplayDirective])\r\n\r\n\r\n#############################################################################\r\n## Epic status button directive\r\n#############################################################################\r\n\r\nEpicStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $compile, $translate, $template) ->\r\n    # Display the status of epic and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-epic-status-button(ng-model=\"epic\")\r\n    #\r\n    # Requirements:\r\n    #   - Epic object (ng-model)\r\n    #   - scope.statusById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"common/components/status-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_epic\") != -1\r\n\r\n        render = (epic) =>\r\n            status = $scope.statusById[epic.status]\r\n\r\n            html = $compile(template({\r\n                status: status\r\n                statuses: $scope.statusList\r\n                editable: isEditable()\r\n            }))($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (status) ->\r\n            currentLoading = $loading()\r\n                .target($el)\r\n                .start()\r\n\r\n            transform = $modelTransform.save (epic) ->\r\n                epic.status = status\r\n\r\n                return epic\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".js-edit-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n\r\n            $.fn.popover().closeAll()\r\n\r\n            save(target.data(\"status-id\"))\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.status\r\n        , () ->\r\n            epic = $model.$modelValue\r\n            render(epic) if epic\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgEpicStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\r\n                                        \"$compile\", \"$translate\", \"$tgTemplate\", EpicStatusButtonDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/issues/detail.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nbindMethods = @.taiga.bindMethods\r\nnormalizeString = @.taiga.normalizeString\r\n\r\nmodule = angular.module(\"taigaIssues\")\r\n\r\n#############################################################################\r\n## Issue Detail Controller\r\n#############################################################################\r\n\r\nclass IssueDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$log\",\r\n        \"tgAppMetaService\",\r\n        \"$tgAnalytics\",\r\n        \"$tgNavUrls\",\r\n        \"$translate\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\r\n                  @log, @appMetaService, @analytics, @navUrls, @translate, @modelTransform,\r\n                  @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.issueRef = @params.issueref\r\n        @scope.sectionName = @translate.instant(\"ISSUES.SECTION_NAME\")\r\n        @.initializeEventHandlers()\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            @._setMeta()\r\n            @.initializeOnDeleteGoToUrl()\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    _setMeta: ->\r\n        title = @translate.instant(\"ISSUE.PAGE_TITLE\", {\r\n            issueRef: \"##{@scope.issue.ref}\"\r\n            issueSubject: @scope.issue.subject\r\n            projectName: @scope.project.name\r\n        })\r\n        description = @translate.instant(\"ISSUE.PAGE_DESCRIPTION\", {\r\n            issueStatus: @scope.statusById[@scope.issue.status]?.name or \"--\"\r\n            issueType: @scope.typeById[@scope.issue.type]?.name or \"--\"\r\n            issueSeverity: @scope.severityById[@scope.issue.severity]?.name or \"--\"\r\n            issuePriority: @scope.priorityById[@scope.issue.priority]?.name or \"--\"\r\n            issueDescription: angular.element(@scope.issue.description_html or \"\").text()\r\n        })\r\n        @appMetaService.setAll(title, description)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"attachment:create\", =>\r\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on issue\", 1)\r\n\r\n        @scope.$on \"promote-issue-to-us:success\", =>\r\n            @analytics.trackEvent(\"issue\", \"promoteToUserstory\", \"promote issue to userstory\", 1)\r\n            @rootscope.$broadcast(\"object:updated\")\r\n            @.loadIssue()\r\n\r\n        @scope.$on \"comment:new\", =>\r\n            @.loadIssue()\r\n\r\n        @scope.$on \"custom-attributes-values:edit\", =>\r\n            @rootscope.$broadcast(\"object:updated\")\r\n\r\n        @scope.$on \"assign-sprint-to-issue:success\", (ctx, milestoneId) =>\r\n            @scope.issue.milestone = milestoneId\r\n            @rootscope.$broadcast(\"object:updated\")\r\n            if milestoneId\r\n                @.loadSprint()\r\n            else\r\n                @scope.sprint = null\r\n\r\n    initializeOnDeleteGoToUrl: ->\r\n       ctx = {project: @scope.project.slug}\r\n       if @scope.project.is_issues_activated\r\n           @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-issues\", ctx)\r\n       else\r\n           @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.statusList = project.issue_statuses\r\n        @scope.statusById = groupBy(project.issue_statuses, (x) -> x.id)\r\n        @scope.typeById = groupBy(project.issue_types, (x) -> x.id)\r\n        @scope.typeList = _.sortBy(project.issue_types, \"order\")\r\n        @scope.severityList = project.severities\r\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\r\n        @scope.priorityList = project.priorities\r\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\r\n        return project\r\n\r\n    loadIssue: ->\r\n        return @rs.issues.getByRef(@scope.projectId, @params.issueref).then (issue) =>\r\n            @scope.issue = issue\r\n            @scope.issueId = issue.id\r\n            @scope.commentModel = issue\r\n\r\n            @modelTransform.setObject(@scope, 'issue')\r\n\r\n            if @scope.issue.neighbors.previous?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.issue.neighbors.previous.ref\r\n                }\r\n                @scope.previousUrl = @navUrls.resolve(\"project-issues-detail\", ctx)\r\n\r\n            if @scope.issue.neighbors.next?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.issue.neighbors.next.ref\r\n                }\r\n                @scope.nextUrl = @navUrls.resolve(\"project-issues-detail\", ctx)\r\n\r\n    loadSprint: ->\r\n        if @scope.issue.milestone\r\n            return @rs.sprints.get(@scope.issue.project, @scope.issue.milestone).then (sprint) =>\r\n                @scope.sprint = sprint\r\n                return sprint\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n\r\n        return @.loadIssue().then(=> @.loadSprint())\r\n\r\n    ###\r\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\r\n    #       See app/modules/components/vote-button for more info\r\n    ###\r\n    onUpvote: ->\r\n        onSuccess = =>\r\n            @.loadIssue()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.issues.upvote(@scope.issueId).then(onSuccess, onError)\r\n\r\n    onDownvote: ->\r\n        onSuccess = =>\r\n            @.loadIssue()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.issues.downvote(@scope.issueId).then(onSuccess, onError)\r\n\r\n    ###\r\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\r\n    #       See app/modules/components/watch-button for more info\r\n    ###\r\n    onWatch: ->\r\n        onSuccess = =>\r\n            @.loadIssue()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.issues.watch(@scope.issueId).then(onSuccess, onError)\r\n\r\n    onUnwatch: ->\r\n        onSuccess = =>\r\n            @.loadIssue()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.issues.unwatch(@scope.issueId).then(onSuccess, onError)\r\n\r\nmodule.controller(\"IssueDetailController\", IssueDetailController)\r\n\r\n\r\n#############################################################################\r\n## Issue status display directive\r\n#############################################################################\r\n\r\nIssueStatusDisplayDirective = ($template, $compile)->\r\n    # Display if a Issue is open or closed and its issueboard status.\r\n    #\r\n    # Example:\r\n    #     tg-issue-status-display(ng-model=\"issue\")\r\n    #\r\n    # Requirements:\r\n    #   - Issue object (ng-model)\r\n    #   - scope.statusById object\r\n\r\n    template = $template.get(\"common/components/status-display.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (issue) ->\r\n            status = $scope.statusById[issue.status]\r\n\r\n            html = template({\r\n                is_closed: status.is_closed\r\n                status: status\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.ngModel, (issue) ->\r\n            render(issue) if issue?\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgIssueStatusDisplay\", [\"$tgTemplate\", \"$compile\", IssueStatusDisplayDirective])\r\n\r\n\r\n#############################################################################\r\n## Issue status button directive\r\n#############################################################################\r\n\r\nIssueStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    # Display the status of Issue and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-issue-status-button(ng-model=\"issue\")\r\n    #\r\n    # Requirements:\r\n    #   - Issue object (ng-model)\r\n    #   - scope.statusById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"common/components/status-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\r\n\r\n        render = (issue) =>\r\n            status = $scope.statusById[issue.status]\r\n\r\n            html = template({\r\n                status: status\r\n                statuses: $scope.statusList\r\n                editable: isEditable()\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (statusId) ->\r\n            $.fn.popover().closeAll()\r\n\r\n            currentLoading = $loading()\r\n                .target($el)\r\n                .start()\r\n\r\n            transform = $modelTransform.save (issue) ->\r\n                issue.status = statusId\r\n\r\n                return issue\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".js-edit-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n\r\n            save(target.data(\"status-id\"))\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.status\r\n        , () ->\r\n            issue = $model.$modelValue\r\n            render(issue) if issue\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgIssueStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueStatusButtonDirective])\r\n\r\n#############################################################################\r\n## Issue type button directive\r\n#############################################################################\r\n\r\nIssueTypeButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    # Display the type of Issue and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-issue-type-button(ng-model=\"issue\")\r\n    #\r\n    # Requirements:\r\n    #   - Issue object (ng-model)\r\n    #   - scope.typeById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"issue/issue-type-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\r\n\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\r\n\r\n        render = (issue) ->\r\n            type = $scope.typeById[issue.type]\r\n\r\n            html = template({\r\n                type: type\r\n                typees: $scope.typeList\r\n                editable: isEditable()\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (type) ->\r\n            $.fn.popover().closeAll()\r\n\r\n            if notAutoSave\r\n                $model.$modelValue.type = type\r\n                $scope.$apply()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find(\".level-name\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (issue) ->\r\n                issue.type = type\r\n\r\n                return issue\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".type-data\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-type\").popover().open()\r\n\r\n        $el.on \"click\", \".type\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n            type = target.data(\"type-id\")\r\n            save(type)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.type\r\n        , () ->\r\n            issue = $model.$modelValue\r\n            render(issue) if issue\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgIssueTypeButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueTypeButtonDirective])\r\n\r\n\r\n#############################################################################\r\n## Issue severity button directive\r\n#############################################################################\r\n\r\nIssueSeverityButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    # Display the severity of Issue and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-issue-severity-button(ng-model=\"issue\")\r\n    #\r\n    # Requirements:\r\n    #   - Issue object (ng-model)\r\n    #   - scope.severityById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"issue/issue-severity-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\r\n\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\r\n\r\n        render = (issue) ->\r\n            severity = $scope.severityById[issue.severity]\r\n\r\n            html = template({\r\n                severity: severity\r\n                severityes: $scope.severityList\r\n                editable: isEditable()\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (severity) ->\r\n            $.fn.popover().closeAll()\r\n\r\n            if notAutoSave\r\n                $model.$modelValue.severity = severity\r\n                $scope.$apply()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find(\".level-name\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (issue) ->\r\n                issue.severity = severity\r\n\r\n                return issue\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".severity-data\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-severity\").popover().open()\r\n\r\n        $el.on \"click\", \".severity\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n            severity = target.data(\"severity-id\")\r\n\r\n            save(severity)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.severity\r\n        , () ->\r\n            issue = $model.$modelValue\r\n            render(issue) if issue\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgIssueSeverityButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueSeverityButtonDirective])\r\n\r\n\r\n#############################################################################\r\n## Issue priority button directive\r\n#############################################################################\r\n\r\nIssuePriorityButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    # Display the priority of Issue and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-issue-priority-button(ng-model=\"issue\")\r\n    #\r\n    # Requirements:\r\n    #   - Issue object (ng-model)\r\n    #   - scope.priorityById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"issue/issue-priority-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\r\n\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\r\n\r\n        render = (issue) ->\r\n            priority = $scope.priorityById[issue.priority]\r\n\r\n            html = template({\r\n                priority: priority\r\n                priorityes: $scope.priorityList\r\n                editable: isEditable()\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (priority) ->\r\n            $.fn.popover().closeAll()\r\n\r\n            if notAutoSave\r\n                $model.$modelValue.priority = priority\r\n                $scope.$apply()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find(\".level-name\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (issue) ->\r\n                issue.priority = priority\r\n\r\n                return issue\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".priority-data\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-priority\").popover().open()\r\n\r\n        $el.on \"click\", \".priority\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n            priority = target.data(\"priority-id\")\r\n\r\n            save(priority)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.priority\r\n        , () ->\r\n            issue = $model.$modelValue\r\n            render(issue) if issue\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgIssuePriorityButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssuePriorityButtonDirective])\r\n\r\n\r\n#############################################################################\r\n## Promote Issue to US button directive\r\n#############################################################################\r\n\r\nPromoteIssueToUsButtonDirective = ($rootScope, $repo, $confirm, $translate) ->\r\n    link = ($scope, $el, $attrs, $model) ->\r\n\r\n        save = (issue, askResponse) =>\r\n            data = {\r\n                generated_from_issue: issue.id\r\n                project: issue.project,\r\n                subject: issue.subject\r\n                description: issue.description\r\n                tags: issue.tags\r\n                is_blocked: issue.is_blocked\r\n                blocked_note: issue.blocked_note\r\n                due_date: issue.due_date\r\n            }\r\n\r\n            onSuccess = ->\r\n                askResponse.finish()\r\n                $confirm.notify(\"success\")\r\n                $rootScope.$broadcast(\"promote-issue-to-us:success\")\r\n\r\n            onError = ->\r\n                askResponse.finish()\r\n                $confirm.notify(\"error\")\r\n\r\n            $repo.create(\"userstories\", data).then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \"a\", (event) ->\r\n            event.preventDefault()\r\n            issue = $model.$modelValue\r\n\r\n            title = $translate.instant(\"ISSUES.CONFIRM_PROMOTE.TITLE\")\r\n            message = $translate.instant(\"ISSUES.CONFIRM_PROMOTE.MESSAGE\")\r\n            subtitle = issue.subject\r\n\r\n            $confirm.ask(title, subtitle, message).then (response) =>\r\n                save(issue, response)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        restrict: \"AE\"\r\n        require: \"ngModel\"\r\n        templateUrl: \"issue/promote-issue-to-us-button.html\"\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgPromoteIssueToUsButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$translate\"\r\n                                              PromoteIssueToUsButtonDirective])\r\n\r\n#############################################################################\r\n## Add Issue to Sprint button directive\r\n#############################################################################\r\n\r\nAssignSprintToIssueButtonDirective = ($rootscope, $rs, $repo, $loading, $translate,\r\nlightboxService, $modelTransform, $confirm) ->\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        avaliableMilestones = []\r\n        issue = null\r\n\r\n        $scope.$watch $attrs.ngModel, (item) ->\r\n            return if not item\r\n            if item.milestone\r\n                $el.find('.assign-issue-button.button-unset').removeClass('is-active')\r\n                $el.find('.assign-issue-button.button-set').addClass('is-active')\r\n            else\r\n                $el.find('.assign-issue-button.button-set').removeClass('is-active')\r\n                $el.find('.assign-issue-button.button-unset').addClass('is-active')\r\n\r\n        $el.on \"click\", \".assign-issue-button.button-unset\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            title = $translate.instant(\"ISSUES.ACTION_ATTACH_SPRINT\")\r\n            issue = $model.$modelValue\r\n            $rs.sprints.list($scope.projectId, null).then (data) ->\r\n                $scope.milestones = data.milestones\r\n                $scope.selectedSprint = issue.milestone\r\n                avaliableMilestones = angular.copy($scope.milestones)\r\n                lightboxService.open($el.find(\".lightbox-assign-sprint-to-issue\"))\r\n\r\n        $el.on \"click\", \".assign-issue-button.button-set\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            issue = $model.$modelValue\r\n            $rs.sprints.list($scope.projectId, null).then (data) ->\r\n                currentSprint = _.find(data.milestones, { \"id\": issue.milestone })\r\n\r\n                title = $translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.TITLE\")\r\n                message = $translate.instant(\r\n                    \"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\",\r\n                    {sprintName: currentSprint.name}\r\n                )\r\n\r\n                $confirm.ask(title, null, message).then (askResponse) ->\r\n                    onSuccess = ->\r\n                        $rootscope.$broadcast(\"assign-sprint-to-issue:success\", null)\r\n                        askResponse.finish()\r\n                        lightboxService.close($el)\r\n\r\n\r\n                    onError = ->\r\n                        askResponse.finish(false)\r\n                        $confirm.notify(\"error\")\r\n\r\n                    transform = $modelTransform.save (issue) ->\r\n                        issue.setAttr('milestone', null)\r\n                        return issue\r\n                    transform.then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        existsMilestone = (needle, haystack) ->\r\n            haystack = normalizeString(haystack.toUpperCase())\r\n            needle = normalizeString(needle.toUpperCase())\r\n            return _.includes(haystack, needle)\r\n\r\n        $scope.filterMilestones = (filterText) ->\r\n            $scope.milestones = avaliableMilestones.filter((milestone) ->\r\n                existsMilestone(filterText, milestone.name)\r\n            )\r\n\r\n        $scope.saveIssueToSprint = (selectedSprint, event) ->\r\n            currentLoading = $loading().target($(event.currentTarget)).start()\r\n            issue.setAttr('milestone', selectedSprint.id)\r\n\r\n            transform = $modelTransform.save (item) ->\r\n                issue.setAttr('milestone', selectedSprint.id)\r\n                return item\r\n\r\n            transform.then ->\r\n                currentLoading.finish()\r\n                lightboxService.close($el.find(\".lightbox-assign-sprint-to-issue\"))\r\n                $rootscope.$broadcast(\"assign-sprint-to-issue:success\", selectedSprint.id)\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n        templateUrl: \"issue/assign-sprint-to-issue-button.html\"\r\n\r\n    }\r\n\r\nmodule.directive(\"tgAssignSprintToIssueButton\", [\"$rootScope\", \"$tgResources\", \"$tgRepo\",\r\n                \"$tgLoading\", \"$translate\", \"lightboxService\", \"$tgQueueModelTransformation\",\r\n                \"$tgConfirm\", AssignSprintToIssueButtonDirective] )\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/issues/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\ntrim = @.taiga.trim\r\n\r\nmodule = angular.module(\"taigaIssues\")\r\n\r\n#############################################################################\r\n## Issue Bulk Create Lightbox Directive\r\n#############################################################################\r\n\r\nCreateBulkIssuesDirective = ($repo, $rs, $confirm, $rootscope, $loading, lightboxService, $model) ->\r\n    link = ($scope, $el, attrs) ->\r\n        form = null\r\n\r\n        $scope.$on \"issueform:bulk\", (ctx, projectId, milestoneId, status)->\r\n            form.reset() if form\r\n\r\n            lightboxService.open($el)\r\n            $scope.new = {\r\n                projectId: projectId,\r\n                milestoneId: milestoneId,\r\n                bulk: \"\"\r\n            }\r\n\r\n        submit = debounce 2000, (event) ->\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            if not form.validate()\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            data = $scope.new.bulk\r\n            projectId = $scope.new.projectId\r\n            milestoneId = $scope.new.milestoneId\r\n\r\n            promise = $rs.issues.bulkCreate(projectId, milestoneId, data)\r\n            promise.then (result) ->\r\n                result =  _.map(result.data, (x) -> $model.make_model('issues', x))\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"issueform:new:success\", result)\r\n                lightboxService.close($el)\r\n                $confirm.notify(\"success\")\r\n\r\n            promise.then null, ->\r\n                currentLoading.finish()\r\n                $confirm.notify(\"error\")\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgLbCreateBulkIssues\", [\"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$rootScope\", \"$tgLoading\",\r\n                                          \"lightboxService\", \"$tgModel\", CreateBulkIssuesDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/issues/list.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntrim = @.taiga.trim\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\ndebounceLeading = @.taiga.debounceLeading\r\nstartswith = @.taiga.startswith\r\nbindMethods = @.taiga.bindMethods\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nmodule = angular.module(\"taigaIssues\")\r\n\r\n#############################################################################\r\n## Issues Controller\r\n#############################################################################\r\n\r\nclass IssuesController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$tgUrls\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgEvents\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"$tgStorage\",\r\n        \"tgFilterRemoteStorageService\",\r\n        \"tgProjectService\",\r\n        \"tgUserActivityService\"\r\n    ]\r\n\r\n    filtersHashSuffix: \"issues-filters\"\r\n    myFiltersHashSuffix: \"issues-my-filters\"\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @urls, @params, @q, @location, @appMetaService,\r\n                  @navUrls, @events, @analytics, @translate, @errorHandlingService, @storage, @filterRemoteStorageService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = @translate.instant(\"PROJECT.SECTION.ISSUES\")\r\n        @.voting = false\r\n\r\n        return if @.applyStoredFilters(@params.pslug, @.filtersHashSuffix)\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            title = @translate.instant(\"ISSUES.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @translate.instant(\"ISSUES.PAGE_DESCRIPTION\", {\r\n                projectName: @scope.project.name,\r\n                projectDescription: @scope.project.description\r\n            })\r\n            @appMetaService.setAll(title, description)\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"issueform:new:success\", =>\r\n            @analytics.trackEvent(\"issue\", \"create\", \"create issue on issues list\", 1)\r\n            @.loadIssues()\r\n\r\n        @scope.$on \"assigned-to:changed\", =>\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('assigned_to') ||\\\r\n                @.isFilterDataTypeSelected('role') ||\\\r\n                @.isOrderedBy('assigned_to') || @.isOrderedBy('modified')\r\n                    @.loadIssues()\r\n\r\n        @scope.$on \"status:changed\", =>\r\n            @.generateFilters()\r\n            if @.isFilterDataTypeSelected('status') ||\\\r\n                @.isOrderedBy('status') || @.isOrderedBy('modified')\r\n                    @.loadIssues()\r\n\r\n    isOrderedBy: (fieldName) ->\r\n        pattern = new RegExp(\"-*\"+fieldName)\r\n        return pattern.test(@location.search().order_by)\r\n\r\n    changeQ: (q) ->\r\n        @.unselectFilter(\"page\")\r\n        @.replaceFilter(\"q\", q)\r\n        @.loadIssues()\r\n        @.generateFilters()\r\n\r\n    removeFilter: (filter) ->\r\n        @.unselectFilter(\"page\")\r\n        @.unselectFilter(filter.dataType, filter.id)\r\n        @.loadIssues()\r\n        @.generateFilters()\r\n\r\n    addFilter: (newFilter) ->\r\n        @.unselectFilter(\"page\")\r\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id)\r\n        @.loadIssues()\r\n        @.generateFilters()\r\n\r\n    selectCustomFilter: (customFilter) ->\r\n        orderBy = @location.search().order_by\r\n\r\n        if orderBy\r\n            customFilter.filter.order_by = orderBy\r\n\r\n        @.unselectFilter(\"page\")\r\n        @.replaceAllFilters(customFilter.filter)\r\n        @.loadIssues()\r\n        @.generateFilters()\r\n\r\n    removeCustomFilter: (customFilter) ->\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix).then (userFilters) =>\r\n            delete userFilters[customFilter.id]\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.myFiltersHashSuffix).then(@.generateFilters)\r\n\r\n    isFilterDataTypeSelected: (filterDataType) ->\r\n        for filter in @.selectedFilters\r\n            if (filter['dataType'] == filterDataType)\r\n                return true\r\n        return false\r\n\r\n    saveCustomFilter: (name) ->\r\n        filters = {}\r\n        urlfilters = @location.search()\r\n        filters.tags = urlfilters.tags\r\n        filters.status = urlfilters.status\r\n        filters.type = urlfilters.type\r\n        filters.severity = urlfilters.severity\r\n        filters.priority = urlfilters.priority\r\n        filters.assigned_to = urlfilters.assigned_to\r\n        filters.owner = urlfilters.owner\r\n        filters.role = urlfilters.role\r\n\r\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix).then (userFilters) =>\r\n            userFilters[name] = filters\r\n\r\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.myFiltersHashSuffix).then(@.generateFilters)\r\n\r\n    generateFilters: ->\r\n        @.storeFilters(@params.pslug, @location.search(), @.filtersHashSuffix)\r\n\r\n        urlfilters = @location.search()\r\n\r\n        loadFilters = {}\r\n        loadFilters.project = @scope.projectId\r\n        loadFilters.tags = urlfilters.tags\r\n        loadFilters.status = urlfilters.status\r\n        loadFilters.type = urlfilters.type\r\n        loadFilters.severity = urlfilters.severity\r\n        loadFilters.priority = urlfilters.priority\r\n        loadFilters.assigned_to = urlfilters.assigned_to\r\n        loadFilters.owner = urlfilters.owner\r\n        loadFilters.role = urlfilters.role\r\n        loadFilters.q = urlfilters.q\r\n\r\n        return @q.all([\r\n            @rs.issues.filtersData(loadFilters),\r\n            @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix)\r\n        ]).then (result) =>\r\n            data = result[0]\r\n            customFiltersRaw = result[1]\r\n\r\n            statuses = _.map data.statuses, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            type = _.map data.types, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            severity = _.map data.severities, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            priority = _.map data.priorities, (it) ->\r\n                it.id = it.id.toString()\r\n\r\n                return it\r\n            tags = _.map data.tags, (it) ->\r\n                it.id = it.name\r\n\r\n                return it\r\n\r\n            tagsWithAtLeastOneElement = _.filter tags, (tag) ->\r\n                return tag.count > 0\r\n\r\n            assignedTo = _.map data.assigned_to, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.full_name || \"Unassigned\"\r\n\r\n                return it\r\n            owner = _.map data.owners, (it) ->\r\n                it.id = it.id.toString()\r\n                it.name = it.full_name\r\n\r\n                return it\r\n            role = _.map data.roles, (it) ->\r\n                if it.id\r\n                    it.id = it.id.toString()\r\n                else\r\n                    it.id = \"null\"\r\n\r\n                it.name = it.name || \"Unassigned\"\r\n\r\n                return it\r\n\r\n            @.selectedFilters = []\r\n\r\n            if loadFilters.status\r\n                selected = @.formatSelectedFilters(\"status\", statuses, loadFilters.status)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.tags\r\n                selected = @.formatSelectedFilters(\"tags\", tags, loadFilters.tags)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.assigned_to\r\n                selected = @.formatSelectedFilters(\"assigned_to\", assignedTo, loadFilters.assigned_to)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.owner\r\n                selected = @.formatSelectedFilters(\"owner\", owner, loadFilters.owner)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.type\r\n                selected = @.formatSelectedFilters(\"type\", type, loadFilters.type)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.severity\r\n                selected = @.formatSelectedFilters(\"severity\", severity, loadFilters.severity)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.priority\r\n                selected = @.formatSelectedFilters(\"priority\", priority, loadFilters.priority)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            if loadFilters.role\r\n                selected = @.formatSelectedFilters(\"role\", role, loadFilters.role)\r\n                @.selectedFilters = @.selectedFilters.concat(selected)\r\n\r\n            @.filterQ = loadFilters.q\r\n\r\n            @.filters = [\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TYPE\"),\r\n                    dataType: \"type\",\r\n                    content: type\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.SEVERITY\"),\r\n                    dataType: \"severity\",\r\n                    content: severity\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.PRIORITIES\"),\r\n                    dataType: \"priority\",\r\n                    content: priority\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\r\n                    dataType: \"status\",\r\n                    content: statuses\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\r\n                    dataType: \"tags\",\r\n                    content: tags,\r\n                    hideEmpty: true,\r\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_TO\"),\r\n                    dataType: \"assigned_to\",\r\n                    content: assignedTo\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\r\n                    dataType: \"role\",\r\n                    content: role\r\n                },\r\n                {\r\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\r\n                    dataType: \"owner\",\r\n                    content: owner\r\n                }\r\n            ]\r\n\r\n            @.customFilters = []\r\n            _.forOwn customFiltersRaw, (value, key) =>\r\n                @.customFilters.push({id: key, name: key, filter: value})\r\n\r\n    initializeSubscription: ->\r\n        routingKey = \"changes.project.#{@scope.projectId}.issues\"\r\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\r\n            @.loadIssues())\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.is_issues_activated\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n\r\n        @scope.issueStatusById = groupBy(project.issue_statuses, (x) -> x.id)\r\n        @scope.issueStatusList = _.sortBy(project.issue_statuses, \"order\")\r\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\r\n        @scope.severityList = _.sortBy(project.severities, \"order\")\r\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\r\n        @scope.priorityList = _.sortBy(project.priorities, \"order\")\r\n        @scope.issueTypes = _.sortBy(project.issue_types, \"order\")\r\n        @scope.issueTypeById = groupBy(project.issue_types, (x) -> x.id)\r\n\r\n        return project\r\n\r\n    # We need to guarantee that the last petition done here is the finally used\r\n    # When searching by text loadIssues can be called fastly with different parameters and\r\n    # can be resolved in a different order than generated\r\n    # We count the requests made and only if the callback is for the last one data is updated\r\n    loadIssuesRequests: 0\r\n    loadIssues: =>\r\n        params = @location.search()\r\n\r\n        promise = @rs.issues.list(@scope.projectId, params)\r\n        @.loadIssuesRequests += 1\r\n        promise.index = @.loadIssuesRequests\r\n        promise.then (data) =>\r\n            if promise.index == @.loadIssuesRequests\r\n                @scope.issues = data.models\r\n                @scope.page = data.current\r\n                @scope.count = data.count\r\n                @scope.paginatedBy = data.paginatedBy\r\n\r\n            return data\r\n\r\n        return promise\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.initializeSubscription()\r\n        @.generateFilters()\r\n\r\n        return @.loadIssues()\r\n\r\n    # Functions used from templates\r\n    addNewIssue: ->\r\n        project = @projectService.project.toJS()\r\n        @rootscope.$broadcast(\"genericform:new\", {\r\n            'objType': 'issue',\r\n            'project': project\r\n        })\r\n\r\n    addIssuesInBulk: ->\r\n        @rootscope.$broadcast(\"issueform:bulk\", @scope.projectId)\r\n\r\n    upVoteIssue: (issueId) ->\r\n        @.voting = issueId\r\n        onSuccess = =>\r\n            @.loadIssues()\r\n            @.voting = null\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n            @.voting = null\r\n\r\n        return @rs.issues.upvote(issueId).then(onSuccess, onError)\r\n\r\n    downVoteIssue: (issueId) ->\r\n        @.voting = issueId\r\n        onSuccess = =>\r\n            @.loadIssues()\r\n            @.voting = null\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n            @.voting = null\r\n\r\n        return @rs.issues.downvote(issueId).then(onSuccess, onError)\r\n\r\n    getOrderBy: ->\r\n        if _.isString(@location.search().order_by)\r\n            return @location.search().order_by\r\n        else\r\n            return \"created_date\"\r\n\r\nmodule.controller(\"IssuesController\", IssuesController)\r\n\r\n#############################################################################\r\n## Issues Directive\r\n#############################################################################\r\n\r\nIssuesDirective = ($log, $location, $template, $compile) ->\r\n    ## Issues Pagination\r\n    template = $template.get(\"issue/issue-paginator.html\", true)\r\n\r\n    linkPagination = ($scope, $el, $attrs, $ctrl) ->\r\n        # Constants\r\n        afterCurrent = 2\r\n        beforeCurrent = 4\r\n        atBegin = 2\r\n        atEnd = 2\r\n\r\n        $pagEl = $el.find(\".issues-paginator\")\r\n\r\n        getNumPages = ->\r\n            numPages = $scope.count / $scope.paginatedBy\r\n            if parseInt(numPages, 10) < numPages\r\n                numPages = parseInt(numPages, 10) + 1\r\n            else\r\n                numPages = parseInt(numPages, 10)\r\n\r\n            return numPages\r\n\r\n        renderPagination = ->\r\n            numPages = getNumPages()\r\n\r\n            if numPages <= 1\r\n                $pagEl.hide()\r\n                return\r\n            $pagEl.show()\r\n\r\n            pages = []\r\n            options = {}\r\n            options.pages = pages\r\n            options.showPrevious = ($scope.page > 1)\r\n            options.showNext = not ($scope.page == numPages)\r\n\r\n            cpage = $scope.page\r\n\r\n            for i in [1..numPages]\r\n                if i == (cpage + afterCurrent) and numPages > (cpage + afterCurrent + atEnd)\r\n                    pages.push({classes: \"dots\", type: \"dots\"})\r\n                else if i == (cpage - beforeCurrent) and cpage > (atBegin + beforeCurrent)\r\n                    pages.push({classes: \"dots\", type: \"dots\"})\r\n                else if i > (cpage + afterCurrent) and i <= (numPages - atEnd)\r\n                else if i < (cpage - beforeCurrent) and i > atBegin\r\n                else if i == cpage\r\n                    pages.push({classes: \"active\", num: i, type: \"page-active\"})\r\n                else\r\n                    pages.push({classes: \"page\", num: i, type: \"page\"})\r\n\r\n\r\n            html = template(options)\r\n            html = $compile(html)($scope)\r\n\r\n            $pagEl.html(html)\r\n\r\n        $scope.$watch \"issues\", (value) ->\r\n            # Do nothing if value is not logical true\r\n            return if not value\r\n\r\n            renderPagination()\r\n\r\n        $el.on \"click\", \".issues-paginator a.next\", (event) ->\r\n            event.preventDefault()\r\n\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", $scope.page + 1)\r\n                $ctrl.loadIssues()\r\n\r\n        $el.on \"click\", \".issues-paginator a.previous\", (event) ->\r\n            event.preventDefault()\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", $scope.page - 1)\r\n                $ctrl.loadIssues()\r\n\r\n        $el.on \"click\", \".issues-paginator li.page > a\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            pagenum = target.data(\"pagenum\")\r\n\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", pagenum)\r\n                $ctrl.loadIssues()\r\n\r\n    ## Issues Filters\r\n    linkOrdering = ($scope, $el, $attrs, $ctrl) ->\r\n        # Draw the arrow the first time\r\n\r\n        currentOrder = $ctrl.getOrderBy()\r\n\r\n        if currentOrder\r\n            icon = if startswith(currentOrder, \"-\") then \"icon-arrow-up\" else \"icon-arrow-down\"\r\n            colHeadElement = $el.find(\".row.title > div[data-fieldname='#{trim(currentOrder, \"-\")}']\")\r\n\r\n            svg = $(\"<tg-svg>\").attr(\"svg-icon\", icon)\r\n\r\n            colHeadElement.append(svg)\r\n            $compile(colHeadElement.contents())($scope)\r\n\r\n        $el.on \"click\", \".row.title > div\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n\r\n            currentOrder = $ctrl.getOrderBy()\r\n            newOrder = target.data(\"fieldname\")\r\n\r\n            if newOrder == 'total_voters' and currentOrder != \"-total_voters\"\r\n                currentOrder = \"total_voters\"\r\n            finalOrder = if currentOrder == newOrder then \"-#{newOrder}\" else newOrder\r\n\r\n            $scope.$apply ->\r\n                $ctrl.replaceFilter(\"order_by\", finalOrder)\r\n\r\n                $ctrl.storeFilters($ctrl.params.pslug, $location.search(), $ctrl.filtersHashSuffix)\r\n                $ctrl.loadIssues().then ->\r\n                    # Update the arrow\r\n                    $el.find(\".row.title > div > tg-svg\").remove()\r\n                    icon = if startswith(finalOrder, \"-\") then \"icon-arrow-up\" else \"icon-arrow-down\"\r\n\r\n                    svg = $(\"<tg-svg>\")\r\n                        .attr(\"svg-icon\", icon)\r\n\r\n                    target.append(svg)\r\n                    $compile(target.contents())($scope)\r\n\r\n    ## Issues Link\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        linkOrdering($scope, $el, $attrs, $ctrl)\r\n        linkPagination($scope, $el, $attrs, $ctrl)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgIssues\", [\"$log\", \"$tgLocation\", \"$tgTemplate\", \"$compile\", IssuesDirective])\r\n\r\n\r\n#############################################################################\r\n## Issue status Directive (popover for change status)\r\n#############################################################################\r\n\r\nIssueStatusInlineEditionDirective = ($repo, $template, $rootscope) ->\r\n    ###\r\n    Print the status of an Issue and a popover to change it.\r\n    - tg-issue-status-inline-edition: The issue\r\n\r\n    Example:\r\n\r\n      div.status(tg-issue-status-inline-edition=\"issue\")\r\n        a.issue-status(href=\"\")\r\n\r\n    NOTE: This directive need 'issueStatusById' and 'project'.\r\n    ###\r\n    selectionTemplate = $template.get(\"issue/issue-status-inline-edition-selection.html\", true)\r\n\r\n    updateIssueStatus = ($el, issue, issueStatusById) ->\r\n        issueStatusDomParent = $el.find(\".issue-status\")\r\n        issueStatusDom = $el.find(\".issue-status .issue-status-bind\")\r\n\r\n        status = issueStatusById[issue.status]\r\n\r\n        if status\r\n            issueStatusDom.text(status.name)\r\n            issueStatusDom.prop(\"title\", status.name)\r\n            issueStatusDomParent.css('color', status.color)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        issue = $scope.$eval($attrs.tgIssueStatusInlineEdition)\r\n\r\n        $el.on \"click\", \".issue-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            issue.status = target.data(\"status-id\")\r\n            $el.find(\".pop-status\").popover().close()\r\n            updateIssueStatus($el, issue, $scope.issueStatusById)\r\n\r\n            $scope.$apply () ->\r\n                $repo.save(issue).then (response) ->\r\n                    $rootscope.$broadcast(\"status:changed\", response)\r\n\r\n        taiga.bindOnce $scope, \"project\", (project) ->\r\n            $el.append(selectionTemplate({ 'statuses':  project.issue_statuses }))\r\n            updateIssueStatus($el, issue, $scope.issueStatusById)\r\n\r\n            # If the user has not enough permissions the click events are unbinded\r\n            if project.my_permissions.indexOf(\"modify_issue\") == -1\r\n                $el.unbind(\"click\")\r\n                $el.find(\"a\").addClass(\"not-clickable\")\r\n\r\n        $scope.$watch $attrs.tgIssueStatusInlineEdition, (val) =>\r\n            updateIssueStatus($el, val, $scope.issueStatusById)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgIssueStatusInlineEdition\", [\"$tgRepo\", \"$tgTemplate\", \"$rootScope\",\r\n                                                IssueStatusInlineEditionDirective])\r\n\r\n\r\n#############################################################################\r\n## Issue assigned to Directive\r\n#############################################################################\r\n\r\nIssueAssignedToInlineEditionDirective = ($repo, $rootscope, $translate, avatarService) ->\r\n    template = _.template(\"\"\"\r\n    <img style=\"background-color: <%- bg %>\" src=\"<%- imgurl %>\" alt=\"<%- name %>\"/>\r\n    <figcaption><%- name %></figcaption>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        updateIssue = (issue) ->\r\n            ctx = {\r\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\r\n                imgurl: \"/#{window._version}/images/unnamed.png\"\r\n            }\r\n\r\n            member = $scope.usersById[issue.assigned_to]\r\n\r\n            avatar = avatarService.getAvatar(member)\r\n            ctx.imgurl = avatar.url\r\n            ctx.bg = null\r\n\r\n            if member\r\n                ctx.name = member.full_name_display\r\n                ctx.bg = avatar.bg\r\n\r\n            $el.find(\".avatar\").html(template(ctx))\r\n            $el.find(\".issue-assignedto\").attr('title', ctx.name)\r\n\r\n        $ctrl = $el.controller()\r\n        issue = $scope.$eval($attrs.tgIssueAssignedToInlineEdition)\r\n        updateIssue(issue)\r\n\r\n        $el.on \"click\", \".issue-assignedto\", (event) ->\r\n            $rootscope.$broadcast(\"assigned-to:add\", issue)\r\n\r\n        taiga.bindOnce $scope, \"project\", (project) ->\r\n            # If the user has not enough permissions the click events are unbinded\r\n            if project.my_permissions.indexOf(\"modify_issue\") == -1\r\n                $el.unbind(\"click\")\r\n                $el.find(\"a\").addClass(\"not-clickable\")\r\n\r\n        $scope.$on \"assigned-to:added\", (ctx, userId, updatedIssue) ->\r\n            if updatedIssue.id == issue.id\r\n                updatedIssue.assigned_to = userId\r\n                $repo.save(issue).then ->\r\n                    updateIssue(updatedIssue)\r\n                    $rootscope.$broadcast(\"assigned-to:changed\", updatedIssue)\r\n\r\n        $scope.$watch $attrs.tgIssueAssignedToInlineEdition, (val) ->\r\n            updateIssue(val)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgIssueAssignedToInlineEdition\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"tgAvatarService\",\r\n                                                    IssueAssignedToInlineEditionDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/userstories/detail.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaUserStories\")\r\n\r\n#############################################################################\r\n## User story Detail Controller\r\n#############################################################################\r\n\r\nclass UserStoryDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$log\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"tgErrorHandlingService\",\r\n        \"$tgConfig\",\r\n        \"tgProjectService\",\r\n        \"tgWysiwygService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\r\n                  @log, @appMetaService, @navUrls, @analytics, @translate, @modelTransform,\r\n                  @errorHandlingService, @configService, @projectService, @wysiwigService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.usRef = @params.usref\r\n        @scope.sectionName = @translate.instant(\"US.SECTION_NAME\")\r\n        @scope.tribeEnabled = @configService.config.tribeHost\r\n\r\n        @.initializeEventHandlers()\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            @._setMeta()\r\n            @.initializeOnDeleteGoToUrl()\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    _setMeta: ->\r\n        totalTasks = @scope.tasks.length\r\n        closedTasks = _.filter(@scope.tasks, (t) => @scope.taskStatusById[t.status].is_closed).length\r\n        progressPercentage = if totalTasks > 0 then Math.round(100 * closedTasks / totalTasks) else 0\r\n\r\n        title = @translate.instant(\"US.PAGE_TITLE\", {\r\n            userStoryRef: \"##{@scope.us.ref}\"\r\n            userStorySubject: @scope.us.subject\r\n            projectName: @scope.project.name\r\n        })\r\n        description = @translate.instant(\"US.PAGE_DESCRIPTION\", {\r\n            userStoryStatus: @scope.statusById[@scope.us.status]?.name or \"--\"\r\n            userStoryPoints: @scope.us.total_points\r\n            userStoryDescription: angular.element(@wysiwigService.getHTML(@scope.us.description) or \"\").text()\r\n            userStoryClosedTasks: closedTasks\r\n            userStoryTotalTasks: totalTasks\r\n            userStoryProgressPercentage: progressPercentage\r\n        })\r\n\r\n        @appMetaService.setAll(title, description)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"related-tasks:update\", =>\r\n            @.loadTasks()\r\n            @scope.tasks = _.clone(@scope.tasks, false)\r\n            allClosed = _.every @scope.tasks, (task) -> return task.is_closed\r\n\r\n            if @scope.us.is_closed != allClosed\r\n                @.loadUs()\r\n\r\n        @scope.$on \"attachment:create\", =>\r\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on userstory\", 1)\r\n\r\n        @scope.$on \"task:reorder\", (event, task, newIndex) =>\r\n            @.reorderTask(task, newIndex)\r\n\r\n        @scope.$on \"comment:new\", =>\r\n            @.loadUs()\r\n\r\n    initializeOnDeleteGoToUrl: ->\r\n        ctx = {project: @scope.project.slug}\r\n        @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\r\n        if @scope.project.is_backlog_activated\r\n            if @scope.us.milestone\r\n                ctx.sprint = @scope.sprint.slug\r\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-taskboard\", ctx)\r\n            else\r\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-backlog\", ctx)\r\n        else if @scope.project.is_kanban_activated\r\n            @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-kanban\", ctx)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.statusList = project.us_statuses\r\n        @scope.statusById = groupBy(project.us_statuses, (x) -> x.id)\r\n        @scope.taskStatusById = groupBy(project.task_statuses, (x) -> x.id)\r\n        @scope.pointsList = _.sortBy(project.points, \"order\")\r\n        @scope.pointsById = groupBy(@scope.pointsList, (e) -> e.id)\r\n        return project\r\n\r\n    loadUs: ->\r\n        httpParams = _.pick(@location.search(), \"milestone\", \"no-milestone\", \"kanban-status\")\r\n        milestone = httpParams.milestone\r\n        if milestone\r\n            @rs.userstories.storeQueryParams(@scope.projectId, {\r\n                milestone: milestone\r\n                order_by: \"sprint_order\"\r\n            })\r\n\r\n        noMilestone = httpParams[\"no-milestone\"]\r\n        if noMilestone\r\n            @rs.userstories.storeQueryParams(@scope.projectId, {\r\n                milestone: \"null\"\r\n                order_by: \"backlog_order\"\r\n            })\r\n\r\n        kanbanStaus = httpParams[\"kanban-status\"]\r\n        if kanbanStaus\r\n            @rs.userstories.storeQueryParams(@scope.projectId, {\r\n                status: kanbanStaus\r\n                order_by: \"kanban_order\"\r\n            })\r\n\r\n\r\n\r\n        return @rs.userstories.getByRef(@scope.projectId, @params.usref).then (us) =>\r\n            @scope.us = us\r\n            @scope.usId = us.id\r\n            @scope.commentModel = us\r\n\r\n            @modelTransform.setObject(@scope, 'us')\r\n\r\n            return us\r\n\r\n    loadSprint: ->\r\n        if @scope.us.milestone\r\n            return @rs.sprints.get(@scope.us.project, @scope.us.milestone).then (sprint) =>\r\n                @scope.sprint = sprint\r\n                return sprint\r\n\r\n    loadTasks: ->\r\n        return @rs.tasks.list(@scope.projectId, null, @scope.usId).then (tasks) =>\r\n            @scope.tasks = tasks\r\n            return tasks\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.loadUs().then(=> @q.all([@.loadSprint(), @.loadTasks()]))\r\n\r\n    ###\r\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\r\n    #       See app/modules/components/vote-button for more info\r\n    ###\r\n    onUpvote: ->\r\n        onSuccess = =>\r\n            @.loadUs()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.userstories.upvote(@scope.usId).then(onSuccess, onError)\r\n\r\n    onDownvote: ->\r\n        onSuccess = =>\r\n            @.loadUs()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.userstories.downvote(@scope.usId).then(onSuccess, onError)\r\n\r\n    ###\r\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\r\n    #       See app/modules/components/watch-button for more info\r\n    ###\r\n    onWatch: ->\r\n        onSuccess = =>\r\n            @.loadUs()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.userstories.watch(@scope.usId).then(onSuccess, onError)\r\n\r\n    onUnwatch: ->\r\n        onSuccess = =>\r\n            @.loadUs()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.userstories.unwatch(@scope.usId).then(onSuccess, onError)\r\n\r\n    onTribeInfo: ->\r\n        publishTitle = @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TITLE\")\r\n        image = $('<img />')\r\n            .attr({\r\n                'src': \"/#{window._version}/images/monster-fight.png\",\r\n                'alt': @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TITLE\")\r\n            })\r\n        text = @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TEXT\")\r\n        publishDesc = $('<div></div>').append(image).append(text)\r\n        @confirm.success(publishTitle, publishDesc)\r\n\r\n    reorderTask: (task, newIndex) ->\r\n        orderList = {}\r\n        @scope.tasks.forEach (it) ->\r\n            orderList[it.id] = it.us_order\r\n\r\n        withoutMoved = @scope.tasks.filter (it) -> it.id != task.id\r\n        beforeDestination = withoutMoved.slice(0, newIndex)\r\n        afterDestination = withoutMoved.slice(newIndex)\r\n\r\n        previous = beforeDestination[beforeDestination.length - 1]\r\n        newOrder = if !previous then 0 else previous.us_order + 1\r\n\r\n        orderList[task.id] = newOrder\r\n\r\n        previousWithTheSameOrder = beforeDestination.filter (it) ->\r\n            it.us_order == previous.us_order\r\n\r\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) ->\r\n            [it.id, it.us_order]\r\n        )\r\n\r\n        afterDestination.forEach (it) -> orderList[it.id] = it.us_order + 1\r\n\r\n        @scope.tasks =  _.map(@scope.tasks, (it) ->\r\n            it.us_order = orderList[it.id]\r\n            return it\r\n        )\r\n        @scope.tasks = _.sortBy(@scope.tasks, \"us_order\")\r\n\r\n        data = {\r\n            us_order: newOrder,\r\n            version: task.version\r\n        }\r\n\r\n        return @rs.tasks.reorder(task.id, data, setOrders).then (newTask) =>\r\n            @scope.tasks =  _.map(@scope.tasks, (it) ->\r\n                return if it.id == newTask.id then newTask else it\r\n            )\r\n            @rootscope.$broadcast(\"related-tasks:reordered\")\r\n\r\nmodule.controller(\"UserStoryDetailController\", UserStoryDetailController)\r\n\r\n\r\n#############################################################################\r\n## User story status display directive\r\n#############################################################################\r\n\r\nUsStatusDisplayDirective = ($template, $compile) ->\r\n    # Display if a US is open or closed and its kanban status.\r\n    #\r\n    # Example:\r\n    #     tg-us-status-display(ng-model=\"us\")\r\n    #\r\n    # Requirements:\r\n    #   - US object (ng-model)\r\n    #   - scope.statusById object\r\n\r\n    template = $template.get(\"common/components/status-display.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (us) ->\r\n            status = $scope.statusById[us.status]\r\n\r\n            html = template({\r\n                is_closed: us.is_closed\r\n                status: status\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.ngModel, (us) ->\r\n            render(us) if us?\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgUsStatusDisplay\", [\"$tgTemplate\", \"$compile\", UsStatusDisplayDirective])\r\n\r\n#############################################################################\r\n## User story status button directive\r\n#############################################################################\r\n\r\nUsStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    # Display the status of a US and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-us-status-button(ng-model=\"us\")\r\n    #\r\n    # Requirements:\r\n    #   - Us object (ng-model)\r\n    #   - scope.statusById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"common/components/status-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\r\n\r\n        render = (us) =>\r\n            status = $scope.statusById[us.status]\r\n\r\n            html = template({\r\n                status: status\r\n                statuses: $scope.statusList\r\n                editable: isEditable()\r\n            })\r\n\r\n            $el.html(html)\r\n\r\n            $compile($el.contents())($scope)\r\n\r\n        save = (status) =>\r\n            $el.find(\".pop-status\").popover().close()\r\n\r\n            currentLoading = $loading()\r\n                .target($el.find('.js-edit-status'))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (us) ->\r\n                us.status = status\r\n\r\n                return us\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".js-edit-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n            status = target.data(\"status-id\")\r\n\r\n            save(status)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.status\r\n        , () ->\r\n            us = $model.$modelValue\r\n\r\n            render(us) if us\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgUsStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\",\r\n                                      UsStatusButtonDirective])\r\n\r\n\r\n#############################################################################\r\n## User story team requirements button directive\r\n#############################################################################\r\n\r\nUsTeamRequirementButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    template = $template.get(\"us/us-team-requirement-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        canEdit = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\r\n\r\n        render = (us) ->\r\n            ctx = {\r\n                canEdit: canEdit()\r\n                isRequired: us.team_requirement\r\n            }\r\n            html = template(ctx)\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (team_requirement) ->\r\n            currentLoading = $loading()\r\n                .target($el.find(\"label\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (us) ->\r\n                us.team_requirement = team_requirement\r\n\r\n                return us\r\n\r\n            transform.then =>\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                currentLoading.finish()\r\n                $confirm.notify(\"error\")\r\n\r\n        $el.on \"click\", \".team-requirement\", (event) ->\r\n            return if not canEdit()\r\n\r\n            team_requirement = not $model.$modelValue.team_requirement\r\n\r\n            save(team_requirement)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.team_requirement\r\n        , () ->\r\n            us = $model.$modelValue\r\n\r\n            render(us) if us\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgUsTeamRequirementButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", UsTeamRequirementButtonDirective])\r\n\r\n#############################################################################\r\n## User story client requirements button directive\r\n#############################################################################\r\n\r\nUsClientRequirementButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $template, $compile) ->\r\n    template = $template.get(\"us/us-client-requirement-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        canEdit = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\r\n\r\n        render = (us) ->\r\n            ctx = {\r\n                canEdit: canEdit()\r\n                isRequired: us.client_requirement\r\n            }\r\n            html = $compile(template(ctx))($scope)\r\n            $el.html(html)\r\n\r\n        save = (client_requirement) ->\r\n            currentLoading = $loading()\r\n                .target($el.find(\"label\"))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (us) ->\r\n                us.client_requirement = client_requirement\r\n\r\n                return us\r\n\r\n            transform.then =>\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n        $el.on \"click\", \".client-requirement\", (event) ->\r\n            return if not canEdit()\r\n\r\n            client_requirement = not $model.$modelValue.client_requirement\r\n            save(client_requirement)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.client_requirement\r\n        , () ->\r\n            us = $model.$modelValue\r\n            render(us) if us\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgUsClientRequirementButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\",\r\n                                                 UsClientRequirementButtonDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/tasks/detail.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ngroupBy = @.taiga.groupBy\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaTasks\")\r\n\r\n\r\n#############################################################################\r\n## Task Detail Controller\r\n#############################################################################\r\n\r\nclass TaskDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$log\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\r\n                  @log, @appMetaService, @navUrls, @analytics, @translate, @modelTransform, @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.taskRef = @params.taskref\r\n        @scope.sectionName = @translate.instant(\"TASK.SECTION_NAME\")\r\n        @.initializeEventHandlers()\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            @._setMeta()\r\n            @.initializeOnDeleteGoToUrl()\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    _setMeta: ->\r\n        title = @translate.instant(\"TASK.PAGE_TITLE\", {\r\n            taskRef: \"##{@scope.task.ref}\"\r\n            taskSubject: @scope.task.subject\r\n            projectName: @scope.project.name\r\n        })\r\n        description = @translate.instant(\"TASK.PAGE_DESCRIPTION\", {\r\n            taskStatus: @scope.statusById[@scope.task.status]?.name or \"--\"\r\n            taskDescription: angular.element(@scope.task.description_html or \"\").text()\r\n        })\r\n        @appMetaService.setAll(title, description)\r\n\r\n    initializeEventHandlers: ->\r\n        @scope.$on \"attachment:create\", =>\r\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on task\", 1)\r\n        @scope.$on \"custom-attributes-values:edit\", =>\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        @scope.$on \"comment:new\", =>\r\n            @.loadTask()\r\n\r\n    initializeOnDeleteGoToUrl: ->\r\n        ctx = {project: @scope.project.slug}\r\n        @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\r\n        if @scope.project.is_backlog_activated\r\n            if @scope.task.milestone\r\n                ctx.sprint = @scope.sprint.slug\r\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-taskboard\", ctx)\r\n            else if @scope.task.us\r\n                ctx.ref = @scope.us.ref\r\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-userstories-detail\", ctx)\r\n        else if @scope.project.is_kanban_activated\r\n            if @scope.us\r\n                ctx.ref = @scope.us.ref\r\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-userstories-detail\", ctx)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.statusList = project.task_statuses\r\n        @scope.statusById = groupBy(project.task_statuses, (x) -> x.id)\r\n        return project\r\n\r\n    loadTask: ->\r\n        return @rs.tasks.getByRef(@scope.projectId, @params.taskref).then (task) =>\r\n            @scope.task = task\r\n            @scope.taskId = task.id\r\n            @scope.commentModel = task\r\n\r\n            @modelTransform.setObject(@scope, 'task')\r\n\r\n            if @scope.task.neighbors.previous?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.task.neighbors.previous.ref\r\n                }\r\n                @scope.previousUrl = @navUrls.resolve(\"project-tasks-detail\", ctx)\r\n\r\n            if @scope.task.neighbors.next?.ref?\r\n                ctx = {\r\n                    project: @scope.project.slug\r\n                    ref: @scope.task.neighbors.next.ref\r\n                }\r\n                @scope.nextUrl = @navUrls.resolve(\"project-tasks-detail\", ctx)\r\n            return task\r\n\r\n    loadSprint: ->\r\n        if @scope.task.milestone\r\n            return @rs.sprints.get(@scope.task.project, @scope.task.milestone).then (sprint) =>\r\n                @scope.sprint = sprint\r\n                return sprint\r\n\r\n    loadUserStory: ->\r\n        if @scope.task.user_story\r\n            return @rs.userstories.get(@scope.task.project, @scope.task.user_story).then (us) =>\r\n                @scope.us = us\r\n                return us\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        return @.loadTask().then(=> @q.all([@.loadSprint(), @.loadUserStory()]))\r\n\r\n    ###\r\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\r\n    #       See app/modules/components/vote-button for more info\r\n    ###\r\n    onUpvote: ->\r\n        onSuccess = =>\r\n            @.loadTask()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.tasks.upvote(@scope.taskId).then(onSuccess, onError)\r\n\r\n    onDownvote: ->\r\n        onSuccess = =>\r\n            @.loadTask()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.tasks.downvote(@scope.taskId).then(onSuccess, onError)\r\n\r\n    ###\r\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\r\n    #       See app/modules/components/watch-button for more info\r\n    ###\r\n    onWatch: ->\r\n        onSuccess = =>\r\n            @.loadTask()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.tasks.watch(@scope.taskId).then(onSuccess, onError)\r\n\r\n    onUnwatch: ->\r\n        onSuccess = =>\r\n            @.loadTask()\r\n            @rootscope.$broadcast(\"object:updated\")\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        return @rs.tasks.unwatch(@scope.taskId).then(onSuccess, onError)\r\n\r\nmodule.controller(\"TaskDetailController\", TaskDetailController)\r\n\r\n\r\n#############################################################################\r\n## Task status display directive\r\n#############################################################################\r\n\r\nTaskStatusDisplayDirective = ($template, $compile) ->\r\n    # Display if a Task is open or closed and its taskboard status.\r\n    #\r\n    # Example:\r\n    #     tg-task-status-display(ng-model=\"task\")\r\n    #\r\n    # Requirements:\r\n    #   - Task object (ng-model)\r\n    #   - scope.statusById object\r\n\r\n    template = $template.get(\"common/components/status-display.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (task) ->\r\n            status =  $scope.statusById[task.status]\r\n\r\n            html = template({\r\n                is_closed: status.is_closed\r\n                status: status\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.ngModel, (task) ->\r\n            render(task) if task?\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgTaskStatusDisplay\", [\"$tgTemplate\", \"$compile\", TaskStatusDisplayDirective])\r\n\r\n\r\n#############################################################################\r\n## Task status button directive\r\n#############################################################################\r\n\r\nTaskStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $compile, $translate, $template) ->\r\n    # Display the status of Task and you can edit it.\r\n    #\r\n    # Example:\r\n    #     tg-task-status-button(ng-model=\"task\")\r\n    #\r\n    # Requirements:\r\n    #   - Task object (ng-model)\r\n    #   - scope.statusById object\r\n    #   - $scope.project.my_permissions\r\n\r\n    template = $template.get(\"common/components/status-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\r\n\r\n        render = (task) =>\r\n            status = $scope.statusById[task.status]\r\n\r\n            html = $compile(template({\r\n                status: status\r\n                statuses: $scope.statusList\r\n                editable: isEditable()\r\n            }))($scope)\r\n\r\n            $el.html(html)\r\n\r\n        save = (status) ->\r\n            currentLoading = $loading()\r\n                .target($el)\r\n                .start()\r\n\r\n            transform = $modelTransform.save (task) ->\r\n                task.status = status\r\n\r\n                return task\r\n\r\n            onSuccess = ->\r\n                $rootScope.$broadcast(\"object:updated\")\r\n                currentLoading.finish()\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            transform.then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".js-edit-status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            $el.find(\".pop-status\").popover().open()\r\n\r\n        $el.on \"click\", \".status\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            return if not isEditable()\r\n\r\n            target = angular.element(event.currentTarget)\r\n\r\n            $.fn.popover().closeAll()\r\n\r\n            save(target.data(\"status-id\"))\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.status\r\n        , () ->\r\n            task = $model.$modelValue\r\n            render(task) if task\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgTaskStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\r\n                                        \"$compile\", \"$translate\", \"$tgTemplate\", TaskStatusButtonDirective])\r\n\r\n\r\nTaskIsIocaineButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $compile, $template) ->\r\n    template = $template.get(\"issue/iocaine-button.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\r\n\r\n        render = (task) ->\r\n            if not isEditable() and not task.is_iocaine\r\n                $el.html(\"\")\r\n                return\r\n\r\n            ctx = {\r\n                isIocaine: task.is_iocaine\r\n                isEditable: isEditable()\r\n            }\r\n            html = $compile(template(ctx))($scope)\r\n            $el.html(html)\r\n\r\n        save = (is_iocaine) ->\r\n            currentLoading = $loading()\r\n                .target($el.find('label'))\r\n                .start()\r\n\r\n            transform = $modelTransform.save (task) ->\r\n                task.is_iocaine = is_iocaine\r\n\r\n                return task\r\n\r\n            transform.then ->\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n            transform.finally ->\r\n                currentLoading.finish()\r\n\r\n        $el.on \"click\", \".is-iocaine\", (event) ->\r\n            return if not isEditable()\r\n\r\n            is_iocaine = not $model.$modelValue.is_iocaine\r\n            save(is_iocaine)\r\n\r\n        $scope.$watch () ->\r\n            return $model.$modelValue?.is_iocaine\r\n        , () ->\r\n            task = $model.$modelValue\r\n            render(task) if task\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgTaskIsIocaineButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\r\n                                           \"$compile\", \"$tgTemplate\", TaskIsIocaineButtonDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/team/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\n\r\nmodule = angular.module(\"taigaTeam\")\r\n\r\n#############################################################################\r\n## Team Controller\r\n#############################################################################\r\n\r\nclass TeamController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$location\",\r\n        \"$tgNavUrls\",\r\n        \"tgAppMetaService\",\r\n        \"$tgAuth\",\r\n        \"$translate\",\r\n        \"tgProjectService\",\r\n        \"tgErrorHandlingService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @rs, @params, @q, @location, @navUrls, @appMetaService, @auth,\r\n                  @translate, @projectService, @errorHandlingService) ->\r\n        @scope.sectionName = \"TEAM.SECTION_NAME\"\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then =>\r\n            title = @translate.instant(\"TEAM.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @translate.instant(\"TEAM.PAGE_DESCRIPTION\", {\r\n                projectName: @scope.project.name,\r\n                projectDescription: @scope.project.description\r\n            })\r\n            @appMetaService.setAll(title, description)\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    setRole: (role) ->\r\n        if role\r\n            @scope.filtersRole = role\r\n        else\r\n            @scope.filtersRole = null\r\n\r\n    loadMembers: ->\r\n        user = @auth.getUser()\r\n\r\n        # Calculate totals\r\n        @scope.totals = {}\r\n        for member in @scope.activeUsers\r\n            @scope.totals[member.id] = 0\r\n\r\n        # Get current user\r\n        @scope.currentUser = _.find(@scope.activeUsers, {id: user?.id})\r\n\r\n        # Get member list without current user\r\n        @scope.memberships = _.reject(@scope.activeUsers, {id: user?.id})\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n\r\n        @scope.issuesEnabled = project.is_issues_activated\r\n        @scope.tasksEnabled = project.is_kanban_activated or project.is_backlog_activated\r\n        @scope.wikiEnabled = project.is_wiki_activated\r\n        @scope.owner = project.owner.id\r\n\r\n        return project\r\n\r\n    loadMemberStats: ->\r\n        return @rs.projects.memberStats(@scope.projectId).then (stats) =>\r\n          totals = {}\r\n          _.forEach @scope.totals, (total, userId) =>\r\n              vals = _.map(stats, (memberStats, statsKey) -> memberStats[userId])\r\n              total = _.reduce(vals, (sum, el) -> sum + el)\r\n              @scope.totals[userId] = total\r\n\r\n          @scope.stats = @._processStats(stats)\r\n          @scope.stats.totals = @scope.totals\r\n\r\n    _processStat: (stat) ->\r\n        max = _.max(_.toArray(stat))\r\n        min = _.min(_.toArray(stat))\r\n\r\n        singleStat = Object()\r\n        for own key, value of stat\r\n            if value == min\r\n                singleStat[key] = 0.1\r\n            else if value == max\r\n                singleStat[key] = 1\r\n            else\r\n                singleStat[key] = (value * 0.5) / max\r\n\r\n        return singleStat\r\n\r\n    _processStats: (stats) ->\r\n        for key,value of stats\r\n            stats[key] = @._processStat(value)\r\n        return stats\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @.loadMembers()\r\n\r\n        userRoles = _.map @scope.users, (user) -> user.role\r\n\r\n        @scope.roles = _.filter @scope.roles, (role) -> userRoles.indexOf(role.id) != -1\r\n\r\n        return @.loadMemberStats()\r\n\r\nmodule.controller(\"TeamController\", TeamController)\r\n\r\n\r\n#############################################################################\r\n## Team Filters Directive\r\n#############################################################################\r\n\r\nTeamFiltersDirective = () ->\r\n    return {\r\n        templateUrl: \"team/team-filter.html\"\r\n    }\r\n\r\nmodule.directive(\"tgTeamFilters\", [TeamFiltersDirective])\r\n\r\n\r\n#############################################################################\r\n## Team Member Stats Directive\r\n#############################################################################\r\n\r\nTeamMemberStatsDirective = () ->\r\n    return {\r\n        templateUrl: \"team/team-member-stats.html\",\r\n        scope: {\r\n            stats: \"=\",\r\n            userId: \"=user\"\r\n            issuesEnabled: \"=issuesenabled\"\r\n            tasksEnabled: \"=tasksenabled\"\r\n            wikiEnabled: \"=wikienabled\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgTeamMemberStats\", TeamMemberStatsDirective)\r\n\r\n\r\n#############################################################################\r\n## Team Current User Directive\r\n#############################################################################\r\n\r\nTeamMemberCurrentUserDirective = () ->\r\n    return {\r\n        templateUrl: \"team/team-member-current-user.html\"\r\n        scope: {\r\n            project: \"=project\",\r\n            currentUser: \"=currentuser\",\r\n            stats: \"=\",\r\n            issuesEnabled: \"=issuesenabled\",\r\n            tasksEnabled: \"=tasksenabled\",\r\n            wikiEnabled: \"=wikienabled\",\r\n            owner: \"=owner\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgTeamCurrentUser\", TeamMemberCurrentUserDirective)\r\n\r\n\r\n#############################################################################\r\n## Team Members Directive\r\n#############################################################################\r\n\r\nTeamMembersDirective = () ->\r\n    template = \"team/team-members.html\"\r\n\r\n    return {\r\n        templateUrl: template\r\n        scope: {\r\n            memberships: \"=\",\r\n            filtersQ: \"=filtersq\",\r\n            filtersRole: \"=filtersrole\",\r\n            stats: \"=\",\r\n            issuesEnabled: \"=issuesenabled\",\r\n            tasksEnabled: \"=tasksenabled\",\r\n            wikiEnabled: \"=wikienabled\",\r\n            owner: \"=owner\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgTeamMembers\", TeamMembersDirective)\r\n\r\n\r\n#############################################################################\r\n## Leave project Directive\r\n#############################################################################\r\n\r\nLeaveProjectDirective = ($repo, $confirm, $location, $rs, $navurls, $translate, lightboxFactory, currentUserService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        leaveConfirm = () ->\r\n            leave_project_text = $translate.instant(\"TEAM.ACTION_LEAVE_PROJECT\")\r\n            confirm_leave_project_text = $translate.instant(\"TEAM.CONFIRM_LEAVE_PROJECT\")\r\n\r\n            $confirm.ask(leave_project_text, confirm_leave_project_text).then (response) =>\r\n                promise = $rs.projects.leave($scope.project.id)\r\n\r\n                promise.then =>\r\n                    currentUserService.loadProjects().then () ->\r\n                        response.finish()\r\n                        $confirm.notify(\"success\")\r\n                        $location.path($navurls.resolve(\"home\"))\r\n\r\n                promise.then null, (response) ->\r\n                    response.finish()\r\n                    $confirm.notify('error', response.data._error_message)\r\n\r\n        $scope.leave = () ->\r\n            if $scope.project.owner.id == $scope.user.id\r\n                lightboxFactory.create(\"tg-lightbox-leave-project-warning\", {\r\n                    class: \"lightbox lightbox-leave-project-warning\"\r\n                }, {\r\n                    isCurrentUser: true,\r\n                    project: $scope.project\r\n                })\r\n            else\r\n                leaveConfirm()\r\n\r\n    return {\r\n        scope: {\r\n            user: \"=\",\r\n            project: \"=\"\r\n        },\r\n        templateUrl: \"team/leave-project.html\",\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgLeaveProject\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"$tgResources\", \"$tgNavUrls\", \"$translate\", \"tgLightboxFactory\", \"tgCurrentUserService\",\r\n                                    LeaveProjectDirective])\r\n\r\n\r\n#############################################################################\r\n## Team Filters\r\n#############################################################################\r\n\r\nmembersFilter = ->\r\n    return (members, filtersQ, filtersRole) ->\r\n        return _.filter members, (m) -> (not filtersRole or m.role == filtersRole.id) and\r\n                                        (not filtersQ or m.full_name.search(new RegExp(filtersQ, \"i\")) >= 0)\r\n\r\nmodule.filter('membersFilter', membersFilter)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/wiki/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaWiki\")\r\n\r\n#############################################################################\r\n## Wiki Detail Controller\r\n#############################################################################\r\n\r\nclass WikiDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgModel\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$filter\",\r\n        \"$log\",\r\n        \"tgAppMetaService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAnalytics\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @model, @confirm, @rs, @params, @q, @location,\r\n                  @filter, @log, @appMetaService, @navUrls, @analytics, @translate, @errorHandlingService, @projectService) ->\r\n        @scope.$on(\"wiki:links:move\", @.moveLink)\r\n        @scope.$on(\"wikipage:add\", @.loadWiki)\r\n        @scope.projectSlug = @params.pslug\r\n        @scope.wikiSlug = @params.slug\r\n        @scope.sectionName = \"Wiki\"\r\n        @scope.linksVisible = false\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Success\r\n        promise.then () => @._setMeta()\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    _setMeta: ->\r\n        title =  @translate.instant(\"WIKI.PAGE_TITLE\", {\r\n            wikiPageName: @scope.wikiSlug\r\n            projectName: @scope.project.name\r\n        })\r\n        description =  @translate.instant(\"WIKI.PAGE_DESCRIPTION\", {\r\n            wikiPageContent: angular.element(@scope.wiki?.html or \"\").text()\r\n            totalEditions: @scope.wiki?.editions or 0\r\n            lastModifiedDate: moment(@scope.wiki?.modified_date).format(@translate.instant(\"WIKI.DATETIME\"))\r\n        })\r\n\r\n        @appMetaService.setAll(title, description)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.is_wiki_activated\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadWiki: =>\r\n        promise = @rs.wiki.getBySlug(@scope.projectId, @params.slug)\r\n        promise.then (wiki) =>\r\n            @scope.wiki = wiki\r\n            @scope.wikiId = wiki.id\r\n            return @scope.wiki\r\n\r\n        promise.then null, (xhr) =>\r\n            @scope.wikiId = null\r\n\r\n            if @scope.project.my_permissions.indexOf(\"add_wiki_page\") == -1\r\n                return null\r\n\r\n            data = {\r\n                project: @scope.projectId\r\n                slug: @scope.wikiSlug\r\n                content: \"\"\r\n            }\r\n            @scope.wiki = @model.make_model(\"wiki\", data)\r\n            return @scope.wiki\r\n\r\n    loadWikiLinks: ->\r\n        return @rs.wiki.listLinks(@scope.projectId).then (wikiLinks) =>\r\n            @scope.wikiLinks = wikiLinks\r\n\r\n            for link in @scope.wikiLinks\r\n                link.url = @navUrls.resolve(\"project-wiki-page\", {\r\n                    project: @scope.projectSlug\r\n                    slug: link.href\r\n                })\r\n\r\n            selectedWikiLink = _.find(wikiLinks, {href: @scope.wikiSlug})\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n        @q.all([@.loadWikiLinks(), @.loadWiki()]).then @.checkLinksPerms.bind(this)\r\n\r\n    checkLinksPerms: ->\r\n        if @scope.project.my_permissions.indexOf(\"add_wiki_link\") != -1 ||\r\n          (@scope.project.my_permissions.indexOf(\"view_wiki_links\") != -1 && @scope.wikiLinks.length)\r\n            @scope.linksVisible = true\r\n\r\n    delete: ->\r\n        title = @translate.instant(\"WIKI.DELETE_LIGHTBOX_TITLE\")\r\n        message = @scope.wikiSlug\r\n\r\n        @confirm.askOnDelete(title, message).then (askResponse) =>\r\n            onSuccess = =>\r\n                askResponse.finish()\r\n                ctx = {project: @scope.projectSlug}\r\n                @location.path(@navUrls.resolve(\"project-wiki\", ctx))\r\n                @confirm.notify(\"success\")\r\n                @.loadWiki()\r\n\r\n            onError = =>\r\n                askResponse.finish(false)\r\n                @confirm.notify(\"error\")\r\n\r\n            @repo.remove(@scope.wiki).then onSuccess, onError\r\n\r\n    moveLink: (ctx, item, itemIndex) =>\r\n        values = @scope.wikiLinks\r\n        r = values.indexOf(item)\r\n        values.splice(r, 1)\r\n        values.splice(itemIndex, 0, item)\r\n        _.each values, (value, index) ->\r\n            value.order = index\r\n\r\n        @repo.saveAll(values)\r\n\r\nmodule.controller(\"WikiDetailController\", WikiDetailController)\r\n\r\n\r\n#############################################################################\r\n## Wiki Summary Directive\r\n#############################################################################\r\n\r\nWikiSummaryDirective = ($log, $template, $compile, $translate, avatarService) ->\r\n    template = $template.get(\"wiki/wiki-summary.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        render = (wiki) ->\r\n            if not $scope.usersById?\r\n                $log.error \"WikiSummaryDirective requires userById set in scope.\"\r\n            else\r\n                user = $scope.usersById[wiki.last_modifier]\r\n\r\n            avatar = avatarService.getAvatar(user)\r\n\r\n            if user is undefined\r\n                user = {name: \"unknown\", avatar: avatar}\r\n            else\r\n                user = {name: user.full_name_display, avatar: avatar}\r\n\r\n            ctx = {\r\n                totalEditions: wiki.editions\r\n                lastModifiedDate: moment(wiki.modified_date).format($translate.instant(\"WIKI.DATETIME\"))\r\n                user: user\r\n            }\r\n            html = template(ctx)\r\n            html = $compile(html)($scope)\r\n            $el.html(html)\r\n\r\n        $scope.$watch $attrs.ngModel, (wikiPage) ->\r\n            return if not wikiPage\r\n            render(wikiPage)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgWikiSummary\", [\"$log\", \"$tgTemplate\", \"$compile\", \"$translate\",  \"tgAvatarService\", WikiSummaryDirective])\r\n\r\nWikiWysiwyg = ($modelTransform, $rootscope, $confirm, attachmentsFullService,\r\n$qqueue, $repo, $analytics, activityService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.editableDescription = false\r\n\r\n        $scope.saveDescription = $qqueue.bindAdd (description, cb) ->\r\n            onSuccess = (wikiPage) ->\r\n                if not $scope.item.id?\r\n                    $analytics.trackEvent(\"wikipage\", \"create\", \"create wiki page\", 1)\r\n                    $scope.$emit(\"wikipage:add\")\r\n\r\n                activityService.fetchEntries(true)\r\n                $confirm.notify(\"success\")\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n\r\n            $scope.item.content =  description\r\n\r\n            if $scope.item.id?\r\n                promise = $repo.save($scope.item).then(onSuccess, onError)\r\n            else\r\n                promise = $repo.create(\"wiki\", $scope.item).then(onSuccess, onError)\r\n\r\n            promise.finally(cb)\r\n\r\n        uploadFile = (file, cb) ->\r\n            return attachmentsFullService.addAttachment($scope.project.id, $scope.item.id, 'wiki_page', file).then (result) ->\r\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']))\r\n\r\n        $scope.uploadFiles = (files, cb) ->\r\n            for file in files\r\n                uploadFile(file, cb)\r\n\r\n        $scope.$watch $attrs.model, (value) ->\r\n            return if not value\r\n            $scope.item = value\r\n            $scope.version = value.version\r\n            $scope.storageKey = $scope.project.id + \"-\" + value.id + \"-wiki\" \r\n\r\n        $scope.$watch 'project', (project) ->\r\n            return if !project\r\n\r\n            $scope.editableDescription = project.my_permissions.indexOf(\"modify_wiki_page\") != -1\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        template: \"\"\"\r\n            <div>\r\n                <tg-wysiwyg\r\n                    ng-if=\"editableDescription\"\r\n                    version='version'\r\n                    storage-key='storageKey'\r\n                    content='item.content'\r\n                    on-save='saveDescription(text, cb)'\r\n                    on-upload-file='uploadFiles(files, cb)'>\r\n                </tg-wysiwyg>\r\n\r\n                <div\r\n                    class=\"wysiwyg\"\r\n                    ng-if=\"!editableDescription && item.content.length\"\r\n                    ng-bind-html=\"item.content | markdownToHTML\"></div>\r\n\r\n                <div\r\n                    class=\"wysiwyg\"\r\n                    ng-if=\"!editableDescription && !item.content.length\">\r\n                    {{'COMMON.DESCRIPTION.NO_DESCRIPTION' | translate}}\r\n                </div>\r\n            </div>\r\n        \"\"\"\r\n    }\r\n\r\nmodule.directive(\"tgWikiWysiwyg\", [\r\n    \"$tgQueueModelTransformation\",\r\n    \"$rootScope\",\r\n    \"$tgConfirm\",\r\n    \"tgAttachmentsFullService\",\r\n    \"$tgQqueue\", \"$tgRepo\", \"$tgAnalytics\", \"tgActivityService\"\r\n    WikiWysiwyg])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/wiki/nav.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaWiki\")\r\n\r\n\r\n#############################################################################\r\n## Wiki Main Directive\r\n#############################################################################\r\n\r\nWikiNavDirective = ($tgrepo, $log, $location, $confirm, $analytics, $loading, $template,\r\n                    $compile, $translate) ->\r\n    template = $template.get(\"wiki/wiki-nav.html\", true)\r\n\r\n    linkWikiLinks = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        if not $attrs.ngModel?\r\n            return $log.error \"WikiNavDirective: no ng-model attr is defined\"\r\n\r\n        addWikiLinkPermission = $scope.project.my_permissions.indexOf(\"add_wiki_link\") > -1\r\n        drake = null\r\n\r\n        render = (wikiLinks) ->\r\n            addWikiLinkPermission = $scope.project.my_permissions.indexOf(\"add_wiki_link\") > -1\r\n            deleteWikiLinkPermission = $scope.project.my_permissions.indexOf(\"delete_wiki_link\") > -1\r\n\r\n            html = template({\r\n                wikiLinks: wikiLinks,\r\n                projectSlug: $scope.projectSlug\r\n                addWikiLinkPermission: addWikiLinkPermission\r\n                deleteWikiLinkPermission: deleteWikiLinkPermission\r\n            })\r\n\r\n            html = $compile(html)($scope)\r\n\r\n            $el.off()\r\n            if addWikiLinkPermission and drake\r\n                drake.destroy()\r\n\r\n            $el.html(html)\r\n\r\n            if addWikiLinkPermission\r\n                itemEl = null\r\n                tdom = $el.find(\".sortable\")\r\n\r\n                drake = dragula([tdom[0]], {\r\n                    direction: 'vertical',\r\n                    copySortSource: false,\r\n                    copy: false,\r\n                    mirrorContainer: tdom[0],\r\n                    moves: (item) -> return $(item).is('li')\r\n                })\r\n\r\n                drake.on 'dragend', (item) ->\r\n                    itemEl = $(item)\r\n                    item = itemEl.scope().link\r\n                    itemIndex = itemEl.index()\r\n                    $scope.$emit(\"wiki:links:move\", item, itemIndex)\r\n\r\n                scroll = autoScroll(window, {\r\n                    margin: 20,\r\n                    pixels: 30,\r\n                    scrollWhenOutside: true,\r\n                    autoScroll: () ->\r\n                        return this.down && drake.dragging\r\n                })\r\n\r\n            $el.on \"click\", \".add-button\", (event) ->\r\n                event.preventDefault()\r\n                $el.find(\".new\").removeClass(\"hidden\")\r\n                $el.find(\".new input\").focus()\r\n                $el.find(\".add-button\").hide()\r\n\r\n            $el.on \"click\", \".js-delete-link\", (event) ->\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                target = angular.element(event.currentTarget)\r\n                linkId = target.parents('.wiki-link').data('id')\r\n\r\n                title = $translate.instant(\"WIKI.DELETE_LINK_TITLE\")\r\n                message = $scope.wikiLinks[linkId].title\r\n\r\n                $confirm.askOnDelete(title, message).then (askResponse) =>\r\n                    promise = $tgrepo.remove($scope.wikiLinks[linkId])\r\n                    promise.then ->\r\n                        promise = $ctrl.loadWikiLinks()\r\n                        promise.then ->\r\n                            askResponse.finish()\r\n                            render($scope.wikiLinks)\r\n                        promise.then null, ->\r\n                            askResponse.finish()\r\n                    promise.then null, ->\r\n                        askResponse.finish(false)\r\n                        $confirm.notify(\"error\")\r\n\r\n            $el.on \"keyup\", \".new input\", (event) ->\r\n                event.preventDefault()\r\n                if event.keyCode == 13\r\n                    target = angular.element(event.currentTarget)\r\n                    newLink = target.val()\r\n\r\n                    currentLoading = $loading()\r\n                        .target($el.find(\".new\"))\r\n                        .start()\r\n\r\n                    promise = $tgrepo.create(\"wiki-links\", {project: $scope.projectId, title: newLink})\r\n                    promise.then ->\r\n                        $analytics.trackEvent(\"wikilink\", \"create\", \"create wiki link\", 1)\r\n                        loadPromise = $ctrl.loadWikiLinks()\r\n                        loadPromise.then ->\r\n                            currentLoading.finish()\r\n                            $el.find(\".new\").addClass(\"hidden\")\r\n                            $el.find(\".new input\").val('')\r\n                            $el.find(\".add-button\").show()\r\n                            render($scope.wikiLinks)\r\n                        loadPromise.then null, ->\r\n                            currentLoading.finish()\r\n                            $el.find(\".new\").addClass(\"hidden\")\r\n                            $el.find(\".new input\").val('')\r\n                            $el.find(\".add-button\").show()\r\n                            $confirm.notify(\"error\", \"Error loading wiki links\")\r\n\r\n                    promise.then null, (error) ->\r\n                        currentLoading.finish()\r\n                        $el.find(\".new input\").val(newLink)\r\n                        $el.find(\".new input\").focus().select()\r\n                        if error?.__all__?[0]?\r\n                            $confirm.notify(\"error\", \"The link already exists\")\r\n                        else\r\n                            $confirm.notify(\"error\")\r\n\r\n                else if event.keyCode == 27\r\n                    target = angular.element(event.currentTarget)\r\n                    $el.find(\".new\").addClass(\"hidden\")\r\n                    $el.find(\".new input\").val('')\r\n                    $el.find(\".add-button\").show()\r\n\r\n        bindOnce($scope, $attrs.ngModel, render)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        linkWikiLinks($scope, $el, $attrs)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgWikiNav\", [\"$tgRepo\", \"$log\", \"$tgLocation\", \"$tgConfirm\", \"$tgAnalytics\",\r\n                               \"$tgLoading\", \"$tgTemplate\", \"$compile\", \"$translate\", WikiNavDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/wiki/pages-list.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\n\r\nmodule = angular.module(\"taigaWiki\")\r\n\r\n#############################################################################\r\n## Wiki Pages List Controller\r\n#############################################################################\r\n\r\nclass WikiPagesListController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgModel\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgNavUrls\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @model, @confirm, @rs, @params, @q,\r\n                  @navUrls, @errorHandlingService, @projectService) ->\r\n        @scope.projectSlug = @params.pslug\r\n        @scope.wikiSlug = @params.slug\r\n        @scope.sectionName = \"Wiki\"\r\n        @scope.linksVisible = false\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        # On Error\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.is_wiki_activated\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n\r\n        return project\r\n\r\n    loadWikiPages: ->\r\n        promise = @rs.wiki.list(@scope.projectId).then (wikipages) =>\r\n            @scope.wikipages = wikipages\r\n\r\n    loadWikiLinks: ->\r\n        return @rs.wiki.listLinks(@scope.projectId).then (wikiLinks) =>\r\n            @scope.wikiLinks = wikiLinks\r\n\r\n            for link in @scope.wikiLinks\r\n                link.url = @navUrls.resolve(\"project-wiki-page\", {\r\n                    project: @scope.projectSlug\r\n                    slug: link.href\r\n                })\r\n\r\n            selectedWikiLink = _.find(wikiLinks, {href: @scope.wikiSlug})\r\n\r\n    loadInitialData: ->\r\n        project = @.loadProject()\r\n\r\n        @.fillUsersAndRoles(project.members, project.roles)\r\n\r\n        @q.all([@.loadWikiLinks(), @.loadWikiPages()]).then(@.checkLinksPerms.bind(this))\r\n\r\n    checkLinksPerms: ->\r\n        if @scope.project.my_permissions.indexOf(\"add_wiki_link\") != -1 ||\r\n          (@scope.project.my_permissions.indexOf(\"view_wiki_links\") != -1 && @scope.wikiLinks.length)\r\n            @scope.linksVisible = true\r\n\r\nmodule.controller(\"WikiPagesListController\", WikiPagesListController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaKanban\")\r\n\r\n#############################################################################\r\n## Warning message directive\r\n#############################################################################\r\n\r\nLightboxAddMembersWarningMessageDirective = () ->\r\n    return {\r\n          templateUrl: \"admin/memberships-warning-message.html\"\r\n          scope: {\r\n              project: \"=\"\r\n          }\r\n    }\r\n\r\nmodule.directive(\"tgLightboxAddMembersWarningMessage\", [LightboxAddMembersWarningMessageDirective])\r\n\r\n\r\n#############################################################################\r\n## Transfer project ownership\r\n#############################################################################\r\n\r\nLbRequestOwnershipDirective = (lightboxService, rs, confirmService, $translate) ->\r\n    return {\r\n        link: (scope, el) ->\r\n            lightboxService.open(el)\r\n\r\n            scope.request = () ->\r\n                scope.loading = true\r\n\r\n                rs.projects.transferRequest(scope.projectId).then () ->\r\n                    scope.loading = false\r\n\r\n                    lightboxService.close(el)\r\n\r\n                    confirmService.notify(\"success\", $translate.instant(\"ADMIN.PROJECT_PROFILE.REQUEST_OWNERSHIP_SUCCESS\"))\r\n\r\n        templateUrl: \"common/lightbox/lightbox-request-ownership.html\"\r\n    }\r\n\r\nmodule.directive('tgLbRequestOwnership', [\r\n    \"lightboxService\",\r\n    \"tgResources\",\r\n    \"$tgConfirm\",\r\n    \"$translate\",\r\n    LbRequestOwnershipDirective])\r\n\r\nclass ChangeOwnerLightboxController\r\n    constructor: (@rs, @lightboxService, @confirm, @translate) ->\r\n        @.users = []\r\n        @.q = \"\"\r\n        @.commentOpen = false\r\n\r\n    limit: 3\r\n\r\n    normalizeString: (normalizedString) ->\r\n        normalizedString = normalizedString.replace(\"Á\", \"A\").replace(\"Ä\", \"A\").replace(\"À\", \"A\")\r\n        normalizedString = normalizedString.replace(\"É\", \"E\").replace(\"Ë\", \"E\").replace(\"È\", \"E\")\r\n        normalizedString = normalizedString.replace(\"Í\", \"I\").replace(\"Ï\", \"I\").replace(\"Ì\", \"I\")\r\n        normalizedString = normalizedString.replace(\"Ó\", \"O\").replace(\"Ö\", \"O\").replace(\"Ò\", \"O\")\r\n        normalizedString = normalizedString.replace(\"Ú\", \"U\").replace(\"Ü\", \"U\").replace(\"Ù\", \"U\")\r\n        return normalizedString\r\n\r\n    filterUsers: (user) ->\r\n        username = user.full_name_display.toUpperCase()\r\n        username = @.normalizeString(username)\r\n        text = @.q.toUpperCase()\r\n        text = @.normalizeString(text)\r\n\r\n        return _.includes(username, text)\r\n\r\n    getUsers: () ->\r\n        if !@.users.length && !@.q.length\r\n            users =  @.activeUsers\r\n        else\r\n            users = @.users\r\n\r\n        users = users.slice(0, @.limit)\r\n        users = _.reject(users, {\"selected\": true})\r\n\r\n        return _.reject(users, {\"id\": @.currentOwnerId})\r\n\r\n    userSearch: () ->\r\n        @.users = @.activeUsers\r\n\r\n        @.selected = _.find(@.users, {\"selected\": true})\r\n\r\n        @.users = _.filter(@.users, @.filterUsers.bind(this)) if @.q\r\n\r\n    selectUser: (user) ->\r\n        @.activeUsers = _.map @.activeUsers, (user) ->\r\n            user.selected = false\r\n\r\n            return user\r\n\r\n        user.selected = true\r\n\r\n        @.userSearch()\r\n\r\n    submit: () ->\r\n        @.loading = true\r\n        @rs.projects.transferStart(@.projectId, @.selected.id, @.comment)\r\n            .then () =>\r\n                @.loading = false\r\n                @lightboxService.closeAll()\r\n\r\n                title = @translate.instant(\"ADMIN.PROJECT_PROFILE.CHANGE_OWNER_SUCCESS_TITLE\")\r\n                desc = @translate.instant(\"ADMIN.PROJECT_PROFILE.CHANGE_OWNER_SUCCESS_DESC\")\r\n\r\n                @confirm.success(title, desc, {\r\n                    type: \"svg\",\r\n                    name: \"icon-speak-up\"\r\n                })\r\n\r\nChangeOwnerLightboxController.$inject = [\r\n        \"tgResources\",\r\n        \"lightboxService\",\r\n        \"$tgConfirm\",\r\n        \"$translate\"\r\n]\r\n\r\nmodule.controller('ChangeOwnerLightbox', ChangeOwnerLightboxController)\r\n\r\nChangeOwnerLightboxDirective = (lightboxService, lightboxKeyboardNavigationService, $template, $compile) ->\r\n    link = (scope, el) ->\r\n        lightboxService.open(el)\r\n\r\n    return {\r\n        scope: true,\r\n        controller: \"ChangeOwnerLightbox\",\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            currentOwnerId: \"=\",\r\n            projectId: \"=\",\r\n            activeUsers: \"=\"\r\n        },\r\n        templateUrl: \"common/lightbox/lightbox-change-owner.html\"\r\n        link:link\r\n    }\r\n\r\n\r\nmodule.directive(\"tgLbChangeOwner\", [\"lightboxService\", \"lightboxKeyboardNavigationService\", \"$tgTemplate\", \"$compile\", ChangeOwnerLightboxDirective])\r\n\r\nTransferProjectStartSuccessDirective = (lightboxService) ->\r\n    link = (scope, el) ->\r\n        scope.close = () ->\r\n            lightboxService.close(el)\r\n\r\n        lightboxService.open(el)\r\n\r\n    return {\r\n        templateUrl: \"common/lightbox/lightbox-transfer-project-start-success.html\"\r\n        link:link\r\n    }\r\n\r\n\r\nmodule.directive(\"tgLbTransferProjectStartSuccess\", [\"lightboxService\", TransferProjectStartSuccessDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/memberships.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\n\r\n\r\n#############################################################################\r\n## Project Memberships Controller\r\n#############################################################################\r\n\r\nclass MembershipsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAnalytics\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"$tgAuth\",\r\n        \"tgLightboxFactory\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @analytics,\r\n                  @appMetaService, @translate, @auth, @lightboxFactory, @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.project = {}\r\n        @scope.filters = {}\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then  =>\r\n           title = @translate.instant(\"ADMIN.MEMBERSHIPS.PAGE_TITLE\", {projectName:  @scope.project.name})\r\n           description = @scope.project.description\r\n           @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"membersform:new:success\", =>\r\n            @.loadInitialData()\r\n            @analytics.trackEvent(\"membership\", \"create\", \"create memberships on admin\", 1)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.i_am_admin\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n\r\n        @scope.canAddUsers = project.max_memberships == null || project.max_memberships > project.total_memberships\r\n\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadMembers: ->\r\n        httpFilters = @.getUrlFilters()\r\n\r\n        return @rs.memberships.list(@scope.projectId, httpFilters).then (data) =>\r\n            @scope.memberships = _.filter(data.models, (membership) ->\r\n                                    membership.user == null or membership.is_user_active)\r\n\r\n            _.map(@scope.memberships, (member) =>\r\n                if member.is_owner\r\n                    @scope.projectOwnerEmail = member.user_email\r\n            )\r\n\r\n            @scope.page = data.current\r\n            @scope.count = data.count\r\n            @scope.paginatedBy = data.paginatedBy\r\n            return data\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n\r\n        return @q.all([\r\n            @.loadMembers(),\r\n            @auth.refresh()\r\n        ])\r\n\r\n    getUrlFilters: ->\r\n        filters = _.pick(@location.search(), \"page\")\r\n        filters.page = 1 if not filters.page\r\n        return filters\r\n\r\n    # Actions\r\n\r\n    addNewMembers:  ->\r\n        @lightboxFactory.create(\r\n            'tg-lb-add-members',\r\n            {\r\n                \"class\": \"lightbox lightbox-add-member\",\r\n                \"project\": \"project\"\r\n            },\r\n            {\r\n                \"project\": @scope.project\r\n            }\r\n        )\r\n\r\n    showLimitUsersWarningMessage: ->\r\n        title = @translate.instant(\"ADMIN.MEMBERSHIPS.LIMIT_USERS_WARNING\")\r\n        message = @translate.instant(\"ADMIN.MEMBERSHIPS.LIMIT_USERS_WARNING_MESSAGE\", {\r\n            members: @scope.project.max_memberships\r\n        })\r\n        icon = \"/\" + window._version + \"/svg/icons/team-question.svg\"\r\n        @confirm.success(title, message, {\r\n            name: icon,\r\n            type: \"img\"\r\n        })\r\n\r\nmodule.controller(\"MembershipsController\", MembershipsController)\r\n\r\n\r\n#############################################################################\r\n## Member Avatar Directive\r\n#############################################################################\r\n\r\nMembershipsDirective = ($template, $compile) ->\r\n    template = $template.get(\"admin/admin-membership-paginator.html\", true)\r\n\r\n    linkPagination = ($scope, $el, $attrs, $ctrl) ->\r\n        # Constants\r\n        afterCurrent = 2\r\n        beforeCurrent = 4\r\n        atBegin = 2\r\n        atEnd = 2\r\n\r\n        $pagEl = $el.find(\".memberships-paginator\")\r\n\r\n        getNumPages = ->\r\n            numPages = $scope.count / $scope.paginatedBy\r\n            if parseInt(numPages, 10) < numPages\r\n                numPages = parseInt(numPages, 10) + 1\r\n            else\r\n                numPages = parseInt(numPages, 10)\r\n\r\n            return numPages\r\n\r\n        renderPagination = ->\r\n            numPages = getNumPages()\r\n\r\n            if numPages <= 1\r\n                $pagEl.hide()\r\n                return\r\n\r\n            pages = []\r\n            options = {}\r\n            options.pages = pages\r\n            options.showPrevious = ($scope.page > 1)\r\n            options.showNext = not ($scope.page == numPages)\r\n\r\n            cpage = $scope.page\r\n\r\n            for i in [1..numPages]\r\n                if i == (cpage + afterCurrent) and numPages > (cpage + afterCurrent + atEnd)\r\n                    pages.push({classes: \"dots\", type: \"dots\"})\r\n                else if i == (cpage - beforeCurrent) and cpage > (atBegin + beforeCurrent)\r\n                    pages.push({classes: \"dots\", type: \"dots\"})\r\n                else if i > (cpage + afterCurrent) and i <= (numPages - atEnd)\r\n                else if i < (cpage - beforeCurrent) and i > atBegin\r\n                else if i == cpage\r\n                    pages.push({classes: \"active\", num: i, type: \"page-active\"})\r\n                else\r\n                    pages.push({classes: \"page\", num: i, type: \"page\"})\r\n\r\n            html = template(options)\r\n            html = $compile(html)($scope)\r\n\r\n            $pagEl.html(html)\r\n            $pagEl.show()\r\n\r\n        $scope.$watch \"memberships\", (value) ->\r\n            # Do nothing if value is not logical true\r\n            return if not value\r\n\r\n            renderPagination()\r\n\r\n        $el.on \"click\", \".memberships-paginator a.next\", (event) ->\r\n            event.preventDefault()\r\n\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", $scope.page + 1)\r\n                $ctrl.loadMembers()\r\n\r\n        $el.on \"click\", \".memberships-paginator a.previous\", (event) ->\r\n            event.preventDefault()\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", $scope.page - 1)\r\n                $ctrl.loadMembers()\r\n\r\n        $el.on \"click\", \".memberships-paginator li.page > a\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            pagenum = target.data(\"pagenum\")\r\n\r\n            $scope.$apply ->\r\n                $ctrl.selectFilter(\"page\", pagenum)\r\n                $ctrl.loadMembers()\r\n\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        linkPagination($scope, $el, $attrs, $ctrl)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgMemberships\", [\"$tgTemplate\", \"$compile\", MembershipsDirective])\r\n\r\n\r\n#############################################################################\r\n## Member Avatar Directive\r\n#############################################################################\r\n\r\nMembershipsRowAvatarDirective = ($log, $template, $translate, $compile, avatarService) ->\r\n    template = $template.get(\"admin/memberships-row-avatar.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        pending = $translate.instant(\"ADMIN.MEMBERSHIP.STATUS_PENDING\")\r\n        render = (member) ->\r\n            avatar = avatarService.getAvatar(member)\r\n\r\n            ctx = {\r\n                full_name: if member.full_name then member.full_name else \"\"\r\n                email: if member.user_email then member.user_email else member.email\r\n                imgurl: avatar.url\r\n                bg: avatar.bg\r\n                pending: if !member.is_user_active then pending else \"\"\r\n                isOwner: member.is_owner\r\n            }\r\n\r\n            html = template(ctx)\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        if not $attrs.tgMembershipsRowAvatar?\r\n            return $log.error \"MembershipsRowAvatarDirective: the directive need a member\"\r\n\r\n        member = $scope.$eval($attrs.tgMembershipsRowAvatar)\r\n        render(member)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgMembershipsRowAvatar\", [\"$log\", \"$tgTemplate\", '$translate', \"$compile\", \"tgAvatarService\", MembershipsRowAvatarDirective])\r\n\r\n\r\n#############################################################################\r\n## Member IsAdminCheckbox Directive\r\n#############################################################################\r\n\r\nMembershipsRowAdminCheckboxDirective = ($log, $repo, $confirm, $template, $compile) ->\r\n    template = $template.get(\"admin/admin-memberships-row-checkbox.html\", true)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        if not $attrs.tgMembershipsRowAdminCheckbox?\r\n            return $log.error \"MembershipsRowAdminCheckboxDirective: the directive need a member\"\r\n\r\n        member = $scope.$eval($attrs.tgMembershipsRowAdminCheckbox)\r\n\r\n        if member.is_owner\r\n            $el.find(\".js-check\").remove()\r\n            return\r\n\r\n        render = (member) ->\r\n            ctx = {inputId: \"is-admin-#{member.id}\"}\r\n\r\n            html = template(ctx)\r\n            html = $compile(html)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        $el.on \"click\", \":checkbox\", (event) =>\r\n            onSuccess = ->\r\n                $confirm.notify(\"success\")\r\n\r\n            onError = (data) ->\r\n                member.revert()\r\n                $el.find(\":checkbox\").prop(\"checked\", member.is_admin)\r\n                $confirm.notify(\"error\", data.is_admin[0])\r\n\r\n            target = angular.element(event.currentTarget)\r\n            member.is_admin = target.prop(\"checked\")\r\n            $repo.save(member).then(onSuccess, onError)\r\n\r\n        html = render(member)\r\n\r\n        if member.is_admin\r\n            $el.find(\":checkbox\").prop(\"checked\", true)\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgMembershipsRowAdminCheckbox\", [\"$log\", \"$tgRepo\", \"$tgConfirm\",\r\n    \"$tgTemplate\", \"$compile\", MembershipsRowAdminCheckboxDirective])\r\n\r\n\r\n#############################################################################\r\n## Member RoleSelector Directive\r\n#############################################################################\r\n\r\nMembershipsRowRoleSelectorDirective = ($log, $repo, $confirm) ->\r\n    template = _.template(\"\"\"\r\n    <select>\r\n        <% _.each(roleList, function(role) { %>\r\n        <option value=\"<%- role.id %>\" <% if(selectedRole === role.id){ %>selected=\"selected\"<% } %>>\r\n            <%- role.name %>\r\n        </option>\r\n        <% }); %>\r\n    </select>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (member) ->\r\n            ctx = {\r\n                roleList: $scope.project.roles,\r\n                selectedRole: member.role\r\n            }\r\n\r\n            html = template(ctx)\r\n            $el.html(html)\r\n\r\n        if not $attrs.tgMembershipsRowRoleSelector?\r\n            return $log.error \"MembershipsRowRoleSelectorDirective: the directive need a member\"\r\n\r\n        $ctrl = $el.controller()\r\n        member = $scope.$eval($attrs.tgMembershipsRowRoleSelector)\r\n        html = render(member)\r\n\r\n        $el.on \"change\", \"select\", (event) =>\r\n            onSuccess = ->\r\n                $confirm.notify(\"success\")\r\n\r\n            onError = ->\r\n                $confirm.notify(\"error\")\r\n\r\n            target = angular.element(event.currentTarget)\r\n            newRole = parseInt(target.val(), 10)\r\n\r\n            if member.role != newRole\r\n                member.role = newRole\r\n                $repo.save(member).then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\n\r\nmodule.directive(\"tgMembershipsRowRoleSelector\", [\"$log\", \"$tgRepo\", \"$tgConfirm\",\r\n                                                  MembershipsRowRoleSelectorDirective])\r\n\r\n\r\n#############################################################################\r\n## Member Actions Directive\r\n#############################################################################\r\n\r\nMembershipsRowActionsDirective = ($log, $repo, $rs, $confirm, $compile, $translate, $location,\r\n                                  $navUrls, lightboxFactory, projectService) ->\r\n    activedTemplate = \"\"\"\r\n    <div class=\"active\"\r\n         translate=\"ADMIN.MEMBERSHIP.STATUS_ACTIVE\">\r\n    </div>\r\n    <a class=\"delete\" href=\"\"\r\n       title=\"{{ 'ADMIN.MEMBERSHIP.DELETE_MEMBER' | translate }}\">\r\n        <tg-svg svg-icon=\"icon-trash\"></tg-svg>\r\n    </a>\r\n    \"\"\"\r\n\r\n    pendingTemplate = \"\"\"\r\n    <a class=\"resend js-resend\" href=\"\"\r\n       title=\"{{ 'ADMIN.MEMBERSHIP.RESEND' | translate }}\"\r\n       translate=\"ADMIN.MEMBERSHIP.RESEND\">\r\n    </a>\r\n    <a class=\"delete\" href=\"\"\r\n       title=\"{{ 'ADMIN.MEMBERSHIP.DELETE_MEMBER' | translate }}\">\r\n        <tg-svg svg-icon=\"icon-trash\"></tg-svg>\r\n    </a>\r\n    \"\"\"\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = (member) ->\r\n            if member.user\r\n                html = $compile(activedTemplate)($scope)\r\n            else\r\n                html = $compile(pendingTemplate)($scope)\r\n\r\n            $el.html(html)\r\n\r\n        if not $attrs.tgMembershipsRowActions?\r\n            return $log.error \"MembershipsRowActionsDirective: the directive need a member\"\r\n\r\n        $ctrl = $el.controller()\r\n        member = $scope.$eval($attrs.tgMembershipsRowActions)\r\n        render(member)\r\n\r\n        $el.on \"click\", \".js-resend\", (event) ->\r\n            event.preventDefault()\r\n            onSuccess = ->\r\n                text = $translate.instant(\"ADMIN.MEMBERSHIP.SUCCESS_SEND_INVITATION\", {\r\n                    email: $scope.member.email\r\n                })\r\n                $confirm.notify(\"success\", text)\r\n            onError = ->\r\n                text = $translate.instant(\"ADMIM.MEMBERSHIP.ERROR_SEND_INVITATION\")\r\n                $confirm.notify(\"error\", text)\r\n\r\n            $rs.memberships.resendInvitation($scope.member.id).then(onSuccess, onError)\r\n\r\n        leaveConfirm = () ->\r\n            title = $translate.instant(\"ADMIN.MEMBERSHIP.DELETE_MEMBER\")\r\n            defaultMsg = $translate.instant(\"ADMIN.MEMBERSHIP.DEFAULT_DELETE_MESSAGE\", {email: member.email})\r\n            message = if member.user then member.full_name else defaultMsg\r\n\r\n            $confirm.askOnDelete(title, message).then (askResponse) ->\r\n                onSuccess = =>\r\n                    askResponse.finish()\r\n                    if member.user != $scope.user.id\r\n                        if $scope.page > 1 && ($scope.count - 1) <= $scope.paginatedBy\r\n                            $ctrl.selectFilter(\"page\", $scope.page - 1)\r\n\r\n                        projectService.fetchProject().then =>\r\n                            $ctrl.loadInitialData()\r\n                    else\r\n                        $location.path($navUrls.resolve(\"home\"))\r\n\r\n                    text = $translate.instant(\"ADMIN.MEMBERSHIP.SUCCESS_DELETE\", {message: message})\r\n                    $confirm.notify(\"success\", text, null, 5000)\r\n\r\n                onError = =>\r\n                    askResponse.finish(false)\r\n\r\n                    text = $translate.instant(\"ADMIN.MEMBERSHIP.ERROR_DELETE\", {message: message})\r\n                    $confirm.notify(\"error\", text)\r\n\r\n                $repo.remove(member).then(onSuccess, onError)\r\n\r\n        $el.on \"click\", \".delete\", (event) ->\r\n            event.preventDefault()\r\n\r\n            if $scope.project.owner.id == member.user\r\n                isCurrentUser = $scope.user.id == member.user\r\n\r\n                lightboxFactory.create(\"tg-lightbox-leave-project-warning\", {\r\n                    class: \"lightbox lightbox-leave-project-warning\"\r\n                }, {\r\n                    isCurrentUser: isCurrentUser,\r\n                    project: $scope.project\r\n                })\r\n            else\r\n                leaveConfirm()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgMembershipsRowActions\", [\"$log\", \"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$compile\",\r\n                                             \"$translate\", \"$tgLocation\", \"$tgNavUrls\", \"tgLightboxFactory\",\r\n                                             \"tgProjectService\", MembershipsRowActionsDirective])\r\n\r\n\r\n#############################################################################\r\n## No more memberships explanation directive\r\n#############################################################################\r\n\r\nNoMoreMembershipsExplanationDirective = () ->\r\n    return {\r\n          templateUrl: \"admin/no-more-memberships-explanation.html\"\r\n          scope: {\r\n              project: \"=\",\r\n              ownerEmail: \"=\"\r\n          }\r\n    }\r\n\r\nmodule.directive(\"tgNoMoreMembershipsExplanation\", [NoMoreMembershipsExplanationDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/nav.coffee\r\n###\r\n\r\nAdminNavigationDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        section = $attrs.tgAdminNavigation\r\n        $el.find(\".active\").removeClass(\"active\")\r\n        $el.find(\"#adminmenu-#{section} a\").addClass(\"active\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\nmodule.directive(\"tgAdminNavigation\", AdminNavigationDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/project-profile.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\nscopeDefer = @.taiga.scopeDefer\r\ntrim = @.taiga.trim\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\n\r\n\r\n#############################################################################\r\n## Project Profile Controller\r\n#############################################################################\r\n\r\nclass ProjectProfileController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"$tgAuth\",\r\n        \"tgCurrentUserService\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\",\r\n        \"$tgModel\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\r\n                  @appMetaService, @translate, @tgAuth, @currentUserService, @errorHandlingService, @projectService, @model) ->\r\n        @scope.project = {}\r\n\r\n        @scope.projectTags = []\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then =>\r\n            sectionName = @translate.instant( @scope.sectionName)\r\n            title = @translate.instant(\"ADMIN.PROJECT_PROFILE.PAGE_TITLE\", {\r\n                     sectionName: sectionName, projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n            @.fillUsersAndRoles(@scope.project.members, @scope.project.roles)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"project:loaded\", =>\r\n            sectionName = @translate.instant(@scope.sectionName)\r\n            title = @translate.instant(\"ADMIN.PROJECT_PROFILE.PAGE_TITLE\", {\r\n                     sectionName: sectionName, projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n        project = @model.make_model(\"projects\", project)\r\n\r\n        if not project.i_am_admin\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.epicStatusList = _.sortBy(project.epic_statuses, \"order\")\r\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\r\n        @scope.pointsList = _.sortBy(project.points, \"order\")\r\n        @scope.taskStatusList = _.sortBy(project.task_statuses, \"order\")\r\n        @scope.issueTypesList = _.sortBy(project.issue_types, \"order\")\r\n        @scope.issueStatusList = _.sortBy(project.issue_statuses, \"order\")\r\n        @scope.prioritiesList = _.sortBy(project.priorities, \"order\")\r\n        @scope.severitiesList = _.sortBy(project.severities, \"order\")\r\n\r\n        scopeDefer @scope, =>\r\n            @scope.$emit('project:loaded', project)\r\n\r\n        @scope.projectTags = _.map @scope.project.tags, (it) =>\r\n            return [it, @scope.project.tags_colors[it]]\r\n\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n\r\n        return @tgAuth.refresh()\r\n\r\n    openDeleteLightbox: ->\r\n        @rootscope.$broadcast(\"deletelightbox:new\", @scope.project)\r\n\r\n    addTag: (name, color) ->\r\n        tags = _.clone(@scope.project.tags)\r\n\r\n        tags.push(name)\r\n\r\n        @scope.projectTags.push([name, null])\r\n        @scope.project.tags = tags\r\n\r\n    deleteTag: (tag) ->\r\n        tags = _.clone(@scope.project.tags)\r\n        _.pull(tags, tag[0])\r\n        _.remove @scope.projectTags, (it) => it[0] == tag[0]\r\n\r\n        @scope.project.tags = tags\r\n\r\nmodule.controller(\"ProjectProfileController\", ProjectProfileController)\r\n\r\n\r\n#############################################################################\r\n## Project Profile Directive\r\n#############################################################################\r\n\r\nProjectProfileDirective = ($repo, $confirm, $loading, $navurls, $location, projectService, currentUserService, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            privacyChanged = $scope.project.isAttributeModified(\"is_private\")\r\n            promise = $repo.save($scope.project)\r\n            promise.then ->\r\n                currentLoading.finish()\r\n                if privacyChanged && $scope.project.is_private\r\n                    $analytics.trackEvent(\r\n                        \"project-privacy-changed\",\r\n                        \"from-public-to-private\",\r\n                        \"Change project privacy from public to private\",\r\n                        1\r\n                    )\r\n                else if privacyChanged && !$scope.project.is_private\r\n                    $analytics.trackEvent(\r\n                        \"project-privacy-changed\",\r\n                        \"from-private-to-public\",\r\n                        \"Change project privacy from private to public\",\r\n                        1\r\n                    )\r\n                $confirm.notify(\"success\")\r\n                newUrl = $navurls.resolve(\"project-admin-project-profile-details\", {\r\n                    project: $scope.project.slug\r\n                })\r\n                $location.path(newUrl)\r\n\r\n                projectService.fetchProject().then () =>\r\n                    $ctrl.loadInitialData()\r\n\r\n                currentUserService.loadProjects()\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectProfile\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgNavUrls\", \"$tgLocation\",\r\n                                      \"tgProjectService\", \"tgCurrentUserService\", \"$tgAnalytics\",\r\n                                      ProjectProfileDirective])\r\n\r\n\r\n#############################################################################\r\n## Project Default Values Directive\r\n#############################################################################\r\n\r\nProjectDefaultValuesDirective = ($rootScope, $repo, $confirm, $loading) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.save($scope.project)\r\n            promise.then ->\r\n                currentLoading.finish()\r\n                $confirm.notify(\"success\")\r\n                $rootScope.$broadcast(\"admin:project-default-values:updated\")\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectDefaultValues\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\r\n                                            ProjectDefaultValuesDirective])\r\n\r\n#############################################################################\r\n## Project Modules Directive\r\n#############################################################################\r\n\r\nProjectModulesDirective = ($rootScope, $repo, $confirm, $loading) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        submit = =>\r\n            form = $el.find(\"form\").checksley()\r\n            form.initializeFields() # Need to reset the form constrains\r\n            form.reset() # Need to reset the form constrains\r\n            return if not form.validate()\r\n\r\n            promise = $repo.save($scope.project)\r\n            promise.then ->\r\n                $scope.$emit(\"project:loaded\", $scope.project)\r\n                $rootScope.$broadcast(\"admin:project-modules:updated\")\r\n                $confirm.notify(\"success\")\r\n\r\n            promise.then null, (data) ->\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        $el.on \"change\", \".module-activation.module-direct-active input\", (event) ->\r\n            event.preventDefault()\r\n\r\n            $scope.$applyAsync(submit)\r\n\r\n        $el.on \"submit\", \"form\", (event) ->\r\n            event.preventDefault()\r\n\r\n            submit()\r\n\r\n        $el.on \"click\", \".save\", (event) ->\r\n            event.preventDefault()\r\n            submit()\r\n\r\n        $el.on \"keydown\", \".videoconference-attributes input\", (e) ->\r\n            return e.which != 32\r\n\r\n        $scope.$watch \"project.videoconferences\", (newVal, oldVal) ->\r\n            # Reset videoconferences_extra_data if videoconference system change\r\n            if newVal? and oldVal? and newVal != oldVal\r\n                $scope.project.videoconferences_extra_data = \"\"\r\n\r\n        $scope.$watch \"isVideoconferenceActivated\", (newValue, oldValue) ->\r\n            if newValue == false\r\n                # Reset videoconference attributes\r\n                $scope.project.videoconferences = null\r\n                $scope.project.videoconferences_extra_data = \"\"\r\n\r\n                # Save when videoconference is desactivated\r\n                submit() if oldValue == true\r\n\r\n        $scope.$watch \"project\", (project) ->\r\n            if project.videoconferences?\r\n                $scope.isVideoconferenceActivated = true\r\n            else\r\n                $scope.isVideoconferenceActivated = false\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectModules\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\r\n                                      ProjectModulesDirective])\r\n\r\n\r\n#############################################################################\r\n## Project Export Directive\r\n#############################################################################\r\n\r\nProjectExportDirective = ($window, $rs, $confirm, $translate, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        buttonsEl = $el.find(\".admin-project-export-buttons\")\r\n        showButtons = -> buttonsEl.removeClass(\"hidden\")\r\n        hideButtons = -> buttonsEl.addClass(\"hidden\")\r\n\r\n        resultEl = $el.find(\".admin-project-export-result\")\r\n        showResult = -> resultEl.removeClass(\"hidden\")\r\n        hideResult = -> resultEl.addClass(\"hidden\")\r\n\r\n        spinnerEl = $el.find(\".spin\")\r\n        showSpinner = -> spinnerEl.removeClass(\"hidden\")\r\n        hideSpinner = -> spinnerEl.addClass(\"hidden\")\r\n\r\n        resultTitleEl = $el.find(\".result-title\")\r\n\r\n\r\n        loading_title = $translate.instant(\"ADMIN.PROJECT_EXPORT.LOADING_TITLE\")\r\n        loading_msg = $translate.instant(\"ADMIN.PROJECT_EXPORT.LOADING_MESSAGE\")\r\n        dump_ready_text = -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.DUMP_READY\"))\r\n        asyn_message = -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.ASYNC_MESSAGE\"))\r\n        syn_message = (url) -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.SYNC_MESSAGE\", {\r\n                                                                                                   url: url}))\r\n\r\n        setLoadingTitle = -> resultTitleEl.html(loading_title)\r\n        setAsyncTitle = -> resultTitleEl.html(loading_msg)\r\n        setSyncTitle = -> resultTitleEl.html(dump_ready_text)\r\n\r\n        resultMessageEl = $el.find(\".result-message \")\r\n        setLoadingMessage = -> resultMessageEl.html(loading_msg)\r\n        setAsyncMessage = -> resultMessageEl.html(asyn_message)\r\n        setSyncMessage = (url) -> resultMessageEl.html(syn_message(url))\r\n\r\n        showLoadingMode = ->\r\n            showSpinner()\r\n            setLoadingTitle()\r\n            setLoadingMessage()\r\n            hideButtons()\r\n            showResult()\r\n\r\n        showExportResultAsyncMode = ->\r\n            hideSpinner()\r\n            setAsyncTitle()\r\n            setAsyncMessage()\r\n\r\n        showExportResultSyncMode = (url) ->\r\n            hideSpinner()\r\n            setSyncTitle()\r\n            setSyncMessage(url)\r\n\r\n        showErrorMode = ->\r\n            hideSpinner()\r\n            hideResult()\r\n            showButtons()\r\n\r\n        $el.on \"click\", \"a.button-export\", debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            onSuccess = (result) =>\r\n                $analytics.trackEvent(\"exporter\", \"export-project\", \"Exported project\", 1)\r\n                if result.status == 202 # Async mode\r\n                    showExportResultAsyncMode()\r\n                else #result.status == 200 # Sync mode\r\n                    dumpUrl = result.data.url\r\n                    showExportResultSyncMode(dumpUrl)\r\n                    $window.open(dumpUrl, \"_blank\")\r\n\r\n            onError = (result) =>\r\n                showErrorMode()\r\n\r\n                errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR\")\r\n\r\n                if result.status == 429  # TOO MANY REQUESTS\r\n                    errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR_BUSY\")\r\n                else if result.data?._error_message\r\n                    errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR_BUSY\", {\r\n                                                   message: result.data._error_message})\r\n\r\n                $confirm.notify(\"error\", errorMsg)\r\n\r\n            showLoadingMode()\r\n            $rs.projects.export($scope.projectId).then(onSuccess, onError)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectExport\", [\"$window\", \"$tgResources\", \"$tgConfirm\", \"$translate\",\r\n                                     \"$tgAnalytics\", ProjectExportDirective])\r\n\r\n\r\n#############################################################################\r\n## CSV Export Controllers\r\n#############################################################################\r\n\r\nclass CsvExporterController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgUrls\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$translate\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @urls, @confirm, @rs, @translate) ->\r\n        @rootscope.$on(\"project:loaded\", @.setCsvUuid)\r\n        @scope.$watch \"csvUuid\", (value) =>\r\n            if value\r\n                @scope.csvUrl = @urls.resolveAbsolute(\"#{@.type}-csv\", value)\r\n            else\r\n                @scope.csvUrl = \"\"\r\n\r\n    setCsvUuid: =>\r\n        @scope.csvUuid = @scope.project[\"#{@.type}_csv_uuid\"]\r\n\r\n    _generateUuid: (response=null) =>\r\n        promise = @rs.projects[\"regenerate_#{@.type}_csv_uuid\"](@scope.projectId)\r\n\r\n        promise.then (data) =>\r\n            @scope.csvUuid = data.data?.uuid\r\n\r\n        promise.then null, =>\r\n            @confirm.notify(\"error\")\r\n\r\n        promise.finally ->\r\n            response.finish() if response\r\n        return promise\r\n\r\n    _deleteUuid: (response=null) =>\r\n        promise = @rs.projects[\"delete_#{@.type}_csv_uuid\"](@scope.projectId)\r\n\r\n        promise.then (data) =>\r\n            @scope.csvUuid = data.data?.uuid\r\n\r\n        promise.then null, =>\r\n            @confirm.notify(\"error\")\r\n\r\n        promise.finally ->\r\n            response.finish() if response\r\n        return promise\r\n\r\n    regenerateUuid: ->\r\n        if @scope.csvUuid\r\n            title = @translate.instant(\"ADMIN.REPORTS.REGENERATE_TITLE\")\r\n            subtitle = @translate.instant(\"ADMIN.REPORTS.REGENERATE_SUBTITLE\")\r\n\r\n            @confirm.ask(title, subtitle).then @._generateUuid\r\n        else\r\n            @._generateUuid()\r\n\r\n    deleteUuid: ->\r\n        if @scope.csvUuid\r\n            title = @translate.instant(\"ADMIN.REPORTS.DELETE_TITLE\")\r\n            subtitle = @translate.instant(\"ADMIN.REPORTS.DELETE_SUBTITLE\")\r\n\r\n            @confirm.ask(title, subtitle).then @._deleteUuid\r\n        else\r\n            @._deleteUuid()\r\n\r\n\r\nclass CsvExporterEpicsController extends CsvExporterController\r\n    type: \"epics\"\r\n\r\n\r\nclass CsvExporterUserstoriesController extends CsvExporterController\r\n    type: \"userstories\"\r\n\r\n\r\nclass CsvExporterTasksController extends CsvExporterController\r\n    type: \"tasks\"\r\n\r\n\r\nclass CsvExporterIssuesController extends CsvExporterController\r\n    type: \"issues\"\r\n\r\n\r\nmodule.controller(\"CsvExporterEpicsController\", CsvExporterEpicsController)\r\nmodule.controller(\"CsvExporterUserstoriesController\", CsvExporterUserstoriesController)\r\nmodule.controller(\"CsvExporterTasksController\", CsvExporterTasksController)\r\nmodule.controller(\"CsvExporterIssuesController\", CsvExporterIssuesController)\r\n\r\n\r\n#############################################################################\r\n## CSV Directive\r\n#############################################################################\r\n\r\nCsvEpicDirective = ($translate) ->\r\n    link = ($scope) ->\r\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_EPIC\"\r\n\r\n    return {\r\n        controller: \"CsvExporterEpicsController\",\r\n        controllerAs: \"ctrl\",\r\n        templateUrl: \"admin/project-csv.html\",\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgCsvEpic\", [\"$translate\", CsvEpicDirective])\r\n\r\n\r\nCsvUsDirective = ($translate) ->\r\n    link = ($scope) ->\r\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_US\"\r\n\r\n    return {\r\n        controller: \"CsvExporterUserstoriesController\",\r\n        controllerAs: \"ctrl\",\r\n        templateUrl: \"admin/project-csv.html\",\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgCsvUs\", [\"$translate\", CsvUsDirective])\r\n\r\n\r\nCsvTaskDirective = ($translate) ->\r\n    link = ($scope) ->\r\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_TASK\"\r\n\r\n    return {\r\n        controller: \"CsvExporterTasksController\",\r\n        controllerAs: \"ctrl\",\r\n        templateUrl: \"admin/project-csv.html\",\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgCsvTask\", [\"$translate\", CsvTaskDirective])\r\n\r\n\r\nCsvIssueDirective = ($translate) ->\r\n    link = ($scope) ->\r\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_ISSUE\"\r\n\r\n    return {\r\n        controller: \"CsvExporterIssuesController\",\r\n        controllerAs: \"ctrl\",\r\n        templateUrl: \"admin/project-csv.html\",\r\n        link: link,\r\n        scope: true\r\n    }\r\n\r\nmodule.directive(\"tgCsvIssue\", [\"$translate\", CsvIssueDirective])\r\n\r\n\r\n#############################################################################\r\n## Project Logo Directive\r\n#############################################################################\r\n\r\nProjectLogoDirective = ($auth, $model, $rs, $confirm) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        showSizeInfo = ->\r\n            $el.find(\".size-info\").addClass(\"active\")\r\n\r\n        onSuccess = (response) ->\r\n            project = $model.make_model(\"projects\", response.data)\r\n            $scope.project = project\r\n\r\n            $el.find('.loading-overlay').removeClass('active')\r\n            $confirm.notify('success')\r\n\r\n        onError = (response) ->\r\n            showSizeInfo() if response.status == 413\r\n            $el.find('.loading-overlay').removeClass('active')\r\n            $confirm.notify('error', response.data._error_message)\r\n\r\n        # Change photo\r\n        $el.on \"click\", \".js-change-logo\", ->\r\n            $el.find(\"#logo-field\").click()\r\n\r\n        $el.on \"change\", \"#logo-field\", (event) ->\r\n            if $scope.logoAttachment\r\n                $el.find('.loading-overlay').addClass(\"active\")\r\n                $rs.projects.changeLogo($scope.project.id, $scope.logoAttachment).then(onSuccess, onError)\r\n\r\n        # Use default photo\r\n        $el.on \"click\", \"a.js-use-default-logo\", (event) ->\r\n            $el.find('.loading-overlay').addClass(\"active\")\r\n            $rs.projects.removeLogo($scope.project.id).then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectLogo\", [\"$tgAuth\", \"$tgModel\", \"$tgResources\", \"$tgConfirm\", ProjectLogoDirective])\r\n\r\n\r\n#############################################################################\r\n## Project Logo Model Directive\r\n#############################################################################\r\n\r\nProjectLogoModelDirective = ($parse) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        model = $parse($attrs.tgProjectLogoModel)\r\n        modelSetter = model.assign\r\n\r\n        $el.bind 'change', ->\r\n            $scope.$apply ->\r\n                modelSetter($scope, $el[0].files[0])\r\n\r\n    return {link:link}\r\n\r\nmodule.directive('tgProjectLogoModel', ['$parse', ProjectLogoModelDirective])\r\n\r\n\r\nAdminProjectRestrictionsDirective = () ->\r\n    return {\r\n        scope: {\r\n            \"project\": \"=\"\r\n        },\r\n        templateUrl: \"admin/admin-project-restrictions.html\"\r\n    }\r\n\r\nmodule.directive('tgAdminProjectRestrictions', [AdminProjectRestrictionsDirective])\r\n\r\nAdminProjectRequestOwnershipDirective = (lightboxFactory) ->\r\n    return {\r\n        link: (scope) ->\r\n            scope.requestOwnership = () ->\r\n                lightboxFactory.create(\"tg-lb-request-ownership\", {\r\n                    \"class\": \"lightbox lightbox-request-ownership\"\r\n                }, {\r\n                    projectId: scope.projectId\r\n                })\r\n\r\n        scope: {\r\n            \"projectId\": \"=\",\r\n            \"owner\": \"=\"\r\n        },\r\n        templateUrl: \"admin/admin-project-request-ownership.html\"\r\n    }\r\n\r\nmodule.directive('tgAdminProjectRequestOwnership', [\"tgLightboxFactory\", AdminProjectRequestOwnershipDirective])\r\n\r\nAdminProjectChangeOwnerDirective = (lightboxFactory) ->\r\n    return {\r\n        link: (scope) ->\r\n            scope.changeOwner = () ->\r\n                lightboxFactory.create(\"tg-lb-change-owner\", {\r\n                    \"class\": \"lightbox lightbox-select-user\",\r\n                    \"project-id\": \"projectId\",\r\n                    \"active-users\": \"activeUsers\",\r\n                    \"current-owner-id\": \"currentOwnerId\"\r\n                }, {\r\n                    projectId: scope.projectId,\r\n                    activeUsers: scope.activeUsers,\r\n                    currentOwnerId: scope.owner.id,\r\n                    members: scope.members\r\n                })\r\n\r\n        scope: {\r\n            \"activeUsers\": \"=\"\r\n            \"projectId\": \"=\"\r\n            \"owner\": \"=\"\r\n            \"members\": \"=\"\r\n        },\r\n        templateUrl: \"admin/admin-project-change-owner.html\"\r\n    }\r\n\r\nmodule.directive('tgAdminProjectChangeOwner', [\"tgLightboxFactory\", AdminProjectChangeOwnerDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/project-values.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ntrim = @.taiga.trim\r\ntoString = @.taiga.toString\r\njoinStr = @.taiga.joinStr\r\ngroupBy = @.taiga.groupBy\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\ngetDefaulColorList = @.taiga.getDefaulColorList\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\n\r\n#############################################################################\r\n## Project values section Controller\r\n#############################################################################\r\n\r\nclass ProjectValuesSectionController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\r\n                  @appMetaService, @translate, @errorHandlingService, @projectService) ->\r\n        @scope.project = {}\r\n\r\n        @.loadInitialData()\r\n\r\n        sectionName = @translate.instant(@scope.sectionName)\r\n\r\n        title = @translate.instant(\"ADMIN.PROJECT_VALUES.PAGE_TITLE\", {\r\n            \"sectionName\": sectionName,\r\n            \"projectName\": @scope.project.name\r\n        })\r\n\r\n        description = @scope.project.description\r\n        @appMetaService.setAll(title, description)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.i_am_admin\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        promise = @.loadProject()\r\n        return promise\r\n\r\n\r\nmodule.controller(\"ProjectValuesSectionController\", ProjectValuesSectionController)\r\n\r\n#############################################################################\r\n## Project values Controller\r\n#############################################################################\r\n\r\nclass ProjectValuesController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs) ->\r\n        @scope.$on(\"admin:project-values:move\", @.moveValue)\r\n\r\n        unwatch = @scope.$watch \"resource\", (resource) =>\r\n            if resource\r\n                @.loadValues()\r\n                unwatch()\r\n    loadValues: =>\r\n        return @rs[@scope.resource].listValues(@scope.projectId, @scope.type).then (values) =>\r\n            if values.length\r\n                @scope.values = values\r\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\r\n            return values\r\n\r\n    moveValue: (ctx, itemValue, itemIndex) =>\r\n        values = @scope.values\r\n        r = values.indexOf(itemValue)\r\n        values.splice(r, 1)\r\n        values.splice(itemIndex, 0, itemValue)\r\n        _.each values, (value, index) ->\r\n            value.order = index\r\n\r\n        @repo.saveAll(values).then () =>\r\n            @rootscope.$broadcast(\"admin:project-values:updated\")\r\n\r\nmodule.controller(\"ProjectValuesController\", ProjectValuesController)\r\n\r\n\r\n#############################################################################\r\n## Project due dates values Controller\r\n#############################################################################\r\n\r\nclass ProjectDueDatesValuesController extends ProjectValuesController\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n    ]\r\n\r\n    loadValues: =>\r\n        return @rs[@scope.resource].listValues(@scope.projectId, @scope.type).then (values) =>\r\n            if values.length\r\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\r\n                @displayValues(values)\r\n            else\r\n                @createDefaultValues()\r\n            return values\r\n\r\n    createDefaultValues: =>\r\n        if !@rs[@scope.resource].createDefaultValues?\r\n            return\r\n        return @rs[@scope.resource].createDefaultValues(@scope.projectId, @scope.type).then (response) =>\r\n            @rootscope.$broadcast(\"admin:project-values:updated\")\r\n            values = response.data\r\n            if values.length\r\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\r\n                @displayValues(values)\r\n            return values\r\n\r\n    displayValues: (values) =>\r\n        _.each values, (value, index) ->\r\n            value.days_to_due_abs = if value.days_to_due != null then Math.abs(value.days_to_due) else null\r\n            value.sign =  if value.days_to_due >= 0 then 1 else -1\r\n        @scope.values = values\r\n\r\nmodule.controller(\"ProjectDueDatesValuesController\", ProjectDueDatesValuesController)\r\n\r\n#############################################################################\r\n## Project values directive\r\n#############################################################################\r\n\r\nProjectValuesDirective = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope, projectService) ->\r\n    ## Drag & Drop Link\r\n\r\n    linkDragAndDrop = ($scope, $el, $attrs) ->\r\n        oldParentScope = null\r\n        newParentScope = null\r\n        itemEl = null\r\n        tdom = $el.find(\".sortable\")\r\n\r\n        drake = dragula([tdom[0]], {\r\n            direction: 'vertical',\r\n            copySortSource: false,\r\n            copy: false,\r\n            mirrorContainer: tdom[0],\r\n            moves: (item) -> return $(item).is('div[tg-bind-scope]')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            itemEl = $(item)\r\n            itemValue = itemEl.scope().value\r\n            itemIndex = itemEl.index()\r\n            $scope.$broadcast(\"admin:project-values:move\", itemValue, itemIndex)\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n            drake.destroy()\r\n\r\n    ## Value Link\r\n\r\n    linkValue = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n        valueType = $attrs.type\r\n        objName = $attrs.objname\r\n\r\n        initializeNewValue = ->\r\n            $scope.newValue = {\r\n                \"name\": \"\"\r\n                \"is_closed\": false\r\n                \"is_archived\": false\r\n            }\r\n\r\n        initializeTextTranslations = ->\r\n            $scope.addNewElementText = $translate.instant(\r\n                \"ADMIN.PROJECT_VALUES_#{objName.toUpperCase()}.ACTION_ADD\"\r\n            )\r\n\r\n        initializeNewValue()\r\n        initializeTextTranslations()\r\n\r\n        $rootscope.$on \"$translateChangeEnd\", ->\r\n            $scope.$evalAsync(initializeTextTranslations)\r\n\r\n        goToBottomList = (focus = false) =>\r\n            table = $el.find(\".table-main\")\r\n\r\n            $(document.body).scrollTop(table.offset().top + table.height())\r\n\r\n            if focus\r\n                $el.find(\".new-value input:visible\").first().focus()\r\n\r\n        saveValue = (target) ->\r\n            formEl = target.parents(\"form\")\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            value = formEl.scope().value\r\n            promise = $repo.save(value)\r\n            promise.then ->\r\n                row = target.parents(\".row.table-main\")\r\n                row.addClass(\"hidden\")\r\n                row.siblings(\".visualization\").removeClass('hidden')\r\n                $rootscope.$broadcast(\"admin:project-values:updated\")\r\n\r\n                projectService.fetchProject()\r\n\r\n            promise.then null, (data) ->\r\n                form.setErrors(data)\r\n\r\n        saveNewValue = (target) ->\r\n            formEl = target.parents(\"form\")\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            $scope.newValue.project = $scope.project.id\r\n\r\n            $scope.newValue.order = if $scope.maxValueOrder then $scope.maxValueOrder + 1 else 1\r\n\r\n            promise = $repo.create(valueType, $scope.newValue)\r\n            promise.then (data) ->\r\n                target.addClass(\"hidden\")\r\n                $scope.values.push(data)\r\n                $scope.maxValueOrder = data.order\r\n                initializeNewValue()\r\n                $rootscope.$broadcast(\"admin:project-values:updated\")\r\n\r\n            promise.then null, (data) ->\r\n                form.setErrors(data)\r\n\r\n        cancel = (target) ->\r\n            row = target.parents(\".row.table-main\")\r\n            formEl = target.parents(\"form\")\r\n            value = formEl.scope().value\r\n            $scope.$apply ->\r\n                row.addClass(\"hidden\")\r\n                value.revert()\r\n                row.siblings(\".visualization\").removeClass('hidden')\r\n\r\n        $el.on \"click\", \".show-add-new\", (event) ->\r\n            event.preventDefault()\r\n            $el.find(\".new-value\").removeClass('hidden')\r\n\r\n            goToBottomList(true)\r\n\r\n        $el.on \"click\", \".add-new\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            target = $el.find(\".new-value\")\r\n            saveNewValue(target)\r\n\r\n        $el.on \"click\", \".delete-new\", (event) ->\r\n            event.preventDefault()\r\n            $el.find(\".new-value\").addClass(\"hidden\")\r\n            initializeNewValue()\r\n\r\n        $el.on \"click\", \".edit-value\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            row = target.parents(\".row.table-main\")\r\n            row.addClass(\"hidden\")\r\n\r\n            editionRow = row.siblings(\".edition\")\r\n            editionRow.removeClass('hidden')\r\n            editionRow.find('input:visible').first().focus().select()\r\n\r\n        $el.on \"keyup\", \".new-value input\", (event) ->\r\n            if event.keyCode == 13\r\n                target = $el.find(\".new-value\")\r\n                saveNewValue(target)\r\n            else if event.keyCode == 27\r\n                $el.find(\".new-value\").addClass(\"hidden\")\r\n                initializeNewValue()\r\n\r\n        $el.on \"click\", \".save\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            saveValue(target)\r\n\r\n        $el.on \"click\", \".cancel\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            cancel(target)\r\n\r\n        $el.on \"click\", \".delete-value\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            formEl = target.parents(\"form\")\r\n            value = formEl.scope().value\r\n\r\n            choices = {}\r\n            _.each $scope.values, (option) ->\r\n                if value.id != option.id\r\n                    choices[option.id] = option.name\r\n\r\n            subtitle = value.name\r\n\r\n            if _.keys(choices).length == 0\r\n                return $confirm.error($translate.instant(\"ADMIN.PROJECT_VALUES.ERROR_DELETE_ALL\"))\r\n\r\n            title = $translate.instant(\"ADMIN.COMMON.TITLE_ACTION_DELETE_VALUE\")\r\n            text = $translate.instant(\"ADMIN.PROJECT_VALUES.REPLACEMENT\")\r\n\r\n            $confirm.askChoice(title, subtitle, choices, text).then (response) ->\r\n                onSucces = ->\r\n                    $ctrl.loadValues().finally ->\r\n                        $rootscope.$broadcast(\"admin:project-values:updated\")\r\n                        response.finish()\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                $repo.remove(value, {\"moveTo\": response.selected}).then(onSucces, onError)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        linkDragAndDrop($scope, $el, $attrs)\r\n        linkValue($scope, $el, $attrs)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectValues\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\r\n                                     \"$translate\", \"$rootScope\", \"tgProjectService\", ProjectValuesDirective])\r\n\r\n#############################################################################\r\n## Project due dates values directive\r\n#############################################################################\r\n\r\nProjectDueDatesValues = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope, projectService) ->\r\n    parentDirective = ProjectValuesDirective($log, $repo, $confirm, $location, animationFrame,\r\n    $translate, $rootscope, projectService)\r\n\r\n    linkDueDateStatusValue = ($scope, $el, $attrs, $ctrl) ->\r\n        $ctrl = $el.controller()\r\n        valueType = $attrs.type\r\n\r\n        initializeNewValue = ->\r\n            $scope.newValue = {\r\n                \"name\": \"\"\r\n                \"days_to_due\": 0\r\n                \"sign\": 1\r\n            }\r\n\r\n        initializeNewValue()\r\n\r\n        _setDaysToDue = (value) ->\r\n            value.days_to_due = value.days_to_due_abs * value.sign\r\n\r\n        _valueFromEventTarget = (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            row = target.parents(\".row.table-main\")\r\n            formEl = target.parents(\"form\")\r\n            if not formEl.scope().value\r\n                return formEl.scope().newValue\r\n            else\r\n                return formEl.scope().value\r\n\r\n        saveNewValue = (target) ->\r\n            formEl = target.parents(\"form\")\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            $scope.newValue.project = $scope.project.id\r\n\r\n            $scope.newValue.order = if $scope.maxValueOrder then $scope.maxValueOrder + 1 else 1\r\n\r\n            promise = $repo.create(valueType, $scope.newValue)\r\n            promise.then (data) ->\r\n                target.addClass(\"hidden\")\r\n                data.sign = $scope.newValue.sign\r\n                data.days_to_due_abs = $scope.newValue.days_to_due_abs\r\n\r\n                $scope.values.push(data)\r\n                $rootscope.$broadcast(\"admin:project-values:updated\")\r\n                initializeNewValue()\r\n\r\n            promise.then null, (data) ->\r\n                form.setErrors(data)\r\n\r\n        $el.on \"input\", \".days-to-due-abs\", (event) ->\r\n            event.preventDefault()\r\n            value = _valueFromEventTarget(event)\r\n            $scope.$apply ->\r\n                _setDaysToDue(value)\r\n\r\n        $el.on \"click\", \".days-to-due-sign\", (event) ->\r\n            event.preventDefault()\r\n            value = _valueFromEventTarget(event)\r\n            $scope.$apply ->\r\n                value.sign = value.sign * -1\r\n                _setDaysToDue(value)\r\n\r\n        $el.on \"click\", \".add-new-due-date\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            target = $el.find(\".new-value\")\r\n            saveNewValue(target)\r\n\r\n        $el.on \"click\", \".delete-due-date\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            formEl = target.parents(\"form\")\r\n            value = formEl.scope().value\r\n\r\n            title = $translate.instant(\"LIGHTBOX.ADMIN_DUE_DATES.TITLE_ACTION_DELETE_DUE_DATE\")\r\n            subtitle = $translate.instant(\"LIGHTBOX.ADMIN_DUE_DATES.SUBTITLE_ACTION_DELETE_DUE_DATE\",\r\n                                          {due_date_status_name:  value.name})\r\n\r\n            $confirm.ask(title, subtitle).then (response) ->\r\n                onSucces = ->\r\n                    $ctrl.loadValues().finally ->\r\n                        $rootscope.$broadcast(\"admin:project-values:updated\")\r\n                        response.finish()\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                $repo.remove(value).then(onSucces, onError)\r\n\r\n\r\n    return {\r\n        link: ($scope, $el, $attrs) ->\r\n            parentDirective.link($scope, $el, $attrs)\r\n            linkDueDateStatusValue($scope, $el, $attrs)\r\n    }\r\n\r\nmodule.directive(\"tgProjectDueDatesValues\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\r\n                                             \"$translate\", \"$rootScope\", \"tgProjectService\", ProjectDueDatesValues])\r\n\r\n#############################################################################\r\n## Color selection directive\r\n#############################################################################\r\n\r\nColorSelectionDirective = () ->\r\n    ## Color selection Link\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        $scope.colorList = getDefaulColorList()\r\n\r\n        $scope.allowEmpty = false\r\n        if $attrs.tgAllowEmpty\r\n            $scope.allowEmpty = true\r\n\r\n        $ctrl = $el.controller()\r\n\r\n        $scope.$watch $attrs.ngModel, (element) ->\r\n            $scope.color = element.color\r\n\r\n        $el.on \"click\", \".current-color\", (event) ->\r\n            # Showing the color selector\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            target = angular.element(event.currentTarget)\r\n            $(\".select-color\").hide()\r\n            target.siblings(\".select-color\").show()\r\n            # Hide when click outside\r\n            body = angular.element(\"body\")\r\n            body.on \"click\", (event) =>\r\n                if angular.element(event.target).parent(\".select-color\").length == 0\r\n                    $el.find(\".select-color\").hide()\r\n                    body.unbind(\"click\")\r\n\r\n        $el.on \"click\", \".select-color .color\", (event) ->\r\n            # Selecting one color on color selector\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            $scope.$apply ->\r\n                $model.$modelValue.color = target.data(\"color\")\r\n            $el.find(\".select-color\").hide()\r\n\r\n        $el.on \"click\", \".select-color .selected-color\", (event) ->\r\n            event.preventDefault()\r\n            $scope.$apply ->\r\n                $model.$modelValue.color = $scope.color\r\n            $el.find(\".select-color\").hide()\r\n\r\n        $el.on \"keyup\", \"input\", (event) ->\r\n            event.stopPropagation()\r\n            if event.keyCode == 13\r\n                $scope.$apply ->\r\n                    $model.$modelValue.color = $scope.color\r\n                $el.find(\".select-color\").hide()\r\n\r\n            else if event.keyCode == 27\r\n                $el.find(\".select-color\").hide()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n      return {\r\n          link: link\r\n          require:\"ngModel\"\r\n      }\r\n\r\nmodule.directive(\"tgColorSelection\", ColorSelectionDirective)\r\n\r\n\r\n#############################################################################\r\n## Custom Attributes Controller\r\n#############################################################################\r\n\r\n# Custom attributes types (see taiga-back/taiga/projects/custom_attributes/choices.py)\r\nTEXT_TYPE = \"text\"\r\nMULTILINE_TYPE = \"multiline\"\r\nRICHTEXT_TYPE = \"richtext\"\r\nDATE_TYPE = \"date\"\r\nURL_TYPE = \"url\"\r\nDROPDOWN_TYPE = \"dropdown\"\r\nCHECKBOX_TYPE = \"checkbox\"\r\nNUMBER_TYPE = \"number\"\r\n\r\n\r\nTYPE_CHOICES = [\r\n    {\r\n        key: TEXT_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_TEXT\"\r\n    },\r\n    {\r\n        key: MULTILINE_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_MULTI\"\r\n    },\r\n    {\r\n        key: RICHTEXT_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_RICHTEXT\"\r\n    },\r\n    {\r\n        key: DATE_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DATE\"\r\n    },\r\n    {\r\n        key: URL_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_URL\"\r\n    },\r\n    {\r\n        key: DROPDOWN_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DROPDOWN\"\r\n    },\r\n    {\r\n        key: CHECKBOX_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_CHECKBOX\"\r\n    },\r\n    {\r\n        key: NUMBER_TYPE,\r\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_NUMBER\"\r\n    }\r\n]\r\n\r\nclass ProjectCustomAttributesController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @rs, @params, @q, @location, @navUrls, @appMetaService,\r\n                  @translate, @projectService) ->\r\n        @scope.TYPE_CHOICES = TYPE_CHOICES\r\n        @scope.project = @projectService.project.toJS()\r\n        @scope.projectId = @scope.project.id\r\n\r\n        sectionName = @translate.instant(@scope.sectionName)\r\n        title = @translate.instant(\"ADMIN.CUSTOM_ATTRIBUTES.PAGE_TITLE\", {\r\n            \"sectionName\": sectionName,\r\n            \"projectName\": @scope.project.name\r\n        })\r\n        description = @scope.project.description\r\n        @appMetaService.setAll(title, description)\r\n\r\n        @scope.init = (type) =>\r\n            @scope.type = type\r\n            @.loadCustomAttributes()\r\n\r\n    #########################\r\n    # Custom Attribute\r\n    #########################\r\n    _parseAttributesExtra: () ->\r\n        @scope.customAttributes = _.map(@scope.customAttributes, (x) => @._parseAttributeExtra(x))\r\n\r\n    _parseAttributeExtra: (attr) ->\r\n        if (attr.type == 'dropdown' && !attr.extra)\r\n            attr.extra = ['']\r\n        return attr\r\n\r\n    _onCustomAttributesModified: =>\r\n        @rootscope.$broadcast(\"admin:project-custom-attributes:updated\")\r\n\r\n    loadCustomAttributes: =>\r\n        return @rs.customAttributes[@scope.type].list(@scope.projectId).then (customAttributes) =>\r\n            @scope.customAttributes = customAttributes\r\n            @scope.maxOrder = _.maxBy(customAttributes, \"order\")?.order\r\n            @._parseAttributesExtra()\r\n            return customAttributes\r\n\r\n    createCustomAttribute: (attrValues) =>\r\n        return @repo.create(\"custom-attributes/#{@scope.type}\", attrValues).then =>\r\n            @._onCustomAttributesModified()\r\n\r\n    saveCustomAttribute: (attrModel) =>\r\n        return @repo.save(attrModel).then =>\r\n            @._onCustomAttributesModified()\r\n\r\n    deleteCustomAttribute: (attrModel) =>\r\n        return @repo.remove(attrModel).then =>\r\n            @._onCustomAttributesModified()\r\n\r\n    moveCustomAttributes: (attrModel, newIndex) =>\r\n        customAttributes = @scope.customAttributes\r\n        r = customAttributes.indexOf(attrModel)\r\n        customAttributes.splice(r, 1)\r\n        customAttributes.splice(newIndex, 0, attrModel)\r\n\r\n        _.each customAttributes, (val, idx) ->\r\n            val.order = idx\r\n\r\n        @repo.saveAll(customAttributes).then =>\r\n            @._onCustomAttributesModified()\r\n\r\n\r\nmodule.controller(\"ProjectCustomAttributesController\", ProjectCustomAttributesController)\r\n\r\n\r\n#############################################################################\r\n## Custom Attributes Directive\r\n#############################################################################\r\n\r\nProjectCustomAttributesDirective = ($log, $confirm, animationFrame, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $scope.isExtraVisible = {}\r\n\r\n        _manageFormEvent = (event, callback) ->\r\n            event.preventDefault()\r\n            formEl = angular.element(event.currentTarget).closest(\"form\")\r\n            callback(formEl)\r\n\r\n        ##################################\r\n        # Drag & Drop\r\n        ##################################\r\n\r\n        initDraggable = ->\r\n            sortableEl = $el.find(\".js-sortable\")\r\n            drake = dragula([sortableEl[0]], {\r\n                direction: 'vertical',\r\n                copySortSource: false,\r\n                copy: false,\r\n                mirrorContainer: sortableEl[0],\r\n                moves: (item, source, handle) ->\r\n                    childItem = $(handle).closest('.js-child-sortable')\r\n                    if childItem[0]\r\n                        return false\r\n                    return $(item).is('div[tg-bind-scope]')\r\n            })\r\n\r\n            drake.on 'dragend', (item) ->\r\n                itemEl = $(item)\r\n                itemAttr = itemEl.scope().attr\r\n                itemIndex = itemEl.index()\r\n                $ctrl.moveCustomAttributes(itemAttr, itemIndex)\r\n                \r\n            sortableChildren = $el.find(\".js-child-sortable\")\r\n            for el in sortableChildren\r\n                drake[el] = dragula([el], {\r\n                    direction: 'vertical',\r\n                    copySortSource: false,\r\n                    copy: false,\r\n                    mirrorContainer: el,\r\n                    moves: (item) -> return $(item).is('div[tg-bind-scope]')\r\n                })\r\n\r\n                drake[el].on 'dragend', (item) ->\r\n                    itemEl = $(item)\r\n                    attrExtra = itemEl.scope().attr.extra\r\n\r\n                    sourceIndex = itemEl.scope().$index\r\n                    targetIndex = itemEl.index()\r\n\r\n                    value = attrExtra[sourceIndex]\r\n\r\n                    attrExtra.splice(sourceIndex, 1)\r\n                    attrExtra.splice(targetIndex, 0, value)\r\n\r\n                    itemEl.scope().attr.setAttr('extra', attrExtra)\r\n                    $ctrl.saveCustomAttribute(itemEl.scope().attr).then ->\r\n                        $confirm.notify(\"success\")\r\n\r\n\r\n        ##################################\r\n        # New custom attribute\r\n        ##################################\r\n\r\n        showCreateForm = ->\r\n            $el.find(\".js-new-custom-field\").removeClass(\"hidden\")\r\n            $el.find(\".js-new-custom-field input:visible\").first().focus()\r\n\r\n        hideCreateForm = ->\r\n            $el.find(\".js-new-custom-field\").addClass(\"hidden\")\r\n\r\n        showAddButton = ->\r\n            $el.find(\".js-add-custom-field-button\").removeClass(\"hidden\")\r\n\r\n        hideAddButton = ->\r\n            $el.find(\".js-add-custom-field-button\").addClass(\"hidden\")\r\n\r\n        showCancelButton = ->\r\n            $el.find(\".js-cancel-new-custom-field-button\").removeClass(\"hidden\")\r\n\r\n        hideCancelButton = ->\r\n            $el.find(\".js-cancel-new-custom-field-button\").addClass(\"hidden\")\r\n\r\n        resetNewAttr = ->\r\n            $scope.newAttr = {}\r\n\r\n        create = (formEl) ->\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            onSucces = ->\r\n                $ctrl.loadCustomAttributes()\r\n                hideCreateForm()\r\n                resetNewAttr()\r\n                $confirm.notify(\"success\")\r\n\r\n            onError = (data) ->\r\n                form.setErrors(data)\r\n\r\n            attr = $scope.newAttr\r\n            attr.project = $scope.projectId\r\n            attr.order = if $scope.maxOrder then $scope.maxOrder + 1 else 1\r\n\r\n            $ctrl.createCustomAttribute(attr).then(onSucces, onError)\r\n\r\n        cancelCreate = ->\r\n            hideCreateForm()\r\n            resetNewAttr()\r\n\r\n        initAttrType = (formEl) ->\r\n            attr =  if formEl.scope().newAttr then formEl.scope().newAttr else formEl.scope().attr\r\n\r\n            if attr.type isnt \"dropdown\"\r\n                return\r\n\r\n            if attr.extra?.length\r\n                return\r\n\r\n            attr.extra = ['']\r\n            if attr.id\r\n                showEditForm(formEl)\r\n            else\r\n                showExtra(-1)\r\n                formEl.scope().$apply()\r\n\r\n        $scope.$watch \"customAttributes\", (customAttributes) ->\r\n            return if not customAttributes\r\n\r\n            if customAttributes.length == 0\r\n                hideCancelButton()\r\n                hideAddButton()\r\n                showCreateForm()\r\n            else\r\n                hideCreateForm()\r\n                showAddButton()\r\n                showCancelButton()\r\n                initDraggable()\r\n\r\n        $el.on \"change\", \".custom-field-type select\", (event) ->\r\n            _manageFormEvent(event, initAttrType)\r\n\r\n        $el.on \"click\", \".js-add-custom-field-button\", (event) ->\r\n            _manageFormEvent(event, showCreateForm)\r\n\r\n        $el.on \"click\", \".js-create-custom-field-button\", debounce 2000, (event) ->\r\n            _manageFormEvent(event, create)\r\n\r\n        $el.on \"click\", \".js-cancel-new-custom-field-button\", (event) ->\r\n            event.preventDefault()\r\n            cancelCreate()\r\n\r\n        $el.on \"keyup\", \".js-new-custom-field input\", (event) ->\r\n            if event.keyCode == 13 # Enter\r\n                _manageFormEvent(event, create)\r\n            else if event.keyCode == 27 # Esc\r\n                cancelCreate()\r\n\r\n        ##################################\r\n        # Edit custom attribute\r\n        ##################################\r\n\r\n        showEditForm = (formEl) ->\r\n            formEl.find(\".js-view-custom-field\").addClass(\"hidden\")\r\n            formEl.find(\".js-edit-custom-field\").removeClass(\"hidden\")\r\n            formEl.find(\".js-edit-custom-field input:visible\").first().focus().select()\r\n            formEl.find(\".js-view-custom-field-extra\").addClass(\"hidden\")\r\n            formEl.find(\".js-edit-custom-field-extra\").removeClass(\"hidden\")\r\n            formEl.find(\".custom-extra-actions\").removeClass(\"hidden\")\r\n            showExtra(formEl.scope().attr.id)\r\n            $scope.$apply()\r\n\r\n        update = (formEl) ->\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n            onSucces = ->\r\n                $ctrl.loadCustomAttributes()\r\n                hideEditForm(formEl)\r\n                $confirm.notify(\"success\")\r\n\r\n            onError = (data) ->\r\n                form.setErrors(data)\r\n\r\n            attr = formEl.scope().attr\r\n            attr.setAttr('extra', attr.extra)\r\n            $ctrl.saveCustomAttribute(attr).then(onSucces, onError)\r\n\r\n        cancelUpdate = (formEl) ->\r\n            hideEditForm(formEl)\r\n            revertChangesInCustomAttribute(formEl)\r\n\r\n        hideEditForm = (formEl) ->\r\n            formEl.find(\".js-edit-custom-field\").addClass(\"hidden\")\r\n            formEl.find(\".js-view-custom-field\").removeClass(\"hidden\")\r\n            formEl.find(\".js-edit-custom-field-extra\").addClass(\"hidden\")\r\n            formEl.find(\".js-view-custom-field-extra\").removeClass(\"hidden\")\r\n            formEl.find(\".custom-extra-actions\").addClass(\"hidden\")\r\n\r\n        revertChangesInCustomAttribute = (formEl) ->\r\n            $scope.$apply ->\r\n                formEl.scope().attr.revert()\r\n\r\n        $el.on \"click\", \".js-edit-custom-field-button\", (event) ->\r\n            _manageFormEvent(event, showEditForm)\r\n\r\n        $el.on \"click\", \".js-update-custom-field-button\", debounce 1000, (event) ->\r\n            _manageFormEvent(event, update)\r\n\r\n        $el.on \"click\", \".js-cancel-edit-custom-field-button\", (event) ->\r\n            _manageFormEvent(event, cancelUpdate)\r\n\r\n        $el.on \"keyup\", \".js-edit-custom-field input\", (event) ->\r\n            if event.keyCode == 13 # Enter\r\n                _manageFormEvent(event, update)\r\n            else if event.keyCode == 27 # Esc\r\n                _manageFormEvent(event, cancelUpdate)\r\n\r\n        ##################################\r\n        # Delete custom attribute\r\n        ##################################\r\n\r\n        deleteCustomAttribute = (formEl) ->\r\n            attr = formEl.scope().attr\r\n            message = attr.name\r\n\r\n            title = $translate.instant(\"COMMON.CUSTOM_ATTRIBUTES.DELETE\")\r\n            text = $translate.instant(\"COMMON.CUSTOM_ATTRIBUTES.CONFIRM_DELETE\")\r\n\r\n            $confirm.ask(title, text, message).then (response) ->\r\n                onSucces = ->\r\n                    $ctrl.loadCustomAttributes().finally -> response.finish()\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\", null, \"We have not been able to delete '#{message}'.\")\r\n\r\n                $ctrl.deleteCustomAttribute(attr).then(onSucces, onError)\r\n\r\n        $el.on \"click\", \".js-delete-custom-field-button\", debounce 2000, (event) ->\r\n            _manageFormEvent(event, deleteCustomAttribute)\r\n\r\n        ##################################\r\n        # Custom attribute extra\r\n        ##################################\r\n\r\n        $scope.toggleExtraVisible = (index) ->\r\n            if not $scope.isExtraVisible[index]\r\n                showExtra(index)\r\n            else\r\n                hideExtra(index)\r\n\r\n        showExtra = (index) ->\r\n            $scope.isExtraVisible[index] = true\r\n\r\n        hideExtra = (index) ->\r\n            $scope.isExtraVisible[index] = false\r\n    \r\n        _manageExtraFormEvent = (event, callback) ->\r\n            event.preventDefault()\r\n            formEl = angular.element(event.currentTarget).closest(\"form\")\r\n            formExtraEl = angular.element(event.currentTarget).closest(\".js-form\")\r\n            callback(formEl, formExtraEl)\r\n\r\n        addExtraOption = (formEl, formExtraEl) ->\r\n            formScope = formEl.scope()\r\n            attrExtra = if formScope.newAttr?.extra then formScope.newAttr.extra else formScope.attr.extra\r\n            attrExtra.push(\"\")\r\n            formScope.$apply()\r\n\r\n            formEl.find(\".js-edit-custom-field-extra\").last().removeClass(\"hidden\")\r\n            formEl.find(\".js-view-custom-field-extra\").last().addClass(\"hidden\")\r\n            formEl.find(\".js-edit-custom-field-extra input\").last().focus()\r\n\r\n        removeExtraOption = (formEl, formExtraEl) ->\r\n            attrExtra = formEl.scope().attr.extra\r\n            attrExtra.splice(formExtraEl.scope().$index, 1)\r\n            formExtraEl.scope().$apply()\r\n\r\n        $el.on \"keyup\", \".js-edit-custom-field-extra input\", (event) ->\r\n            if event.keyCode == 13 # Enter\r\n                _manageFormEvent(event, update)\r\n            else if event.keyCode == 27 # Esc\r\n                _manageFormEvent(event, cancelUpdate)\r\n\r\n        $el.on \"keyup\", \".js-new-custom-field-extra input\", (event) ->\r\n            if event.keyCode == 13 # Enter\r\n                _manageFormEvent(event, create)\r\n            else if event.keyCode == 27 # Esc\r\n                cancelCreate()\r\n  \r\n        $el.on \"click\", \".js-add-option-custom-field-extra-button\", debounce 500, (event) ->\r\n            _manageExtraFormEvent(event, addExtraOption)\r\n\r\n        $el.on \"click\", \".js-delete-custom-field-extra-button\", debounce 500, (event) ->\r\n            _manageExtraFormEvent(event, removeExtraOption)\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgProjectCustomAttributes\", [\"$log\", \"$tgConfirm\", \"animationFrame\", \"$translate\",\r\nProjectCustomAttributesDirective])\r\n\r\n\r\n#############################################################################\r\n## Tags Controller\r\n#############################################################################\r\n\r\nclass ProjectTagsController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$tgModel\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @model, @projectService) ->\r\n        @.loading = true\r\n        @.loadTags()\r\n\r\n    loadTags: =>\r\n        project = @projectService.project.toJS()\r\n        return @rs.projects.tagsColors(project.id).then (tags) =>\r\n            @scope.projectTagsAll = _.map tags.getAttrs(), (color, name) =>\r\n                @model.make_model('tag', {name: name, color: color})\r\n            @.filterAndSortTags()\r\n            @.loading = false\r\n\r\n    filterAndSortTags: =>\r\n        @scope.projectTags = _.sortBy @scope.projectTagsAll, (it) -> it.name.toLowerCase()\r\n\r\n        @scope.projectTags = _.filter(\r\n            @scope.projectTags,\r\n            (tag) => tag.name.indexOf(@scope.tagsFilter.name) != -1\r\n        )\r\n\r\n    createTag: (tag, color) =>\r\n        return @rs.projects.createTag(@scope.projectId, tag, color)\r\n\r\n    editTag: (from_tag, to_tag, color) =>\r\n        if from_tag == to_tag\r\n            to_tag = null\r\n\r\n        return @rs.projects.editTag(@scope.projectId, from_tag, to_tag, color)\r\n\r\n    deleteTag: (tag) =>\r\n        @scope.loadingDelete = true\r\n        return @rs.projects.deleteTag(@scope.projectId, tag).finally =>\r\n            @scope.loadingDelete = false\r\n\r\n    startMixingTags: (tag) =>\r\n        @scope.mixingTags.toTag = tag.name\r\n\r\n    toggleMixingFromTags: (tag) =>\r\n        if tag.name != @scope.mixingTags.toTag\r\n            index = @scope.mixingTags.fromTags.indexOf(tag.name)\r\n            if index == -1\r\n                @scope.mixingTags.fromTags.push(tag.name)\r\n            else\r\n                @scope.mixingTags.fromTags.splice(index, 1)\r\n\r\n    confirmMixingTags: () =>\r\n        toTag = @scope.mixingTags.toTag\r\n        fromTags = @scope.mixingTags.fromTags\r\n        @scope.loadingMixing = true\r\n        @rs.projects.mixTags(@scope.projectId, toTag, fromTags)\r\n            .then =>\r\n                @.cancelMixingTags()\r\n                @.loadTags()\r\n            .finally =>\r\n                @scope.loadingMixing = false\r\n\r\n    cancelMixingTags: () =>\r\n        @scope.mixingTags.toTag = null\r\n        @scope.mixingTags.fromTags = []\r\n\r\n    mixingClass: (tag) =>\r\n        if @scope.mixingTags.toTag != null\r\n            if tag.name == @scope.mixingTags.toTag\r\n                return \"mixing-tags-to\"\r\n            else if @scope.mixingTags.fromTags.indexOf(tag.name) != -1\r\n                return \"mixing-tags-from\"\r\n\r\nmodule.controller(\"ProjectTagsController\", ProjectTagsController)\r\n\r\n\r\n#############################################################################\r\n## Tags directive\r\n#############################################################################\r\n\r\nProjectTagsDirective = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $window = $(window)\r\n        $ctrl = $el.controller()\r\n        valueType = $attrs.type\r\n        objName = $attrs.objname\r\n\r\n        initializeNewValue = ->\r\n            $scope.newValue = {\r\n                \"tag\": \"\"\r\n                \"color\": \"\"\r\n            }\r\n\r\n        initializeTagsFilter = ->\r\n            $scope.tagsFilter = {\r\n                \"name\": \"\"\r\n            }\r\n\r\n        initializeMixingTags = ->\r\n            $scope.mixingTags = {\r\n                \"toTag\": null,\r\n                \"fromTags\": []\r\n            }\r\n\r\n        initializeTextTranslations = ->\r\n            $scope.addNewElementText = $translate.instant(\"ADMIN.PROJECT_VALUES_TAGS.ACTION_ADD\")\r\n\r\n        initializeNewValue()\r\n        initializeTagsFilter()\r\n        initializeMixingTags()\r\n        initializeTextTranslations()\r\n\r\n        $rootscope.$on \"$translateChangeEnd\", ->\r\n            $scope.$evalAsync(initializeTextTranslations)\r\n\r\n        goToBottomList = (focus = false) =>\r\n            table = $el.find(\".table-main\")\r\n\r\n            $(document.body).scrollTop(table.offset().top + table.height())\r\n\r\n            if focus\r\n                $el.find(\".new-value input:visible\").first().focus()\r\n\r\n        saveValue = (target) ->\r\n            formEl = target.parents(\"form\")\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            tag = formEl.scope().tag\r\n            originalTag = tag.clone()\r\n            originalTag.revert()\r\n\r\n            $scope.loadingEdit = true\r\n            promise = $ctrl.editTag(originalTag.name, tag.name, tag.color)\r\n            promise.then ->\r\n                $ctrl.loadTags().then ->\r\n                    row = target.parents(\".row.table-main\")\r\n                    row.addClass(\"hidden\")\r\n                    $scope.loadingEdit = false\r\n                    $rootscope.$broadcast('tags:updated')\r\n                    row.siblings(\".visualization\").removeClass('hidden')\r\n\r\n            promise.then null, (response) ->\r\n                $scope.loadingEdit = false\r\n                form.setErrors(response.data)\r\n\r\n        saveNewValue = (target) ->\r\n            formEl = target.parents(\"form\")\r\n            formEl = target\r\n            form = formEl.checksley()\r\n            return if not form.validate()\r\n\r\n            $scope.loadingCreate = true\r\n            promise = $ctrl.createTag($scope.newValue.tag, $scope.newValue.color)\r\n            promise.then (data) ->\r\n                $ctrl.loadTags().then ->\r\n                    $scope.loadingCreate = false\r\n                    target.addClass(\"hidden\")\r\n                    $rootscope.$broadcast('tags:updated')\r\n                    initializeNewValue()\r\n\r\n            promise.then null, (response) ->\r\n                $scope.loadingCreate = false\r\n                form.setErrors(response.data)\r\n\r\n        cancel = (target) ->\r\n            row = target.parents(\".row.table-main\")\r\n            formEl = target.parents(\"form\")\r\n            tag = formEl.scope().tag\r\n\r\n            $scope.$apply ->\r\n                row.addClass(\"hidden\")\r\n                tag.revert()\r\n                row.siblings(\".visualization\").removeClass('hidden')\r\n\r\n        $scope.$watch \"tagsFilter.name\", (tagsFilter) ->\r\n            $ctrl.filterAndSortTags()\r\n\r\n        $window.on \"keyup\", (event) ->\r\n            if event.keyCode == 27\r\n                $scope.$apply ->\r\n                    initializeMixingTags()\r\n\r\n        $el.on \"click\", \".show-add-new\", (event) ->\r\n            event.preventDefault()\r\n            $el.find(\".new-value\").removeClass('hidden')\r\n\r\n        $el.on \"click\", \".add-new\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            target = $el.find(\".new-value\")\r\n            saveNewValue(target)\r\n\r\n        $el.on \"click\", \".delete-new\", (event) ->\r\n            event.preventDefault()\r\n            $el.find(\".new-value\").addClass(\"hidden\")\r\n            initializeNewValue()\r\n\r\n        $el.on \"click\", \".mix-tags\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            $scope.$apply ->\r\n                $ctrl.startMixingTags(target.parents('form').scope().tag)\r\n\r\n        $el.on \"click\", \".mixing-row\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            $scope.$apply ->\r\n                $ctrl.toggleMixingFromTags(target.parents('form').scope().tag)\r\n\r\n        $el.on \"click\", \".mixing-confirm\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $scope.$apply ->\r\n                $ctrl.confirmMixingTags()\r\n\r\n        $el.on \"click\", \".mixing-cancel\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $scope.$apply ->\r\n                $ctrl.cancelMixingTags()\r\n\r\n        $el.on \"click\", \".edit-value\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n\r\n            row = target.parents(\".row.table-main\")\r\n            row.addClass(\"hidden\")\r\n\r\n            editionRow = row.siblings(\".edition\")\r\n            editionRow.removeClass('hidden')\r\n            editionRow.find('input:visible').first().focus().select()\r\n\r\n        $el.on \"keyup\", \".new-value input\", (event) ->\r\n            if event.keyCode == 13\r\n                target = $el.find(\".new-value\")\r\n                saveNewValue(target)\r\n            else if event.keyCode == 27\r\n                $el.find(\".new-value\").addClass(\"hidden\")\r\n                initializeNewValue()\r\n\r\n        $el.on \"keyup\", \".status-name input\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            if event.keyCode == 13\r\n                saveValue(target)\r\n            else if event.keyCode == 27\r\n                cancel(target)\r\n\r\n        $el.on \"click\", \".save\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            saveValue(target)\r\n\r\n        $el.on \"click\", \".cancel\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            cancel(target)\r\n\r\n        $el.on \"click\", \".delete-tag\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            formEl = target.parents(\"form\")\r\n            tag = formEl.scope().tag\r\n\r\n            title = $translate.instant(\"ADMIN.COMMON.TITLE_ACTION_DELETE_TAG\")\r\n\r\n            $confirm.askOnDelete(title, tag.name).then (response) ->\r\n                onSucces = ->\r\n                    $ctrl.loadTags().finally ->\r\n                        $rootscope.$broadcast('tags:updated')\r\n                        response.finish()\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                $ctrl.deleteTag(tag.name).then(onSucces, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n            $window.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgProjectTags\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\r\n                                   \"$translate\", \"$rootScope\", ProjectTagsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/roles.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\nbindMethods = @.taiga.bindMethods\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\n\r\n\r\n#############################################################################\r\n## Project Roles Controller\r\n#############################################################################\r\n\r\nclass RolesController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgModel\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\r\n                  @model, @appMetaService, @translate, @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = \"ADMIN.MENU.PERMISSIONS\"\r\n        @scope.project = {}\r\n        @scope.anyComputableRole = true\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.ROLES.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n        project = @model.make_model(\"projects\", project)\r\n\r\n        if not project.i_am_admin\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.anyComputableRole = _.some(_.map(project.roles, (point) -> point.computable))\r\n\r\n        return project\r\n\r\n    loadRoles: ->\r\n        return @rs.roles.list(@scope.projectId).then (roles) =>\r\n            roles = roles.map (role) ->\r\n                role.external_user = false\r\n\r\n                return role\r\n\r\n            public_permission = {\r\n                \"name\": @translate.instant(\"ADMIN.ROLES.EXTERNAL_USER\"),\r\n                \"permissions\": @scope.project.public_permissions,\r\n                \"external_user\": true\r\n            }\r\n\r\n            roles.push(public_permission)\r\n\r\n            @scope.roles = roles\r\n            @scope.role = @scope.roles[0]\r\n\r\n            return roles\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n        return @.loadRoles()\r\n\r\n    forceLoadProject: () ->\r\n        @rootscope.$broadcast(\"admin:project-roles:updated\")\r\n\r\n    setRole: (role) ->\r\n        @scope.role = role\r\n        @scope.$broadcast(\"role:changed\", @scope.role)\r\n\r\n    delete: ->\r\n        choices = {}\r\n        for role in @scope.roles\r\n            if role.id != @scope.role.id\r\n                choices[role.id] = role.name\r\n\r\n        if _.keys(choices).length == 0\r\n            return @confirm.error(@translate.instant(\"ADMIN.ROLES.ERROR_DELETE_ALL\"))\r\n\r\n        title = @translate.instant(\"ADMIN.ROLES.TITLE_DELETE_ROLE\")\r\n        subtitle = @scope.role.name\r\n        replacement = @translate.instant(\"ADMIN.ROLES.REPLACEMENT_ROLE\")\r\n        warning = @translate.instant(\"ADMIN.ROLES.WARNING_DELETE_ROLE\")\r\n        return @confirm.askChoice(title, subtitle, choices, replacement, warning).then (response) =>\r\n            onSuccess = =>\r\n                @.forceLoadProject()\r\n                @.loadRoles().finally =>\r\n                    response.finish()\r\n            onError = =>\r\n                @confirm.notify('error')\r\n\r\n            return @repo.remove(@scope.role, {moveTo: response.selected}).then onSuccess, onError\r\n\r\n    _enableComputable: =>\r\n        onSuccess = =>\r\n            @confirm.notify(\"success\")\r\n            @.forceLoadProject()\r\n\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n            @scope.role.revert()\r\n\r\n        @repo.save(@scope.role).then onSuccess, onError\r\n\r\n    _disableComputable: =>\r\n        askOnSuccess = (response) =>\r\n            onSuccess = =>\r\n                response.finish()\r\n                @confirm.notify(\"success\")\r\n                @.forceLoadProject()\r\n            onError = =>\r\n                response.finish()\r\n                @confirm.notify(\"error\")\r\n                @scope.role.revert()\r\n            @repo.save(@scope.role).then onSuccess, onError\r\n\r\n        askOnError = (response) =>\r\n            @scope.role.revert()\r\n\r\n        title = @translate.instant(\"ADMIN.ROLES.DISABLE_COMPUTABLE_ALERT_TITLE\")\r\n        subtitle = @translate.instant(\"ADMIN.ROLES.DISABLE_COMPUTABLE_ALERT_SUBTITLE\", {\r\n            roleName: @scope.role.name\r\n        })\r\n        return @confirm.ask(title, subtitle, \"\").then askOnSuccess, askOnError\r\n\r\n    toggleComputable: debounce 2000, ->\r\n        if not @scope.role.computable\r\n            @._disableComputable()\r\n        else\r\n            @._enableComputable()\r\n\r\nmodule.controller(\"RolesController\", RolesController)\r\n\r\n\r\nEditRoleDirective = ($repo, $confirm) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        toggleView = ->\r\n            $el.find('.total').toggle()\r\n            $el.find('.edit-role').toggle()\r\n\r\n        submit = () ->\r\n            $scope.role.name = $el.find(\"input\").val()\r\n\r\n            promise = $repo.save($scope.role)\r\n\r\n            promise.then ->\r\n                $confirm.notify(\"success\")\r\n\r\n            promise.then null, (data) ->\r\n                $confirm.notify(\"error\")\r\n\r\n            toggleView()\r\n\r\n        $el.on \"click\", \".edit-value\", ->\r\n            toggleView()\r\n            $el.find(\"input\").focus()\r\n            $el.find(\"input\").val($scope.role.name)\r\n\r\n        $el.on \"click\", \"a.save\", submit\r\n\r\n        $el.on \"keyup\", \"input\", (event) ->\r\n            if event.keyCode == 13  # Enter key\r\n                submit()\r\n            else if event.keyCode == 27  # ESC key\r\n                toggleView()\r\n\r\n        $scope.$on \"role:changed\", ->\r\n            if $el.find('.edit-role').is(\":visible\")\r\n                toggleView()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgEditRole\", [\"$tgRepo\", \"$tgConfirm\", EditRoleDirective])\r\n\r\nRolesDirective =  ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgRoles\", RolesDirective)\r\n\r\nNewRoleDirective = ($tgrepo, $confirm) ->\r\n    DEFAULT_PERMISSIONS = [\"view_project\", \"view_milestones\", \"view_us\", \"view_tasks\", \"view_issues\"]\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $el.on \"click\", \"a.add-button\", (event) ->\r\n            event.preventDefault()\r\n            $el.find(\".new\").removeClass(\"hidden\")\r\n            $el.find(\".new\").focus()\r\n            $el.find(\".add-button\").hide()\r\n\r\n        $el.on \"keyup\", \".new\", (event) ->\r\n            event.preventDefault()\r\n            if event.keyCode == 13  # Enter key\r\n                target = angular.element(event.currentTarget)\r\n                newRole = {\r\n                    project: $scope.projectId\r\n                    name: target.val()\r\n                    permissions: DEFAULT_PERMISSIONS\r\n                    order: _.maxBy($scope.roles, (r) -> r.order).order + 1\r\n                    computable: false\r\n                }\r\n\r\n                $el.find(\".new\").addClass(\"hidden\")\r\n                $el.find(\".new\").val('')\r\n\r\n                onSuccess = (role) ->\r\n                    insertPosition = $scope.roles.length - 1\r\n                    $scope.roles.splice(insertPosition, 0, role)\r\n                    $ctrl.setRole(role)\r\n                    $el.find(\".add-button\").show()\r\n                    $ctrl.forceLoadProject()\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n\r\n                $tgrepo.create(\"roles\", newRole).then(onSuccess, onError)\r\n\r\n            else if event.keyCode == 27  # ESC key\r\n                target = angular.element(event.currentTarget)\r\n                $el.find(\".new\").addClass(\"hidden\")\r\n                $el.find(\".new\").val('')\r\n                $el.find(\".add-button\").show()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgNewRole\", [\"$tgRepo\", \"$tgConfirm\", NewRoleDirective])\r\n\r\n\r\n# Use category-config.scss styles\r\nRolePermissionsDirective = ($rootscope, $repo, $confirm, $compile) ->\r\n    resumeTemplate = _.template(\"\"\"\r\n    <div class=\"resume-title\" translate=\"<%- category.name %>\"></div>\r\n    <div class=\"summary-role\">\r\n        <div class=\"count\"><%- category.activePermissions %>/<%- category.permissions.length %></div>\r\n        <% _.each(category.permissions, function(permission) { %>\r\n            <div class=\"role-summary-single <% if(permission.active) { %>active<% } %>\"\r\n                 title=\"{{ '<%- permission.name %>' | translate }}\"></div>\r\n        <% }) %>\r\n    </div>\r\n    <tg-svg svg-icon=\"icon-arrow-right\"></tg-svg>\r\n    \"\"\")\r\n\r\n    categoryTemplate = _.template(\"\"\"\r\n    <div class=\"category-config\" data-id=\"<%- index %>\">\r\n        <div class=\"resume\">\r\n        </div>\r\n        <div class=\"category-items\">\r\n            <div class=\"items-container\">\r\n            <% _.each(category.permissions, function(permission) { %>\r\n                <div class=\"category-item\" data-id=\"<%- permission.key %>\">\r\n                    <span translate=\"<%- permission.name %>\"></span>\r\n                    <div class=\"check\">\r\n                        <input type=\"checkbox\"\r\n                               <% if(!permission.editable) { %> disabled=\"disabled\" <% } %>\r\n                               <% if(permission.active) { %> checked=\"checked\" <% } %>/>\r\n                        <div></div>\r\n                        <span class=\"check-text check-yes\" translate=\"COMMON.YES\"></span>\r\n                        <span class=\"check-text check-no\" translate=\"COMMON.NO\"></span>\r\n                    </div>\r\n                </div>\r\n            <% }) %>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \"\"\")\r\n\r\n    baseTemplate = _.template(\"\"\"\r\n    <div class=\"category-config-list\"></div>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        $ctrl = $el.controller()\r\n\r\n        generateCategoriesFromRole = (role) ->\r\n            setActivePermissions = (permissions) ->\r\n                return _.map(permissions, (x) -> _.extend({}, x, {active: x[\"key\"] in role.permissions}))\r\n\r\n            isPermissionEditable = (permission, role, project) ->\r\n                if role.external_user &&\r\n                   !project.is_private &&\r\n                   permission.key.indexOf(\"view_\") == 0\r\n                    return false\r\n                else\r\n                    return true\r\n\r\n            setActivePermissionsPerCategory = (category) ->\r\n                return _.map(category, (cat) ->\r\n                    cat.permissions = cat.permissions.map (permission) ->\r\n                        permission.editable = isPermissionEditable(permission, role, $scope.project)\r\n\r\n                        return permission\r\n\r\n                    _.extend({}, cat, {\r\n                        activePermissions: _.filter(cat[\"permissions\"], \"active\").length\r\n                    })\r\n                )\r\n\r\n            categories = []\r\n\r\n            epicPermissions = [\r\n                { key: \"view_epics\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.VIEW_EPICS\"}\r\n                { key: \"add_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.ADD_EPICS\"}\r\n                { key: \"modify_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.MODIFY_EPICS\"}\r\n                { key: \"comment_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.COMMENT_EPICS\"}\r\n                { key: \"delete_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.DELETE_EPICS\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.NAME\" ,\r\n                permissions: setActivePermissions(epicPermissions)\r\n            })\r\n\r\n            milestonePermissions = [\r\n                { key: \"view_milestones\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.VIEW_SPRINTS\"}\r\n                { key: \"add_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.ADD_SPRINTS\"}\r\n                { key: \"modify_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.MODIFY_SPRINTS\"}\r\n                { key: \"delete_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.DELETE_SPRINTS\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.NAME\",\r\n                permissions: setActivePermissions(milestonePermissions)\r\n            })\r\n\r\n            userStoryPermissions = [\r\n                { key: \"view_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.VIEW_USER_STORIES\"}\r\n                { key: \"add_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.ADD_USER_STORIES\"}\r\n                { key: \"modify_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.MODIFY_USER_STORIES\"}\r\n                { key: \"comment_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.COMMENT_USER_STORIES\"}\r\n                { key: \"delete_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.DELETE_USER_STORIES\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.NAME\",\r\n                permissions: setActivePermissions(userStoryPermissions)\r\n            })\r\n\r\n            taskPermissions = [\r\n                { key: \"view_tasks\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.VIEW_TASKS\"}\r\n                { key: \"add_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.ADD_TASKS\"}\r\n                { key: \"modify_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.MODIFY_TASKS\"}\r\n                { key: \"comment_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.COMMENT_TASKS\"}\r\n                { key: \"delete_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.DELETE_TASKS\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.NAME\" ,\r\n                permissions: setActivePermissions(taskPermissions)\r\n            })\r\n\r\n            issuePermissions = [\r\n                { key: \"view_issues\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.VIEW_ISSUES\"}\r\n                { key: \"add_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.ADD_ISSUES\"}\r\n                { key: \"modify_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.MODIFY_ISSUES\"}\r\n                { key: \"comment_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.COMMENT_ISSUES\"}\r\n                { key: \"delete_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.DELETE_ISSUES\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.NAME\",\r\n                permissions: setActivePermissions(issuePermissions)\r\n            })\r\n\r\n            wikiPermissions = [\r\n                { key: \"view_wiki_pages\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.VIEW_WIKI_PAGES\"}\r\n                { key: \"add_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.ADD_WIKI_PAGES\"}\r\n                { key: \"modify_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.MODIFY_WIKI_PAGES\"}\r\n                { key: \"delete_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.DELETE_WIKI_PAGES\"}\r\n                { key: \"view_wiki_links\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.VIEW_WIKI_LINKS\"}\r\n                { key: \"add_wiki_link\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.ADD_WIKI_LINKS\"}\r\n                { key: \"delete_wiki_link\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.DELETE_WIKI_LINKS\"}\r\n            ]\r\n            categories.push({\r\n                name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.NAME\",\r\n                permissions: setActivePermissions(wikiPermissions)\r\n            })\r\n\r\n            return setActivePermissionsPerCategory(categories)\r\n\r\n        renderResume = (element, category) ->\r\n            element.find(\".resume\").html($compile(resumeTemplate({category: category}))($scope))\r\n\r\n        renderCategory = (category, index) ->\r\n            html = categoryTemplate({category: category, index: index})\r\n            html = angular.element(html)\r\n            renderResume(html, category)\r\n            return $compile(html)($scope)\r\n\r\n        renderPermissions = () ->\r\n            $el.off()\r\n            html = baseTemplate()\r\n            _.each generateCategoriesFromRole($scope.role), (category, index) ->\r\n                html = angular.element(html).append(renderCategory(category, index))\r\n\r\n            $el.html(html)\r\n            $el.on \"click\", \".resume\", (event) ->\r\n                event.preventDefault()\r\n                target = angular.element(event.currentTarget)\r\n                target.toggleClass(\"open-drawer\")\r\n                target.next().toggleClass(\"open\")\r\n\r\n            $el.on \"change\", \".category-item input\", (event) ->\r\n                getActivePermissions = ->\r\n                    activePermissions = _.filter($el.find(\".category-item input\"), (t) ->\r\n                        angular.element(t).is(\":checked\")\r\n                    )\r\n                    activePermissions = _.sortBy(_.map(activePermissions, (t) ->\r\n                        permission = angular.element(t).parents(\".category-item\").data(\"id\")\r\n                    ))\r\n\r\n                    if activePermissions.length\r\n                        activePermissions.push(\"view_project\")\r\n\r\n                    return activePermissions\r\n\r\n                target = angular.element(event.currentTarget)\r\n\r\n                $scope.role.permissions = getActivePermissions()\r\n\r\n                onSuccess = () ->\r\n                    categories = generateCategoriesFromRole($scope.role)\r\n                    categoryId = target.parents(\".category-config\").data(\"id\")\r\n                    renderResume(target.parents(\".category-config\"), categories[categoryId])\r\n                    $rootscope.$broadcast(\"projects:reload\")\r\n                    $confirm.notify(\"success\")\r\n                    $ctrl.forceLoadProject()\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                    target.prop \"checked\", !target.prop(\"checked\")\r\n                    $scope.role.permissions = getActivePermissions()\r\n\r\n                if $scope.role.external_user\r\n                    $scope.project.public_permissions = $scope.role.permissions\r\n                    $scope.project.anon_permissions = $scope.role.permissions.filter (permission) ->\r\n                        return permission.indexOf(\"view_\") == 0\r\n\r\n                    $repo.save($scope.project).then onSuccess, onError\r\n                else\r\n                    $repo.save($scope.role).then onSuccess, onError\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        $scope.$on \"role:changed\", ->\r\n            renderPermissions()\r\n\r\n        bindOnce($scope, $attrs.ngModel, renderPermissions)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgRolePermissions\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$compile\",\r\n                                       RolePermissionsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/admin/third-parties.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\nbindMethods = @.taiga.bindMethods\r\ndebounce = @.taiga.debounce\r\ntimeout = @.taiga.timeout\r\n\r\nmodule = angular.module(\"taigaAdmin\")\r\n\r\n\r\n#############################################################################\r\n## Webhooks\r\n#############################################################################\r\n\r\nclass WebhooksController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @location, @navUrls, @appMetaService, @translate, @errorHandlingService, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = \"ADMIN.WEBHOOKS.SECTION_NAME\"\r\n        @scope.project = {}\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.WEBHOOKS.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"webhooks:reload\", @.loadWebhooks\r\n\r\n    loadWebhooks: ->\r\n        return @rs.webhooks.list(@scope.projectId).then (webhooks) =>\r\n            @scope.webhooks = webhooks\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        if not project.i_am_admin\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n\r\n        return @.loadWebhooks()\r\n\r\nmodule.controller(\"WebhooksController\", WebhooksController)\r\n\r\n\r\n#############################################################################\r\n## Webhook Directive\r\n#############################################################################\r\n\r\nWebhookDirective = ($rs, $repo, $confirm, $loading, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        webhook = $scope.$eval($attrs.tgWebhook)\r\n\r\n        updateLogs = () ->\r\n            prettyDate = $translate.instant(\"ADMIN.WEBHOOKS.DATE\")\r\n\r\n            $rs.webhooklogs.list(webhook.id).then (webhooklogs) =>\r\n                for log in webhooklogs\r\n                    log.validStatus = 200 <= log.status < 300\r\n                    log.prettySentHeaders = _.map(_.toPairs(log.request_headers), ([header, value]) -> \"#{header}: #{value}\").join(\"\\n\")\r\n                    log.prettySentData = JSON.stringify(log.request_data)\r\n                    log.prettyDate = moment(log.created).format(prettyDate)\r\n\r\n                webhook.logs_counter = webhooklogs.length\r\n                webhook.logs = webhooklogs\r\n                updateShowHideHistoryText()\r\n\r\n        updateShowHideHistoryText = () ->\r\n            textElement = $el.find(\".toggle-history\")\r\n            historyElement = textElement.parents(\".single-webhook-wrapper\").find(\".webhooks-history\")\r\n\r\n            if historyElement.hasClass(\"open\")\r\n                text = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_HIDE_HISTORY\")\r\n                title = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_HIDE_HISTORY_TITLE\")\r\n            else\r\n                text = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_SHOW_HISTORY\")\r\n                title = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_SHOW_HISTORY_TITLE\")\r\n\r\n            textElement.text(text)\r\n            textElement.prop(\"title\", title)\r\n\r\n        showVisualizationMode = () ->\r\n            $el.find(\".edition-mode\").addClass(\"hidden\")\r\n            $el.find(\".visualization-mode\").removeClass(\"hidden\")\r\n\r\n        showEditMode = () ->\r\n            $el.find(\".visualization-mode\").addClass(\"hidden\")\r\n            $el.find(\".edition-mode\").removeClass(\"hidden\")\r\n\r\n        openHistory = () ->\r\n            $el.find(\".webhooks-history\").addClass(\"open\")\r\n\r\n        cancel = () ->\r\n            showVisualizationMode()\r\n            $scope.$apply ->\r\n                webhook.revert()\r\n\r\n        save = debounce 2000, (target) ->\r\n            form = target.parents(\"form\").checksley()\r\n            return if not form.validate()\r\n            promise = $repo.save(webhook)\r\n            promise.then =>\r\n                showVisualizationMode()\r\n\r\n            promise.then null, (data) ->\r\n                $confirm.notify(\"error\")\r\n                form.setErrors(data)\r\n\r\n        $el.on \"click\", \".test-webhook\", () ->\r\n            openHistory()\r\n            $rs.webhooks.test(webhook.id).then =>\r\n                updateLogs()\r\n\r\n        $el.on \"click\", \".edit-webhook\", () ->\r\n            showEditMode()\r\n\r\n        $el.on \"click\", \".cancel-existing\", () ->\r\n            cancel()\r\n\r\n        $el.on \"click\", \".edit-existing\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            save(target)\r\n\r\n        $el.on \"keyup\", \".edition-mode input\", (event) ->\r\n            if event.keyCode == 13\r\n                target = angular.element(event.currentTarget)\r\n                save(target)\r\n            else if event.keyCode == 27\r\n                target = angular.element(event.currentTarget)\r\n                cancel(target)\r\n\r\n        $el.on \"click\", \".delete-webhook\", () ->\r\n            title = $translate.instant(\"ADMIN.WEBHOOKS.DELETE\")\r\n            message = $translate.instant(\"ADMIN.WEBHOOKS.WEBHOOK_NAME\", {name: webhook.name})\r\n\r\n            $confirm.askOnDelete(title, message).then (askResponse) =>\r\n                onSucces = ->\r\n                    askResponse.finish()\r\n                    $scope.$emit(\"webhooks:reload\")\r\n\r\n                onError = ->\r\n                    askResponse.finish(false)\r\n                    $confirm.notify(\"error\")\r\n\r\n                $repo.remove(webhook).then(onSucces, onError)\r\n\r\n        $el.on \"click\", \".toggle-history\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n\r\n            if not webhook.logs? or webhook.logs.length == 0\r\n                updateLogs().then ->\r\n                    #Waiting for ng-repeat to finish\r\n                    timeout 0, ->\r\n                        $el.find(\".webhooks-history\")\r\n                            .toggleClass(\"open\")\r\n                            .slideToggle()\r\n\r\n                        updateShowHideHistoryText()\r\n\r\n            else\r\n                $el.find(\".webhooks-history\")\r\n                    .toggleClass(\"open\")\r\n                    .slideToggle()\r\n\r\n                $scope.$apply () ->\r\n                    updateShowHideHistoryText()\r\n\r\n\r\n        $el.on \"click\", \".history-single\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            target.toggleClass(\"history-single-open\")\r\n            target.siblings(\".history-single-response\").toggleClass(\"open\")\r\n\r\n        $el.on \"click\", \".resend-request\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            log = target.data(\"log\")\r\n            $rs.webhooklogs.resend(log).then () =>\r\n                updateLogs()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgWebhook\", [\"$tgResources\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$translate\",\r\n                               WebhookDirective])\r\n\r\n\r\n#############################################################################\r\n## New webhook Directive\r\n#############################################################################\r\n\r\nNewWebhookDirective = ($rs, $repo, $confirm, $loading, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        webhook = $scope.$eval($attrs.tgWebhook)\r\n        formDOMNode = $el.find(\".new-webhook-form\")\r\n        addWebhookDOMNode = $el.find(\".add-webhook\")\r\n        initializeNewValue = ->\r\n            $scope.newValue = {\r\n                \"name\": \"\"\r\n                \"url\": \"\"\r\n                \"key\": \"\"\r\n            }\r\n\r\n        initializeNewValue()\r\n\r\n        $scope.$watch \"webhooks\", (webhooks) ->\r\n            if webhooks?\r\n                if webhooks.length == 0\r\n                    formDOMNode.removeClass(\"hidden\")\r\n                    addWebhookDOMNode.addClass(\"hidden\")\r\n                    formDOMNode.find(\"input\")[0].focus()\r\n                else\r\n                    formDOMNode.addClass(\"hidden\")\r\n                    addWebhookDOMNode.removeClass(\"hidden\")\r\n\r\n        save = debounce 2000, () ->\r\n            form = formDOMNode.checksley()\r\n            return if not form.validate()\r\n\r\n            $scope.newValue.project = $scope.project.id\r\n            promise = $repo.create(\"webhooks\", $scope.newValue)\r\n            promise.then =>\r\n                $analytics.trackEvent(\"webhooks\", \"create\", \"Create new webhook\", 1)\r\n                $scope.$emit(\"webhooks:reload\")\r\n                initializeNewValue()\r\n\r\n            promise.then null, (data) ->\r\n                $confirm.notify(\"error\")\r\n                form.setErrors(data)\r\n\r\n        formDOMNode.on \"click\", \".add-new\", (event) ->\r\n            event.preventDefault()\r\n            save()\r\n\r\n        formDOMNode.on \"keyup\", \"input\", (event) ->\r\n            if event.keyCode == 13\r\n                save()\r\n\r\n        formDOMNode.on \"click\", \".cancel-new\", (event) ->\r\n            $scope.$apply ->\r\n                initializeNewValue()\r\n\r\n                # Close form if there some webhooks created\r\n                if $scope.webhooks.length >= 1\r\n                    formDOMNode.addClass(\"hidden\")\r\n\r\n        addWebhookDOMNode.on \"click\", (event) ->\r\n            formDOMNode.removeClass(\"hidden\")\r\n            formDOMNode.find(\"input\")[0].focus()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgNewWebhook\", [\"$tgResources\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", NewWebhookDirective])\r\n\r\n\r\n#############################################################################\r\n## Github Controller\r\n#############################################################################\r\n\r\nclass GithubController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = @translate.instant(\"ADMIN.GITHUB.SECTION_NAME\")\r\n        @scope.project = {}\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.GITHUB.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadModules: ->\r\n        return @rs.modules.list(@scope.projectId, \"github\").then (github) =>\r\n            @scope.github = github\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        promise = @.loadProject()\r\n        return @.loadModules()\r\n\r\nmodule.controller(\"GithubController\", GithubController)\r\n\r\n\r\n#############################################################################\r\n## Gitlab Controller\r\n#############################################################################\r\n\r\nclass GitlabController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = @translate.instant(\"ADMIN.GITLAB.SECTION_NAME\")\r\n        @scope.project = {}\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.GITLAB.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"project:modules:reload\", =>\r\n            @.loadModules()\r\n\r\n    loadModules: ->\r\n        return @rs.modules.list(@scope.projectId, \"gitlab\").then (gitlab) =>\r\n            @scope.gitlab = gitlab\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n        return @.loadModules()\r\n\r\nmodule.controller(\"GitlabController\", GitlabController)\r\n\r\n\r\n#############################################################################\r\n## Bitbucket Controller\r\n#############################################################################\r\n\r\nclass BitbucketController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = @translate.instant(\"ADMIN.BITBUCKET.SECTION_NAME\")\r\n        @scope.project = {}\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.BITBUCKET.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n        @scope.$on \"project:modules:reload\", =>\r\n            @.loadModules()\r\n\r\n    loadModules: ->\r\n        return @rs.modules.list(@scope.projectId, \"bitbucket\").then (bitbucket) =>\r\n            @scope.bitbucket = bitbucket\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n        return @.loadModules()\r\n\r\nmodule.controller(\"BitbucketController\", BitbucketController)\r\n\r\n\r\nSelectInputText = ($translate, $confirm)->\r\n    link = ($scope, $el, $attrs) ->\r\n        $el.on \"click\", \".select-input-content\", () ->\r\n            source = $el.find(\"input\")\r\n            if !source.val()\r\n                return\r\n\r\n            source.select()\r\n            document.execCommand 'copy'\r\n            $confirm.notify(\"success\", $translate.instant(\"COMMON.COPIED_TO_CLIPBOARD\"))\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgSelectInputText\", [\"$translate\", \"$tgConfirm\", SelectInputText])\r\n\r\n\r\n#############################################################################\r\n## GithubWebhooks Directive\r\n#############################################################################\r\n\r\nGithubWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.saveAttribute($scope.github, \"github\")\r\n            promise.then ->\r\n                $analytics.trackEvent(\"github-webhook\", \"created-or-changed\", \"Create or changed github webhook\", 1)\r\n                currentLoading.finish()\r\n                $confirm.notify(\"success\")\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgGithubWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GithubWebhooksDirective])\r\n\r\n\r\n#############################################################################\r\n## GitlabWebhooks Directive\r\n#############################################################################\r\n\r\nGitlabWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.saveAttribute($scope.gitlab, \"gitlab\")\r\n            promise.then ->\r\n                $analytics.trackEvent(\"gitlab-webhook\", \"created-or-changed\", \"Create or changed gitlab webhook\", 1)\r\n                currentLoading.finish()\r\n                $confirm.notify(\"success\")\r\n                $scope.$emit(\"project:modules:reload\")\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgGitlabWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GitlabWebhooksDirective])\r\n\r\n\r\n#############################################################################\r\n## BitbucketWebhooks Directive\r\n#############################################################################\r\n\r\nBitbucketWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.saveAttribute($scope.bitbucket, \"bitbucket\")\r\n            promise.then ->\r\n                $analytics.trackEvent(\"bitbucket-webhook\", \"created-or-changed\", \"Create or changed bitbucket webhook\", 1)\r\n                currentLoading.finish()\r\n                $confirm.notify(\"success\")\r\n                $scope.$emit(\"project:modules:reload\")\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgBitbucketWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", BitbucketWebhooksDirective])\r\n\r\n\r\n#############################################################################\r\n## Valid Origin IP's Directive\r\n#############################################################################\r\nValidOriginIpsDirective = ->\r\n    link = ($scope, $el, $attrs, $ngModel) ->\r\n        $ngModel.$parsers.push (value) ->\r\n            value = $.trim(value)\r\n            if value == \"\"\r\n                return []\r\n\r\n            return value.split(\",\")\r\n\r\n    return {\r\n        link: link\r\n        restrict: \"EA\"\r\n        require: \"ngModel\"\r\n    }\r\n\r\nmodule.directive(\"tgValidOriginIps\", ValidOriginIpsDirective)\r\n\r\n#############################################################################\r\n## Gogs Controller\r\n#############################################################################\r\n\r\nclass GogsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\r\n        bindMethods(@)\r\n\r\n        @scope.sectionName = @translate.instant(\"ADMIN.GOGS.SECTION_NAME\")\r\n        @scope.project = {}\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then () =>\r\n            title = @translate.instant(\"ADMIN.GOGS.PAGE_TITLE\", {projectName: @scope.project.name})\r\n            description = @scope.project.description\r\n            @appMetaService.setAll(title, description)\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadModules: ->\r\n        return @rs.modules.list(@scope.projectId, \"gogs\").then (gogs) =>\r\n            @scope.gogs = gogs\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        @.loadProject()\r\n        return @.loadModules()\r\n\r\nGogsWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            return if not form.validate()\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.saveAttribute($scope.gogs, \"gogs\")\r\n            promise.then ->\r\n                $analytics.trackEvent(\"gogs-webhook\", \"create-or-change\", \"Create or change gogs webhook\", 1)\r\n                currentLoading.finish()\r\n                $confirm.notify(\"success\")\r\n                $scope.$emit(\"project:modules:reload\")\r\n\r\n            promise.then null, (data) ->\r\n                currentLoading.finish()\r\n                form.setErrors(data)\r\n                if data._error_message\r\n                    $confirm.notify(\"error\", data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n        $el.on \"click\", \".submit-button\", submit\r\n\r\n    return {link:link}\r\n\r\nmodule.controller(\"GogsController\", GogsController)\r\nmodule.directive(\"tgGogsWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GogsWebhooksDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/projects/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ntimeout = @.taiga.timeout\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaProject\")\r\n\r\n#############################################################################\r\n## Delete Project Lightbox Directive\r\n#############################################################################\r\n\r\nDeleteProjectDirective = ($repo, $rootscope, $auth, $location, $navUrls, $confirm, lightboxService, tgLoader, currentUserService, $analytics) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        projectToDelete = null\r\n        $scope.$on \"deletelightbox:new\", (ctx, project)->\r\n            lightboxService.open($el)\r\n            projectToDelete = project\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        submit = ->\r\n            tgLoader.start()\r\n            lightboxService.close($el)\r\n\r\n            promise = $repo.remove(projectToDelete)\r\n\r\n            promise.then (data) ->\r\n                $analytics.trackEvent(\"projects\", \"delete\", \"Delete project\", 1)\r\n                tgLoader.pageLoaded()\r\n                $rootscope.$broadcast(\"projects:reload\")\r\n                $location.path($navUrls.resolve(\"home\"))\r\n                $confirm.notify(\"success\")\r\n                currentUserService.loadProjects()\r\n\r\n            # FIXME: error handling?\r\n            promise.then null, ->\r\n                $confirm.notify(\"error\")\r\n                lightboxService.close($el)\r\n\r\n        $el.on \"click\", \".button-red\", (event) ->\r\n            event.preventDefault()\r\n            lightboxService.close($el)\r\n\r\n        $el.on \"click\", \".button-green\", (event) ->\r\n            event.preventDefault()\r\n            submit()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgLbDeleteProject\", [\"$tgRepo\", \"$rootScope\", \"$tgAuth\", \"$tgLocation\", \"$tgNavUrls\",\r\n                                       \"$tgConfirm\", \"lightboxService\", \"tgLoader\", \"tgCurrentUserService\",\r\n                                       \"$tgAnalytics\", DeleteProjectDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/bind.coffee\r\n###\r\n\r\nbindOnce = @.taiga.bindOnce\r\n\r\n# Escape Html bind once directive\r\nBindOnceBindDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoBind, (val) ->\r\n            $el.text(val)\r\n\r\n    return {link:link}\r\n\r\n# Html bind once directive\r\nBindOnceHtmlDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoHtml, (val) ->\r\n            $el.html(val)\r\n\r\n    return {link:link}\r\n\r\n# Object reference bind once helper.\r\nBindOnceRefDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoRef, (val) ->\r\n            $el.html(\"##{val} \")\r\n    return {link:link}\r\n\r\n# Object src bind once helper.\r\nBindOnceSrcDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoSrc, (val) ->\r\n            $el.attr(\"src\", val)\r\n    return {link:link}\r\n\r\n# Object href bind once helper.\r\nBindOnceHrefDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoHref, (val) ->\r\n            $el.attr(\"href\", val)\r\n    return {link:link}\r\n\r\n# Object alt bind once helper.\r\nBindOnceAltDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoAlt, (val) ->\r\n            $el.attr(\"alt\", val)\r\n    return {link:link}\r\n\r\n# Object title bind once helper.\r\nBindOnceTitleDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        bindOnce $scope, $attrs.tgBoTitle, (val) ->\r\n            $el.attr(\"title\", val)\r\n    return {link:link}\r\n\r\nBindTitleDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$watch $attrs.tgTitleHtml, (val) ->\r\n            $el.attr(\"title\", val) if val?\r\n\r\n    return {link:link}\r\n\r\nBindHtmlDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$watch $attrs.tgBindHtml, (val) ->\r\n            $el.html(val) if val?\r\n\r\n    return {link:link}\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.directive(\"tgBoBind\", BindOnceBindDirective)\r\nmodule.directive(\"tgBoHtml\", BindOnceHtmlDirective)\r\nmodule.directive(\"tgBoRef\", BindOnceRefDirective)\r\nmodule.directive(\"tgBoSrc\", BindOnceSrcDirective)\r\nmodule.directive(\"tgBoHref\", BindOnceHrefDirective)\r\nmodule.directive(\"tgBoAlt\", BindOnceAltDirective)\r\nmodule.directive(\"tgBoTitle\", BindOnceTitleDirective)\r\nmodule.directive(\"tgBindTitle\", BindTitleDirective)\r\nmodule.directive(\"tgBindHtml\", BindHtmlDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/conf.coffee\r\n###\r\n\r\nclass ConfigurationService\r\n    constructor: () ->\r\n        @.config = window.taigaConfig\r\n\r\n    get: (key, defaultValue=null) ->\r\n        if _.has(@.config, key)\r\n            return @.config[key]\r\n        return defaultValue\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.service(\"$tgConfig\", ConfigurationService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/contrib.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaBase\")\r\n\r\n\r\nclass ContribController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"$scope\",\r\n        \"$routeParams\",\r\n        \"$tgRepo\",\r\n        \"$tgResources\",\r\n        \"$tgConfirm\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@rootScope, @scope, @params, @repo, @rs, @confirm, @projectService) ->\r\n        @scope.currentPlugin = _.head(_.filter(@rootScope.adminPlugins, {\"slug\": @params.plugin}))\r\n        @scope.projectSlug = @params.pslug\r\n\r\n        @.loadInitialData()\r\n\r\n    loadProject: ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @scope.projectId = project.id\r\n        @scope.project = project\r\n        @scope.$emit('project:loaded', project)\r\n        @scope.$broadcast('project:loaded', project)\r\n        return project\r\n\r\n    loadInitialData: ->\r\n        return @.loadProject()\r\n\r\nmodule.controller(\"ContribController\", ContribController)\r\n\r\n\r\nclass ContribUserSettingsController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"$scope\",\r\n        \"$routeParams\"\r\n    ]\r\n\r\n    constructor: (@rootScope, @scope, @params) ->\r\n        @scope.currentPlugin = _.head(_.filter(@rootScope.userSettingsPlugins, {\"slug\": @params.plugin}))\r\n\r\nmodule.controller(\"ContribUserSettingsController\", ContribUserSettingsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/filters.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nclass FiltersStorageService extends taiga.Service\r\n    @.$inject = [\"$tgStorage\", \"$routeParams\"]\r\n\r\n    constructor: (@storage, @params) ->\r\n\r\n    generateHash: (components=[]) ->\r\n        components = _.map(components, (x) -> JSON.stringify(x))\r\n        return hex_sha1(components.join(\":\"))\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/http.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass HttpService extends taiga.Service\r\n    @.$inject = [\"$http\", \"$q\", \"$tgStorage\", \"$rootScope\", \"$cacheFactory\", \"$translate\"]\r\n\r\n    constructor: (@http, @q, @storage, @rootScope, @cacheFactory, @translate) ->\r\n        super()\r\n\r\n        @.cache = @cacheFactory(\"httpget\")\r\n    headers: ->\r\n        headers = {}\r\n\r\n        # Authorization\r\n        token = @storage.get('token')\r\n        if token\r\n            headers[\"Authorization\"] = \"Bearer #{token}\"\r\n\r\n        # Accept-Language\r\n        lang = @translate.preferredLanguage()\r\n        if lang\r\n            headers[\"Accept-Language\"] = lang\r\n\r\n        return headers\r\n\r\n    request: (options) ->\r\n        options.headers = _.assign({}, options.headers or {}, @.headers())\r\n\r\n        return @http(options)\r\n\r\n    get: (url, params, options) ->\r\n        options = _.assign({method: \"GET\", url: url}, options)\r\n        options.params = params if params\r\n\r\n        # prevent duplicated http request\r\n        options.cache = @.cache\r\n\r\n        return @.request(options).finally (data) =>\r\n            @.cache.removeAll()\r\n\r\n    post: (url, data, params, options) ->\r\n        options = _.assign({method: \"POST\", url: url}, options)\r\n\r\n        options.data = data if data\r\n        options.params = params if params\r\n\r\n        return @.request(options)\r\n\r\n    put: (url, data, params, options) ->\r\n        options = _.assign({method: \"PUT\", url: url}, options)\r\n        options.data = data if data\r\n        options.params = params if params\r\n        return @.request(options)\r\n\r\n    patch: (url, data, params, options) ->\r\n        options = _.assign({method: \"PATCH\", url: url}, options)\r\n        options.data = data if data\r\n        options.params = params if params\r\n        return @.request(options)\r\n\r\n    delete: (url, data, params, options) ->\r\n        options = _.assign({method: \"DELETE\", url: url}, options)\r\n        options.data = data if data\r\n        options.params = params if params\r\n        return @.request(options)\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.service(\"$tgHttp\", HttpService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/location.coffee\r\n###\r\n\r\n\r\nlocationFactory = ($location, $route, $rootscope) ->\r\n    $location.noreload =  (scope) ->\r\n        lastRoute = $route.current\r\n        un = scope.$on \"$locationChangeSuccess\", ->\r\n            $route.current = lastRoute\r\n            un()\r\n\r\n        return $location\r\n\r\n    $location.isInCurrentRouteParams = (name, value) ->\r\n        params = $location.search() || {}\r\n\r\n        return params[name] == value\r\n\r\n    return $location\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.factory(\"$tgLocation\", [\"$location\", \"$route\", \"$rootScope\", locationFactory])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/model.coffee\r\n###\r\n\r\nclass Model\r\n    constructor: (name, data, dataTypes) ->\r\n        @._attrs = data\r\n        @._name = name\r\n        @._dataTypes = dataTypes\r\n\r\n        @.setAttrs(data)\r\n        @.initialize()\r\n\r\n    realClone: ->\r\n        attrs = _.cloneDeep(@._attrs)\r\n\r\n        instance =  new Model(@._name, attrs, @._dataTypes)\r\n\r\n        instance._modifiedAttrs = _.cloneDeep(@._modifiedAttrs)\r\n        instance._isModified = _.cloneDeep(@._isModified)\r\n\r\n        return instance\r\n\r\n    clone: ->\r\n        instance = new Model(@._name, @._attrs, @._dataTypes)\r\n        instance._modifiedAttrs = @._modifiedAttrs\r\n        instance._isModified = @._isModified\r\n        return instance\r\n\r\n    applyCasts: ->\r\n        for attrName, castName of @._dataTypes\r\n            castMethod = service.casts[castName]\r\n            if not castMethod\r\n                continue\r\n\r\n            @._attrs[attrName] = castMethod(@._attrs[attrName])\r\n\r\n    getIdAttrName: ->\r\n        return \"id\"\r\n\r\n    getName: ->\r\n        return @._name\r\n\r\n    getAttrs: (patch=false) ->\r\n        if @._attrs.version?\r\n            @._modifiedAttrs.version = @._attrs.version\r\n\r\n        if patch\r\n            return _.extend({}, @._modifiedAttrs)\r\n        return _.extend({}, @._attrs, @._modifiedAttrs)\r\n\r\n    setAttrs: (attrs) ->\r\n        @._attrs = attrs\r\n        @._modifiedAttrs = {}\r\n\r\n        @.applyCasts()\r\n        @._isModified = false\r\n\r\n    setAttr: (name, value) ->\r\n        @._modifiedAttrs[name] = value\r\n        @._isModified = true\r\n\r\n    initialize: () ->\r\n        self = @\r\n\r\n        getter = (name) ->\r\n            return ->\r\n                if typeof(name) == 'string' and name.substr(0,2) == \"__\"\r\n                    return self[name]\r\n\r\n                if name not in _.keys(self._modifiedAttrs)\r\n                    return self._attrs[name]\r\n\r\n                return self._modifiedAttrs[name]\r\n\r\n        setter = (name) ->\r\n            return (value) ->\r\n                if typeof(name) == 'string' and name.substr(0,2) == \"__\"\r\n                    self[name] = value\r\n                    return\r\n\r\n                if self._attrs[name] != value\r\n                    self._modifiedAttrs[name] = value\r\n                    self._isModified = true\r\n                else\r\n                    delete self._modifiedAttrs[name]\r\n\r\n                return\r\n\r\n        _.each @_attrs, (value, name) ->\r\n            options =\r\n                get: getter(name)\r\n                set: setter(name)\r\n                enumerable: true\r\n                configurable: true\r\n\r\n            Object.defineProperty(self, name, options)\r\n\r\n    serialize: () ->\r\n        data =\r\n            \"data\": _.clone(@_attrs)\r\n            \"name\": @_name\r\n\r\n        return JSON.stringify(data)\r\n\r\n    isModified: ->\r\n        return this._isModified\r\n\r\n    isAttributeModified: (attribute) ->\r\n        return @._modifiedAttrs[attribute]?\r\n\r\n    markSaved: () ->\r\n        @._isModified = false\r\n        @._attrs = @.getAttrs()\r\n        @._modifiedAttrs = {}\r\n\r\n    revert: () ->\r\n        @_modifiedAttrs = {}\r\n        @_isModified = false\r\n\r\n    @desSerialize = (sdata) ->\r\n        ddata = JSON.parse(sdata)\r\n        model = new Model(ddata.url, ddata.data)\r\n        return model\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nclass ModelService extends taiga.Service\r\n    @.$inject = [\"$q\", \"$tgUrls\", \"$tgStorage\", \"$tgHttp\"]\r\n\r\n    constructor: (@q, @urls, @storage, @http) ->\r\n        super()\r\n\r\nprovider = ($q, $http, $gmUrls, $gmStorage) ->\r\n    service = {}\r\n    service.make_model = (name, data, cls=Model, dataTypes={}) ->\r\n        return new cls(name, data, dataTypes)\r\n\r\n    service.cls = Model\r\n    service.casts = {\r\n        int: (value) ->\r\n            return parseInt(value, 10)\r\n\r\n        float: (value) ->\r\n            return parseFloat(value, 10)\r\n    }\r\n\r\n    return service\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.factory(\"$tgModel\", [\"$q\", \"$http\", \"$tgUrls\", \"$tgStorage\", provider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/navurls.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntrim = @.taiga.trim\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaBase\")\r\n\r\n\r\n#############################################################################\r\n## Navigation Urls Service\r\n#############################################################################\r\n\r\nclass NavigationUrlsService extends taiga.Service\r\n    constructor: ->\r\n        @.urls = {}\r\n\r\n    update: (urls) ->\r\n        @.urls = _.merge({}, @.urls, urls or {})\r\n\r\n    formatUrl: (url, ctx={}) ->\r\n        replacer = (match) ->\r\n            match = trim(match, \":\")\r\n            return ctx[match] or \"undefined\"\r\n        return url.replace(/(:\\w+)/g, replacer)\r\n\r\n    resolve: (name, ctx) ->\r\n        url = @.urls[name]\r\n        return \"\" if not url\r\n        return @.formatUrl(url, ctx) if ctx\r\n        return url\r\n\r\nmodule.service(\"$tgNavUrls\", NavigationUrlsService)\r\n\r\n\r\n#############################################################################\r\n## Navigation Urls Directive\r\n#############################################################################\r\n\r\nNavigationUrlsDirective = ($navurls, $auth, $q, $location, lightboxService, tgSections) ->\r\n    # Example:\r\n    # link(tg-nav=\"project-backlog:project='sss',\")\r\n\r\n    # bindOnce version that uses $q for offer\r\n    # promise based api\r\n    bindOnceP = ($scope, attr) ->\r\n        defered = $q.defer()\r\n        bindOnce $scope, attr, (v) ->\r\n            defered.resolve(v)\r\n        return defered.promise\r\n\r\n    parseNav = (data, $scope) ->\r\n        [name, params] = _.map(data.split(\":\"), trim)\r\n        if params\r\n            # split by 'xxx='\r\n            # example\r\n            # project=vm.timeline.getIn(['data', 'project', 'slug']), ref=vm.timeline.getIn(['obj', 'ref'])\r\n            # [\"\", \"project\", \"vm.timeline.getIn(['data', 'project', 'slug']), \", \"ref\", \"vm.timeline.getIn(['obj', 'ref'])\"]\r\n            result = params.split(/(\\w+)=/)\r\n\r\n            # remove empty string\r\n            result = _.filter result, (str) -> return str.length\r\n\r\n            # remove , at the end of the string\r\n            result = _.map result, (str) -> return trim(str.replace(/,$/g, ''))\r\n\r\n            params = []\r\n            index = 0\r\n\r\n            # ['param1', 'value'] => [{'param1': 'value'}]\r\n            while index < result.length\r\n                obj = {}\r\n                obj[result[index]] = result[index + 1]\r\n                params.push obj\r\n                index = index + 2\r\n        else\r\n            params = []\r\n\r\n        values = _.map params, (param) -> _.values(param)[0]\r\n        promises = _.map(values, (x) -> bindOnceP($scope, x))\r\n\r\n        return $q.all(promises).then ->\r\n            options = {}\r\n            for param in params\r\n                key = Object.keys(param)[0]\r\n                value = param[key]\r\n\r\n                options[key] = $scope.$eval(value)\r\n            return [name, options]\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        if $el.is(\"a\")\r\n            $el.attr(\"href\", \"#\")\r\n\r\n        $el.on \"mouseenter\", (event) ->\r\n            target = $(event.currentTarget)\r\n\r\n            if !target.data(\"fullUrl\") || $attrs.tgNavGetParams != target.data(\"params\")\r\n                parseNav($attrs.tgNav, $scope).then (result) ->\r\n                    [name, options] = result\r\n                    user = $auth.getUser()\r\n                    options.user = user.username if user\r\n\r\n                    if name == 'project'\r\n                        path = tgSections.getPath(options['project'], options['section'])\r\n                        name = \"#{name}-#{path}\"\r\n\r\n                    url = $navurls.resolve(name)\r\n\r\n                    fullUrl = $navurls.formatUrl(url, options)\r\n\r\n                    if $attrs.tgNavGetParams\r\n                        getURLParams = JSON.parse($attrs.tgNavGetParams)\r\n                        getURLParamsStr = $.param(getURLParams)\r\n                        fullUrl = \"#{fullUrl}?#{getURLParamsStr}\"\r\n\r\n                        target.data(\"params\", $attrs.tgNavGetParams)\r\n\r\n                    target.data(\"fullUrl\", fullUrl)\r\n\r\n                    if target.is(\"a\")\r\n                        target.attr(\"href\", fullUrl)\r\n\r\n                    $el.on \"click\", (event) ->\r\n                        if event.metaKey || event.ctrlKey\r\n                            return\r\n\r\n                        event.preventDefault()\r\n                        target = $(event.currentTarget)\r\n\r\n                        if target.hasClass('noclick')\r\n                            return\r\n\r\n                        fullUrl = target.data(\"fullUrl\")\r\n\r\n                        switch event.which\r\n                            when 1\r\n                                $location.url(fullUrl)\r\n                                $scope.$apply()\r\n                            when 2\r\n                                window.open fullUrl\r\n\r\n                        lightboxService.closeAll()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link: link}\r\n\r\nmodule.directive(\"tgNav\",\r\n    [\"$tgNavUrls\", \"$tgAuth\", \"$q\", \"$tgLocation\", \"lightboxService\", \"$tgSections\", NavigationUrlsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/repository.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass RepositoryService extends taiga.Service\r\n    @.$inject = [\"$q\", \"$tgModel\", \"$tgStorage\", \"$tgHttp\", \"$tgUrls\"]\r\n\r\n    constructor: (@q, @model, @storage, @http, @urls) ->\r\n        super()\r\n\r\n    resolveUrlForModel: (model) ->\r\n        idAttrName = model.getIdAttrName()\r\n        return \"#{@urls.resolve(model.getName())}/#{model[idAttrName]}\"\r\n\r\n    resolveUrlForAttributeModel: (model) ->\r\n        return @urls.resolve(model.getName(), model.parent)\r\n\r\n    create: (name, data, dataTypes={}, extraParams={}) ->\r\n        defered = @q.defer()\r\n        url = @urls.resolve(name)\r\n\r\n        promise = @http.post(url, JSON.stringify(data), extraParams)\r\n        promise.success (_data, _status) =>\r\n            defered.resolve(@model.make_model(name, _data, null, dataTypes))\r\n\r\n        promise.error (data, status) =>\r\n            defered.reject(data)\r\n\r\n        return defered.promise\r\n\r\n    remove: (model, params={}) ->\r\n        defered = @q.defer()\r\n        url = @.resolveUrlForModel(model)\r\n\r\n        promise = @http.delete(url, {}, params)\r\n        promise.success (data, status) ->\r\n            defered.resolve(model)\r\n\r\n        promise.error (data, status) ->\r\n            defered.reject(model)\r\n\r\n        return defered.promise\r\n\r\n    saveAll: (models, patch=true) ->\r\n        promises = _.map(models, (x) => @.save(x, true))\r\n        return @q.all(promises)\r\n\r\n    save: (model, patch=true, params = {}, options, returnHeaders = false) ->\r\n        defered = @q.defer()\r\n\r\n        if not model.isModified() and patch\r\n            defered.resolve(model)\r\n            return defered.promise\r\n\r\n        url = @.resolveUrlForModel(model)\r\n\r\n        data = JSON.stringify(model.getAttrs(patch))\r\n\r\n        if patch\r\n            promise = @http.patch(url, data, params, options)\r\n        else\r\n            promise = @http.put(url, data, params, options)\r\n\r\n        promise.success (data, status, headers, response) =>\r\n            model._isModified = false\r\n            model._attrs = _.extend(model.getAttrs(), data)\r\n            model._modifiedAttrs = {}\r\n\r\n            model.applyCasts()\r\n\r\n            if returnHeaders\r\n                defered.resolve([model, headers()])\r\n            else\r\n                defered.resolve(model)\r\n\r\n        promise.error (data, status) ->\r\n            defered.reject(data)\r\n\r\n        return defered.promise\r\n\r\n    saveAttribute: (model, attribute, patch=true) ->\r\n        defered = @q.defer()\r\n\r\n        if not model.isModified() and patch\r\n            defered.resolve(model)\r\n            return defered.promise\r\n\r\n        url = @.resolveUrlForAttributeModel(model)\r\n\r\n        data = {}\r\n\r\n        data[attribute] = model.getAttrs()\r\n\r\n        if patch\r\n            promise = @http.patch(url, data)\r\n        else\r\n            promise = @http.put(url, data)\r\n\r\n        promise.success (data, status) =>\r\n            model._isModified = false\r\n            model._attrs = _.extend(model.getAttrs(), data)\r\n            model._modifiedAttrs = {}\r\n\r\n            model.applyCasts()\r\n            defered.resolve(model)\r\n\r\n        promise.error (data, status) ->\r\n            defered.reject(data)\r\n\r\n        return defered.promise\r\n\r\n    refresh: (model) ->\r\n        defered = @q.defer()\r\n\r\n        url = @.resolveUrlForModel(model)\r\n        promise = @http.get(url)\r\n        promise.success (data, status) ->\r\n            model._modifiedAttrs = {}\r\n            model._attrs = data\r\n            model._isModified = false\r\n            model.applyCasts()\r\n            defered.resolve(model)\r\n\r\n        promise.error (data, status) ->\r\n            defered.reject(data)\r\n\r\n        return defered.promise\r\n\r\n    queryMany: (name, params, options={}, headers=false) ->\r\n        url = @urls.resolve(name)\r\n        httpOptions = {headers: {}}\r\n\r\n        if not options.enablePagination\r\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\r\n\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            result =  _.map(data.data, (x) => @model.make_model(name, x))\r\n\r\n            if headers\r\n                return [result, data.headers]\r\n\r\n            return result\r\n\r\n    queryOneAttribute: (name, id, attribute, params, options={}) ->\r\n        url = @urls.resolve(name, id)\r\n        httpOptions = {headers: {}}\r\n\r\n        if not options.enablePagination\r\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\r\n\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            model = @model.make_model(name, data.data[attribute])\r\n            model.parent = id\r\n\r\n            return model\r\n\r\n    queryOne: (name, id, params, options={}) ->\r\n        url = @urls.resolve(name)\r\n        url = \"#{url}/#{id}\" if id\r\n        httpOptions = {headers: {}}\r\n        if not options.enablePagination\r\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\r\n\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            return @model.make_model(name, data.data)\r\n\r\n    queryOneRaw: (name, id, params, options={}) ->\r\n        url = @urls.resolve(name)\r\n        url = \"#{url}/#{id}\" if id\r\n        httpOptions = _.merge({headers: {}}, options)\r\n        if not options.enablePagination\r\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            return data.data\r\n\r\n    queryPaginated: (name, params, options={}) ->\r\n        url = @urls.resolve(name)\r\n        httpOptions = _.merge({headers: {}}, options)\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            headers = data.headers()\r\n            result = {}\r\n            result.models = _.map(data.data, (x) => @model.make_model(name, x))\r\n            result.count = parseInt(headers[\"x-pagination-count\"], 10)\r\n            result.current = parseInt(headers[\"x-pagination-current\"] or 1, 10)\r\n            result.paginatedBy = parseInt(headers[\"x-paginated-by\"], 10)\r\n            return result\r\n\r\n    queryOnePaginatedRaw: (name, id, params, options={}) ->\r\n        url = @urls.resolve(name)\r\n        url = \"#{url}/#{id}\" if id\r\n        httpOptions = _.merge({headers: {}}, options)\r\n\r\n        return @http.get(url, params, httpOptions).then (data) =>\r\n            headers = data.headers()\r\n            result = {}\r\n            result.data = data.data\r\n            result.count = parseInt(headers[\"x-pagination-count\"], 10)\r\n            result.current = parseInt(headers[\"x-pagination-current\"] or 1, 10)\r\n            result.paginatedBy = parseInt(headers[\"x-paginated-by\"], 10)\r\n\r\n            return result\r\n\r\n    resolve: (options) ->\r\n        params = {}\r\n        params.project = options.pslug if options.pslug?\r\n        params.us = options.usref if options.usref?\r\n        params.task = options.taskref if options.taskref?\r\n        params.issue = options.issueref if options.issueref?\r\n        params.milestone = options.sslug if options.sslug?\r\n        params.wikipage = options.wikipage if options.wikipage?\r\n        params.ref = options.ref if options.ref?\r\n\r\n        cache = not (options.wikipage or options.sslug)\r\n        return @.queryOneRaw(\"resolver\", null, params, {cache: cache})\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.service(\"$tgRepo\", RepositoryService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/storage.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass StorageService extends taiga.Service\r\n    @.$inject = [\"$rootScope\"]\r\n\r\n    constructor: ($rootScope) ->\r\n        super()\r\n\r\n    get: (key, _default) ->\r\n        serializedValue = localStorage.getItem(key)\r\n        if serializedValue == null\r\n            return _default or null\r\n\r\n        return JSON.parse(serializedValue)\r\n\r\n    set: (key, val) ->\r\n        if _.isObject(key)\r\n            _.each key, (val, key) =>\r\n                @set(key, val)\r\n        else\r\n            localStorage.setItem(key, JSON.stringify(val))\r\n\r\n    contains: (key) ->\r\n        value = @.get(key)\r\n        return (value != null)\r\n\r\n    remove: (key) ->\r\n        localStorage.removeItem(key)\r\n\r\n    clear: ->\r\n        localStorage.clear()\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.service(\"$tgStorage\", StorageService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/base/urls.coffee\r\n###\r\n\r\nformat = (fmt, obj) ->\r\n    obj = _.clone(obj)\r\n    return fmt.replace /%s/g, (match) -> String(obj.shift())\r\n\r\ntaiga = @.taiga\r\n\r\nclass UrlsService extends taiga.Service\r\n    @.$inject = [\"$tgConfig\"]\r\n\r\n    constructor: (@config) ->\r\n        @.urls = {}\r\n        @.mainUrl = @config.get(\"api\")\r\n\r\n    update: (urls) ->\r\n        @.urls = _.merge(@.urls, urls)\r\n\r\n    resolve: ->\r\n        args = _.toArray(arguments)\r\n\r\n        if args.length == 0\r\n            throw Error(\"wrong arguments to setUrls\")\r\n\r\n        name = args.slice(0, 1)[0]\r\n        url = format(@.urls[name], args.slice(1))\r\n\r\n        return format(\"%s/%s\", [\r\n            _.trimEnd(@.mainUrl, \"/\"),\r\n            _.trimStart(url, \"/\")\r\n        ])\r\n\r\n    resolveAbsolute: ->\r\n        url = @.resolve.apply(@, arguments)\r\n        if (/^https?:\\/\\//i).test(url)\r\n            return url\r\n        if (/^\\//).test(url)\r\n            return \"#{window.location.protocol}//#{window.location.host}#{url}\"\r\n        return \"#{window.location.protocol}//#{window.location.host}/#{url}\"\r\n\r\n\r\nmodule = angular.module(\"taigaBase\")\r\nmodule.service('$tgUrls', UrlsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/custom-attributes-values.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo) ->\r\n    _get = (objectId, resource) ->\r\n        return $repo.queryOne(resource, objectId)\r\n\r\n    service = {\r\n        epic: {\r\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/epic\")\r\n        }\r\n        userstory: {\r\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/userstory\")\r\n        }\r\n        task: {\r\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/task\")\r\n        }\r\n        issue: {\r\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/issue\")\r\n        }\r\n    }\r\n\r\n    return (instance) ->\r\n        instance.customAttributesValues = service\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgCustomAttributesValuesResourcesProvider\", [\"$tgRepo\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/custom-attributes.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\n\r\nresourceProvider = ($repo) ->\r\n    _list = (projectId, resource) ->\r\n        return $repo.queryMany(resource, {project: projectId})\r\n\r\n    service = {\r\n        epic:{\r\n            list: (projectId) -> _list(projectId, \"custom-attributes/epic\")\r\n        }\r\n        userstory:{\r\n            list: (projectId) -> _list(projectId, \"custom-attributes/userstory\")\r\n        }\r\n        task:{\r\n            list: (projectId) -> _list(projectId, \"custom-attributes/task\")\r\n        }\r\n        issue: {\r\n            list: (projectId) -> _list(projectId, \"custom-attributes/issue\")\r\n        }\r\n    }\r\n\r\n    return (instance) ->\r\n        instance.customAttributes = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgCustomAttributesResourcesProvider\", [\"$tgRepo\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/epics.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\n\r\nresourceProvider = ($repo, $http, $urls, $storage) ->\r\n    service = {}\r\n    hashSuffix = \"epics-queryparams\"\r\n\r\n    service.getByRef = (projectId, ref) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n        params.ref = ref\r\n        return $repo.queryOne(\"epics\", \"by_ref\", params)\r\n\r\n    service.listValues = (projectId, type) ->\r\n        params = {\"project\": projectId}\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryMany(type, params)\r\n\r\n    service.storeQueryParams = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getQueryParams = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    service.upvote = (epicId) ->\r\n        url = $urls.resolve(\"epic-upvote\", epicId)\r\n        return $http.post(url)\r\n\r\n    service.downvote = (epicId) ->\r\n        url = $urls.resolve(\"epic-downvote\", epicId)\r\n        return $http.post(url)\r\n\r\n    service.watch = (epicId) ->\r\n        url = $urls.resolve(\"epic-watch\", epicId)\r\n        return $http.post(url)\r\n\r\n    service.unwatch = (epicId) ->\r\n        url = $urls.resolve(\"epic-unwatch\", epicId)\r\n        return $http.post(url)\r\n\r\n    return (instance) ->\r\n        instance.epics = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgEpicsResourcesProvider\", [\"$tgRepo\",\"$tgHttp\", \"$tgUrls\", \"$tgStorage\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/history.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (type, objectId) ->\r\n        return $repo.queryOneRaw(\"history/#{type}\", objectId)\r\n\r\n    service.editComment = (type, objectId, activityId, comment) ->\r\n        url = $urls.resolve(\"history/#{type}\")\r\n        url = \"#{url}/#{objectId}/edit_comment\"\r\n        params = {\r\n            id: activityId\r\n        }\r\n        commentData = {\r\n            comment: comment\r\n        }\r\n        return $http.post(url, commentData, params).then (data) =>\r\n            return data.data\r\n\r\n    service.getCommentHistory = (type, objectId, activityId) ->\r\n        url = $urls.resolve(\"history/#{type}\")\r\n        url = \"#{url}/#{objectId}/comment_versions\"\r\n        params = {id: activityId}\r\n        return $http.get(url, params).then (data) =>\r\n            return data.data\r\n\r\n    service.deleteComment = (type, objectId, activityId) ->\r\n        url = $urls.resolve(\"history/#{type}\")\r\n        url = \"#{url}/#{objectId}/delete_comment\"\r\n        params = {id: activityId}\r\n        return $http.post(url, null, params).then (data) =>\r\n            return data.data\r\n\r\n    service.undeleteComment = (type, objectId, activityId) ->\r\n        url = $urls.resolve(\"history/#{type}\")\r\n        url = \"#{url}/#{objectId}/undelete_comment\"\r\n        params = {id: activityId}\r\n        return $http.post(url, null, params).then (data) =>\r\n            return data.data\r\n\r\n    return (instance) ->\r\n        instance.history = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgHistoryResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/invitations.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo) ->\r\n    service = {}\r\n\r\n    service.get = (token) ->\r\n        return $repo.queryOne(\"invitations\", token)\r\n\r\n    return (instance) ->\r\n        instance.invitations = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgInvitationsResourcesProvider\", [\"$tgRepo\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/issues.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nresourceProvider = ($repo, $http, $urls, $storage, $q) ->\r\n    service = {}\r\n    hashSuffix = \"issues-queryparams\"\r\n\r\n    service.get = (projectId, issueId) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n        return $repo.queryOne(\"issues\", issueId, params)\r\n\r\n    service.getByRef = (projectId, ref) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n        params.ref = ref\r\n        return $repo.queryOne(\"issues\", \"by_ref\", params)\r\n\r\n    service.listInAllProjects = (filters) ->\r\n        return $repo.queryMany(\"issues\", filters)\r\n\r\n    service.list = (projectId, filters, options) ->\r\n        params = {project: projectId}\r\n        params = _.extend({}, params, filters or {})\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryPaginated(\"issues\", params, options)\r\n\r\n    service.listInProject = (projectId, sprintId=null, params) ->\r\n        params = _.merge(params, {project: projectId})\r\n        params.milestone = sprintId if sprintId\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryMany(\"issues\", params)\r\n\r\n    service.bulkCreate = (projectId, milestoneId, data) ->\r\n        url = $urls.resolve(\"bulk-create-issues\")\r\n        params = {project_id: projectId,  milestone_id: milestoneId, bulk_issues: data}\r\n        return $http.post(url, params)\r\n\r\n    service.upvote = (issueId) ->\r\n        url = $urls.resolve(\"issue-upvote\", issueId)\r\n        return $http.post(url)\r\n\r\n    service.downvote = (issueId) ->\r\n        url = $urls.resolve(\"issue-downvote\", issueId)\r\n        return $http.post(url)\r\n\r\n    service.watch = (issueId) ->\r\n        url = $urls.resolve(\"issue-watch\", issueId)\r\n        return $http.post(url)\r\n\r\n    service.unwatch = (issueId) ->\r\n        url = $urls.resolve(\"issue-unwatch\", issueId)\r\n        return $http.post(url)\r\n\r\n    service.stats = (projectId) ->\r\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/issues_stats\")\r\n\r\n    service.filtersData = (params) ->\r\n        return $repo.queryOneRaw(\"issues-filters\", null, params)\r\n\r\n    service.listValues = (projectId, type) ->\r\n        params = {\"project\": projectId}\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryMany(type, params)\r\n\r\n    service.createDefaultValues = (projectId, type) ->\r\n        data = {\"project_id\": projectId}\r\n        url = $urls.resolve(\"#{type}-create-default\")\r\n        return $http.post(url, data)\r\n\r\n    service.storeQueryParams = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getQueryParams = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\r\n        url = $urls.resolve(\"bulk-update-issue-milestone\")\r\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_issues: data}\r\n        return $http.post(url, params)\r\n\r\n    return (instance) ->\r\n        instance.issues = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgIssuesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", \"$q\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/kanban.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nresourceProvider = ($storage) ->\r\n    service = {}\r\n    hashSuffixStatusViewModes = \"kanban-statusviewmodels\"\r\n    hashSuffixStatusColumnModes = \"kanban-statuscolumnmodels\"\r\n\r\n    service.storeStatusColumnModes = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getStatusColumnModes = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    return (instance) ->\r\n        instance.kanban = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgKanbanResourcesProvider\", [\"$tgStorage\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/locales.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\n\r\nresourceProvider = ($repo) ->\r\n    service = {\r\n        list: -> return $repo.queryMany(\"locales\")\r\n    }\r\n\r\n    return (instance) ->\r\n        instance.locales = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgLocalesResourcesProvider\", [\"$tgRepo\", resourceProvider])\r\n\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/mdrender.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $urls, $http) ->\r\n    service = {}\r\n\r\n    service.render = (projectId, content) ->\r\n        # We can't use an empty content\r\n        content = ' ' if not content? or content == \"\"\r\n\r\n        params = {\r\n            project_id: projectId\r\n            content: content\r\n        }\r\n        url = $urls.resolve(\"wiki\")\r\n        return $http.post(\"#{url}/render\", params).then (data) =>\r\n            return data.data\r\n\r\n    return (instance) ->\r\n        instance.mdrender = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgMdRenderResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/memberships.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (id) ->\r\n        return $repo.queryOne(\"memberships\", id)\r\n\r\n    service.list = (projectId, filters, enablePagination=true) ->\r\n        params = {project: projectId}\r\n        params = _.extend({}, params, filters or {})\r\n        if enablePagination\r\n            return $repo.queryPaginated(\"memberships\", params)\r\n\r\n        return $repo.queryMany(\"memberships\", params, options={enablePagination:enablePagination})\r\n\r\n    service.listByUser = (userId, filters) ->\r\n        params = {user: userId}\r\n        params = _.extend({}, params, filters or {})\r\n        return $repo.queryPaginated(\"memberships\", params)\r\n\r\n    service.resendInvitation = (id) ->\r\n        url = $urls.resolve(\"memberships\")\r\n        return $http.post(\"#{url}/#{id}/resend_invitation\", {})\r\n\r\n    service.bulkCreateMemberships = (projectId, data, invitation_extra_text) ->\r\n        url = $urls.resolve(\"bulk-create-memberships\")\r\n        params = {project_id: projectId, bulk_memberships: data, invitation_extra_text: invitation_extra_text}\r\n        return $http.post(url, params)\r\n\r\n    return (instance) ->\r\n        instance.memberships = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgMembershipsResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/modules.coffee\r\n###\r\n\r\nresourceProvider = ($repo) ->\r\n    service = {}\r\n\r\n    service.list = (projectId, module) ->\r\n        return $repo.queryOneAttribute(\"project-modules\", projectId, module)\r\n\r\n    return (instance) ->\r\n        instance.modules = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgModulesResourcesProvider\", [\"$tgRepo\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/notify-policies.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (id) ->\r\n        return $repo.queryOne(\"notify-policies\", id)\r\n\r\n    service.list = (filters) ->\r\n        params = _.extend({}, params, filters or {})\r\n        return $repo.queryMany(\"notify-policies\", params)\r\n\r\n    return (instance) ->\r\n        instance.notifyPolicies = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgNotifyPoliciesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/projects.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\n\r\nresourceProvider = ($config, $repo, $http, $urls, $auth, $q, $translate) ->\r\n    service = {}\r\n\r\n    service.get = (projectId) ->\r\n        return $repo.queryOne(\"projects\", projectId)\r\n\r\n    service.getBySlug = (projectSlug) ->\r\n        return $repo.queryOne(\"projects\", \"by_slug?slug=#{projectSlug}\")\r\n\r\n    service.list = (filters) ->\r\n        params = {\"order_by\": \"user_order\"}\r\n        params = _.extend({}, params, filters or {})\r\n        return $repo.queryMany(\"projects\", params)\r\n\r\n    service.listByMember = (memberId) ->\r\n        params = {\"member\": memberId, \"order_by\": \"user_order\"}\r\n        return $repo.queryMany(\"projects\", params)\r\n\r\n    service.templates = ->\r\n        return $repo.queryMany(\"project-templates\")\r\n\r\n    service.usersList = (projectId) ->\r\n        params = {\"project\": projectId}\r\n        return $repo.queryMany(\"users\", params)\r\n\r\n    service.rolesList = (projectId) ->\r\n        params = {\"project\": projectId}\r\n        return $repo.queryMany(\"roles\", params)\r\n\r\n    service.stats = (projectId) ->\r\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/stats\")\r\n\r\n    service.bulkUpdateOrder = (bulkData) ->\r\n        url = $urls.resolve(\"bulk-update-projects-order\")\r\n        return $http.post(url, bulkData)\r\n\r\n    service.regenerate_epics_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_epics_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.regenerate_userstories_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_userstories_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.regenerate_tasks_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_tasks_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.regenerate_issues_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_issues_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.delete_epics_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_epics_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.delete_userstories_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_userstories_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.delete_tasks_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_tasks_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.delete_issues_csv_uuid = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_issues_csv_uuid\"\r\n        return $http.post(url)\r\n\r\n    service.leave = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/leave\"\r\n        return $http.post(url)\r\n\r\n    service.memberStats = (projectId) ->\r\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/member_stats\")\r\n\r\n    service.tagsColors = (projectId) ->\r\n        return $repo.queryOne(\"projects\", \"#{projectId}/tags_colors\")\r\n\r\n    service.deleteTag = (projectId, tag) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_tag\"\r\n        return $http.post(url, {tag: tag})\r\n\r\n    service.createTag = (projectId, tag, color) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/create_tag\"\r\n        data = {}\r\n        data.tag = tag\r\n        data.color = null\r\n        if color\r\n            data.color = color\r\n        return $http.post(url, data)\r\n\r\n    service.editTag = (projectId, from_tag, to_tag, color) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/edit_tag\"\r\n        data = {}\r\n        data.from_tag = from_tag\r\n        if to_tag\r\n            data.to_tag = to_tag\r\n        data.color = null\r\n        if color\r\n            data.color = color\r\n        return $http.post(url, data)\r\n\r\n    service.mixTags = (projectId, to_tag, from_tags) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/mix_tags\"\r\n        return $http.post(url, {to_tag: to_tag, from_tags: from_tags})\r\n\r\n    service.export = (projectId) ->\r\n        url = \"#{$urls.resolve(\"exporter\")}/#{projectId}\"\r\n        return $http.get(url)\r\n\r\n    service.import = (file, statusUpdater) ->\r\n        defered = $q.defer()\r\n\r\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\r\n        if maxFileSize and file.size > maxFileSize\r\n            errorMsg = $translate.instant(\"PROJECT.IMPORT.ERROR_MAX_SIZE_EXCEEDED\", {\r\n                fileName: file.name\r\n                fileSize: sizeFormat(file.size)\r\n                maxFileSize: sizeFormat(maxFileSize)\r\n            })\r\n\r\n            response = {\r\n                status: 413,\r\n                data: _error_message: errorMsg\r\n            }\r\n            defered.reject(response)\r\n            return defered.promise\r\n\r\n        uploadProgress = (evt) =>\r\n            percent = Math.round((evt.loaded / evt.total) * 100)\r\n            message = $translate.instant(\"PROJECT.IMPORT.UPLOAD_IN_PROGRESS_MESSAGE\", {\r\n                uploadedSize: sizeFormat(evt.loaded)\r\n                totalSize: sizeFormat(evt.total)\r\n            })\r\n            statusUpdater(\"in-progress\", null, message, percent)\r\n\r\n        uploadComplete = (evt) =>\r\n            statusUpdater(\"done\",\r\n                          $translate.instant(\"PROJECT.IMPORT.TITLE\"),\r\n                          $translate.instant(\"PROJECT.IMPORT.DESCRIPTION\"))\r\n\r\n        uploadFailed = (evt) =>\r\n            statusUpdater(\"error\")\r\n\r\n        complete = (evt) =>\r\n            response = {}\r\n            try\r\n                response.data = JSON.parse(evt.target.responseText)\r\n            catch\r\n                response.data = {}\r\n            response.status = evt.target.status\r\n            if evt.target.getResponseHeader('Taiga-Info-Project-Is-Private')\r\n                response.headers = {\r\n                    isPrivate: evt.target.getResponseHeader('Taiga-Info-Project-Is-Private') == 'True',\r\n                    memberships: parseInt(evt.target.getResponseHeader('Taiga-Info-Project-Memberships'))\r\n                }\r\n            defered.resolve(response) if response.status in [201, 202]\r\n            defered.reject(response)\r\n\r\n        failed = (evt) =>\r\n            defered.reject(\"fail\")\r\n\r\n        data = new FormData()\r\n        data.append('dump', file)\r\n\r\n        xhr = new XMLHttpRequest()\r\n        xhr.upload.addEventListener(\"progress\", uploadProgress, false)\r\n        xhr.upload.addEventListener(\"load\", uploadComplete, false)\r\n        xhr.upload.addEventListener(\"error\", uploadFailed, false)\r\n        xhr.upload.addEventListener(\"abort\", uploadFailed, false)\r\n        xhr.addEventListener(\"load\", complete, false)\r\n        xhr.addEventListener(\"error\", failed, false)\r\n\r\n        xhr.open(\"POST\", $urls.resolve(\"importer\"))\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer #{$auth.getToken()}\")\r\n        xhr.setRequestHeader('Accept', 'application/json')\r\n        xhr.send(data)\r\n\r\n        return defered.promise\r\n\r\n    service.changeLogo = (projectId, file) ->\r\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\r\n        if maxFileSize and file.size > maxFileSize\r\n            response = {\r\n                status: 413,\r\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\r\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\r\n            }\r\n            defered = $q.defer()\r\n            defered.reject(response)\r\n            return defered.promise\r\n\r\n        data = new FormData()\r\n        data.append('logo', file)\r\n        options = {\r\n            transformRequest: angular.identity,\r\n            headers: {'Content-Type': undefined}\r\n        }\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/change_logo\"\r\n        return $http.post(url, data, {}, options)\r\n\r\n    service.removeLogo = (projectId) ->\r\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/remove_logo\"\r\n        return $http.post(url)\r\n\r\n    return (instance) ->\r\n        instance.projects = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgProjectsResourcesProvider\", [\"$tgConfig\", \"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgAuth\",\r\n                                                \"$q\", \"$translate\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/roles.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (id) ->\r\n        return $repo.queryOne(\"roles\", id)\r\n\r\n    service.list = (projectId) ->\r\n        return $repo.queryMany(\"roles\", {project: projectId})\r\n\r\n    return (instance) ->\r\n        instance.roles = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgRolesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/search.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $urls, $http, $q) ->\r\n    service = {}\r\n\r\n    service.do = (projectId, term) ->\r\n        deferredAbort = $q.defer()\r\n\r\n        url = $urls.resolve(\"search\")\r\n        params = {\r\n            url: url,\r\n            method: \"GET\",\r\n            timeout: deferredAbort.promise,\r\n            cancelable: true,\r\n            params: {\r\n                project: projectId\r\n                text: term,\r\n                get_all: false,\r\n            }\r\n        }\r\n\r\n        request = $http.request(params).then (data) ->\r\n            return data.data\r\n\r\n        request.abort = () ->\r\n            deferredAbort.resolve()\r\n\r\n        request.finally = () ->\r\n            request.abort = angular.noop\r\n            deferredAbort = request = null\r\n\r\n        return request\r\n\r\n    return (instance) ->\r\n        instance.search = service\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgSearchResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", \"$q\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/sprints.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nresourceProvider = ($repo, $model, $storage) ->\r\n    service = {}\r\n\r\n    service.get = (projectId, sprintId) ->\r\n        return $repo.queryOne(\"milestones\", sprintId).then (sprint) ->\r\n            uses = sprint.user_stories\r\n            uses = _.map(uses, (u) -> $model.make_model(\"userstories\", u))\r\n            sprint._attrs.user_stories = uses\r\n            return sprint\r\n\r\n    service.stats = (projectId, sprintId) ->\r\n        return $repo.queryOneRaw(\"milestones\", \"#{sprintId}/stats\")\r\n\r\n    service.list = (projectId, filters) ->\r\n        params = {\"project\": projectId}\r\n        params = _.extend({}, params, filters or {})\r\n        return $repo.queryMany(\"milestones\", params, {}, true).then (result) =>\r\n            milestones = result[0]\r\n            headers = result[1]\r\n\r\n            for m in milestones\r\n                uses = m.user_stories\r\n                uses = _.map(uses, (u) => $model.make_model(\"userstories\", u))\r\n                m._attrs.user_stories = uses\r\n\r\n            return {\r\n                milestones: milestones,\r\n                closed: parseInt(headers(\"Taiga-Info-Total-Closed-Milestones\"), 10),\r\n                open: parseInt(headers(\"Taiga-Info-Total-Opened-Milestones\"), 10)\r\n            }\r\n\r\n\r\n    return (instance) ->\r\n        instance.sprints = service\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgSprintsResourcesProvider\", [\"$tgRepo\", \"$tgModel\", \"$tgStorage\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/tasks.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nresourceProvider = ($repo, $http, $urls, $storage) ->\r\n    service = {}\r\n    hashSuffix = \"tasks-queryparams\"\r\n    hashSuffixStatusColumnModes = \"tasks-statuscolumnmodels\"\r\n    hashSuffixUsRowModes = \"tasks-usrowmodels\"\r\n\r\n    service.get = (projectId, taskId, extraParams) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n\r\n        params = _.extend({}, params, extraParams)\r\n\r\n        return $repo.queryOne(\"tasks\", taskId, params)\r\n\r\n    service.getByRef = (projectId, ref, extraParams) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n        params.ref = ref\r\n\r\n        params = _.extend({}, params, extraParams)\r\n\r\n        return $repo.queryOne(\"tasks\", \"by_ref\", params)\r\n\r\n    service.listInAllProjects = (filters) ->\r\n        return $repo.queryMany(\"tasks\", filters)\r\n\r\n    service.filtersData = (params) ->\r\n        return $repo.queryOneRaw(\"task-filters\", null, params)\r\n\r\n    service.list = (projectId, sprintId=null, userStoryId=null, params) ->\r\n        params = _.merge(params, {project: projectId, order_by: 'us_order'})\r\n        params.milestone = sprintId if sprintId\r\n        params.user_story = userStoryId if userStoryId\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryMany(\"tasks\", params)\r\n\r\n    service.bulkCreate = (projectId, sprintId, usId, data) ->\r\n        url = $urls.resolve(\"bulk-create-tasks\")\r\n        params = {project_id: projectId, milestone_id: sprintId, us_id: usId, bulk_tasks: data}\r\n        return $http.post(url, params).then (result) ->\r\n            return result.data\r\n\r\n    service.upvote = (taskId) ->\r\n        url = $urls.resolve(\"task-upvote\", taskId)\r\n        return $http.post(url)\r\n\r\n    service.downvote = (taskId) ->\r\n        url = $urls.resolve(\"task-downvote\", taskId)\r\n        return $http.post(url)\r\n\r\n    service.watch = (taskId) ->\r\n        url = $urls.resolve(\"task-watch\", taskId)\r\n        return $http.post(url)\r\n\r\n    service.unwatch = (taskId) ->\r\n        url = $urls.resolve(\"task-unwatch\", taskId)\r\n        return $http.post(url)\r\n\r\n    service.bulkUpdateTaskTaskboardOrder = (projectId, data) ->\r\n        url = $urls.resolve(\"bulk-update-task-taskboard-order\")\r\n        params = {project_id: projectId, bulk_tasks: data}\r\n        return $http.post(url, params)\r\n\r\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\r\n        url = $urls.resolve(\"bulk-update-task-milestone\")\r\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_tasks: data}\r\n        return $http.post(url, params)\r\n\r\n    service.reorder = (id, data, setOrders) ->\r\n        url = $urls.resolve(\"tasks\") + \"/#{id}\"\r\n\r\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\r\n\r\n        return $http.patch(url, data, null, options)\r\n            .then (result) -> result.data\r\n\r\n    service.listValues = (projectId, type) ->\r\n        params = {\"project\": projectId}\r\n        return $repo.queryMany(type, params)\r\n\r\n    service.createDefaultValues = (projectId, type) ->\r\n        data = {\"project_id\": projectId}\r\n        url = $urls.resolve(\"#{type}-create-default\")\r\n        return $http.post(url, data)\r\n\r\n    service.storeQueryParams = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getQueryParams = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    service.storeStatusColumnModes = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getStatusColumnModes = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    service.storeUsRowModes = (projectId, sprintId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffixUsRowModes}\"\r\n        hash = generateHash([projectId, sprintId, ns])\r\n\r\n        $storage.set(hash, params)\r\n\r\n    service.getUsRowModes = (projectId, sprintId) ->\r\n        ns = \"#{projectId}:#{hashSuffixUsRowModes}\"\r\n        hash = generateHash([projectId, sprintId, ns])\r\n\r\n        return $storage.get(hash) or {}\r\n\r\n    return (instance) ->\r\n        instance.tasks = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgTasksResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", resourceProvider])\r\n","###\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/user-project-settings.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (id) ->\r\n        return $repo.queryOne(\"user-project-settings\", id)\r\n\r\n    service.list = (filters) ->\r\n        params = _.extend({}, params, filters or {})\r\n        return $repo.queryMany(\"user-project-settings\", params)\r\n\r\n    return (instance) ->\r\n        instance.userProjectSettings = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgUserProjectSettingsResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/user-settings.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\n\r\nresourceProvider = ($config, $repo, $http, $urls, $q) ->\r\n    service = {}\r\n\r\n    service.changeAvatar = (file) ->\r\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\r\n        if maxFileSize and file.size > maxFileSize\r\n            response = {\r\n                status: 413,\r\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\r\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\r\n            }\r\n            defered = $q.defer()\r\n            defered.reject(response)\r\n            return defered.promise\r\n\r\n        data = new FormData()\r\n        data.append('avatar', file)\r\n        options = {\r\n            transformRequest: angular.identity,\r\n            headers: {'Content-Type': undefined}\r\n        }\r\n        url = \"#{$urls.resolve(\"users\")}/change_avatar\"\r\n        return $http.post(url, data, {}, options)\r\n\r\n    service.removeAvatar = () ->\r\n        url = \"#{$urls.resolve(\"users\")}/remove_avatar\"\r\n        return $http.post(url)\r\n\r\n    service.changePassword = (currentPassword, newPassword) ->\r\n        url = \"#{$urls.resolve(\"users\")}/change_password\"\r\n        data = {\r\n            current_password: currentPassword\r\n            password: newPassword\r\n        }\r\n        return $http.post(url, data)\r\n\r\n    return (instance) ->\r\n        instance.userSettings = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgUserSettingsResourcesProvider\", [\"$tgConfig\", \"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$q\",\r\n                                                    resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/users.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\n\r\nresourceProvider = ($http, $urls) ->\r\n    service = {}\r\n\r\n    service.contacts = (userId, options={}) ->\r\n        url = $urls.resolve(\"user-contacts\", userId)\r\n        httpOptions = {headers: {}}\r\n\r\n        if not options.enablePagination\r\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\r\n\r\n        return $http.get(url, {}, httpOptions)\r\n            .then (result) ->\r\n                return result.data\r\n\r\n    return (instance) ->\r\n        instance.users = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgUsersResourcesProvider\", [\"$tgHttp\", \"$tgUrls\", \"$q\",\r\n                                                    resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/userstories.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nresourceProvider = ($repo, $http, $urls, $storage, $q) ->\r\n    service = {}\r\n    hashSuffix = \"userstories-queryparams\"\r\n\r\n    service.get = (projectId, usId, extraParams) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n\r\n        params = _.extend({}, params, extraParams)\r\n\r\n        return $repo.queryOne(\"userstories\", usId, params)\r\n\r\n    service.getByRef = (projectId, ref, extraParams = {}) ->\r\n        params = service.getQueryParams(projectId)\r\n        params.project = projectId\r\n        params.ref = ref\r\n        params = _.extend({}, params, extraParams)\r\n\r\n        return $repo.queryOne(\"userstories\", \"by_ref\", params)\r\n\r\n    service.listInAllProjects = (filters) ->\r\n        return $repo.queryMany(\"userstories\", filters)\r\n\r\n    service.filtersData = (params) ->\r\n        return $repo.queryOneRaw(\"userstories-filters\", null, params)\r\n\r\n    service.listUnassigned = (projectId, filters, pageSize) ->\r\n        params = {\"project\": projectId, \"milestone\": \"null\"}\r\n        params = _.extend({}, params, filters or {})\r\n        service.storeQueryParams(projectId, params)\r\n\r\n        return $repo.queryMany(\"userstories\", _.extend(params, {\r\n            page_size: pageSize\r\n        }), {\r\n            enablePagination: true\r\n        }, true)\r\n\r\n    service.listAll = (projectId, filters) ->\r\n        params = {\"project\": projectId}\r\n        params = _.extend({}, params, filters or {})\r\n        service.storeQueryParams(projectId, params)\r\n\r\n        return $repo.queryMany(\"userstories\", params)\r\n\r\n    service.bulkCreate = (projectId, status, bulk) ->\r\n        data = {\r\n            project_id: projectId\r\n            status_id: status\r\n            bulk_stories: bulk\r\n        }\r\n\r\n        url = $urls.resolve(\"bulk-create-us\")\r\n\r\n        return $http.post(url, data)\r\n\r\n    service.upvote = (userStoryId) ->\r\n        url = $urls.resolve(\"userstory-upvote\", userStoryId)\r\n        return $http.post(url)\r\n\r\n    service.downvote = (userStoryId) ->\r\n        url = $urls.resolve(\"userstory-downvote\", userStoryId)\r\n        return $http.post(url)\r\n\r\n    service.watch = (userStoryId) ->\r\n        url = $urls.resolve(\"userstory-watch\", userStoryId)\r\n        return $http.post(url)\r\n\r\n    service.unwatch = (userStoryId) ->\r\n        url = $urls.resolve(\"userstory-unwatch\", userStoryId)\r\n        return $http.post(url)\r\n\r\n    service.bulkUpdateBacklogOrder = (projectId, data) ->\r\n        url = $urls.resolve(\"bulk-update-us-backlog-order\")\r\n        params = {project_id: projectId, bulk_stories: data}\r\n        return $http.post(url, params)\r\n\r\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\r\n        url = $urls.resolve(\"bulk-update-us-milestone\")\r\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_stories: data}\r\n        return $http.post(url, params)\r\n\r\n    service.bulkUpdateKanbanOrder = (projectId, statusId, data) ->\r\n        url = $urls.resolve(\"bulk-update-us-kanban-order\")\r\n        params = {project_id: projectId, status_id: statusId, bulk_stories: data}\r\n        return $http.post(url, params)\r\n\r\n    service.listValues = (projectId, type) ->\r\n        params = {\"project\": projectId}\r\n        service.storeQueryParams(projectId, params)\r\n        return $repo.queryMany(type, params)\r\n\r\n    service.createDefaultValues = (projectId, type) ->\r\n        data = {\"project_id\": projectId}\r\n        url = $urls.resolve(\"#{type}-create-default\")\r\n        return $http.post(url, data)\r\n\r\n    service.storeQueryParams = (projectId, params) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        $storage.set(hash, params)\r\n\r\n    service.getQueryParams = (projectId) ->\r\n        ns = \"#{projectId}:#{hashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        return $storage.get(hash) or {}\r\n\r\n    service.storeShowTags = (projectId, showTags) ->\r\n        hash = generateHash([projectId, 'showTags'])\r\n        $storage.set(hash, showTags)\r\n\r\n    service.getShowTags = (projectId) ->\r\n        hash = generateHash([projectId, 'showTags'])\r\n        return $storage.get(hash) or null\r\n\r\n    return (instance) ->\r\n        instance.userstories = service\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgUserstoriesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", \"$q\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/webhooklogs.coffee\r\n###\r\n\r\nresourceProvider = ($repo, $urls, $http) ->\r\n    service = {}\r\n\r\n    service.list = (webhookId) ->\r\n        params = {webhook: webhookId}\r\n        return $repo.queryMany(\"webhooklogs\", params)\r\n\r\n    service.resend = (webhooklogId) ->\r\n        url = $urls.resolve(\"webhooklogs-resend\", webhooklogId)\r\n        return $http.post(url)\r\n\r\n    return (instance) ->\r\n        instance.webhooklogs = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgWebhookLogsResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/webhooks.coffee\r\n###\r\n\r\nresourceProvider = ($repo, $urls, $http) ->\r\n    service = {}\r\n\r\n    service.list = (projectId) ->\r\n        params = {project: projectId}\r\n        return $repo.queryMany(\"webhooks\", params)\r\n\r\n    service.test = (webhookId) ->\r\n        url = $urls.resolve(\"webhooks-test\", webhookId)\r\n        return $http.post(url)\r\n\r\n    return (instance) ->\r\n        instance.webhooks = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgWebhooksResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/resources/wiki.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nresourceProvider = ($repo, $http, $urls) ->\r\n    service = {}\r\n\r\n    service.get = (wikiId) ->\r\n        return $repo.queryOne(\"wiki\", wikiId)\r\n\r\n    service.getBySlug = (projectId, slug) ->\r\n        return $repo.queryOne(\"wiki\", \"by_slug?project=#{projectId}&slug=#{slug}\")\r\n\r\n    service.list = (projectId) ->\r\n        return $repo.queryMany(\"wiki\", {project: projectId})\r\n\r\n    service.listLinks = (projectId) ->\r\n        return $repo.queryMany(\"wiki-links\", {project: projectId})\r\n\r\n    return (instance) ->\r\n        instance.wiki = service\r\n\r\n\r\nmodule = angular.module(\"taigaResources\")\r\nmodule.factory(\"$tgWikiResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/change-password.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## User ChangePassword Controller\r\n#############################################################################\r\n\r\nclass UserChangePasswordController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAuth\",\r\n        \"$translate\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\r\n                  @auth, @translate) ->\r\n        @scope.sectionName = @translate.instant(\"CHANGE_PASSWORD.SECTION_NAME\")\r\n        @scope.user = @auth.getUser()\r\n\r\nmodule.controller(\"UserChangePasswordController\", UserChangePasswordController)\r\n\r\n\r\n#############################################################################\r\n## User ChangePassword Directive\r\n#############################################################################\r\n\r\nUserChangePasswordDirective = ($rs, $confirm, $loading, $translate) ->\r\n    link = ($scope, $el, $attrs, ctrl) ->\r\n        form = new checksley.Form($el.find(\"form\"))\r\n\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            if not form.validate()\r\n                return\r\n\r\n            if $scope.newPassword1 != $scope.newPassword2\r\n                $confirm.notify('error', $translate.instant(\"CHANGE_PASSWORD.ERROR_PASSWORD_MATCH\"))\r\n                return\r\n\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $rs.userSettings.changePassword($scope.currentPassword, $scope.newPassword1)\r\n            promise.then =>\r\n                currentLoading.finish()\r\n                $confirm.notify('success')\r\n\r\n            promise.then null, (response) =>\r\n                currentLoading.finish()\r\n                $confirm.notify('error', response.data._error_message)\r\n\r\n        submitButton = $el.find(\".submit-button\")\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link:link\r\n    }\r\n\r\nmodule.directive(\"tgUserChangePassword\", [\"$tgResources\", \"$tgConfirm\", \"$tgLoading\", \"$translate\", UserChangePasswordDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/lightboxes.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\ndebounce = @.taiga.debounce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## Delete User Lightbox Directive\r\n#############################################################################\r\n\r\nDeleteUserDirective = ($repo, $rootscope, $auth, $location, $navUrls, lightboxService, $loading) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"deletelightbox:new\", (ctx, user)->\r\n            lightboxService.open($el)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        submit = ->\r\n            currentLoading = $loading()\r\n                .target(submitButton)\r\n                .start()\r\n\r\n            promise = $repo.remove($scope.user)\r\n\r\n            promise.then (data) ->\r\n                currentLoading.finish()\r\n                lightboxService.close($el)\r\n                $auth.logout()\r\n                $location.path($navUrls.resolve(\"login\"))\r\n\r\n            # FIXME: error handling?\r\n            promise.then null, ->\r\n                currentLoading.finish()\r\n                console.log \"FAIL\"\r\n\r\n        $el.on \"click\", \".button-green\", (event) ->\r\n            event.preventDefault()\r\n            lightboxService.close($el)\r\n\r\n        $el.on \"click\", \".button-red\", debounce 2000, (event) ->\r\n            event.preventDefault()\r\n            submit()\r\n\r\n        submitButton = $el.find(\".button-red\")\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl: \"user/lightbox/lightbox-delete-account.html\"\r\n    }\r\n\r\nmodule.directive(\"tgLbDeleteUser\", [\"$tgRepo\", \"$rootScope\", \"$tgAuth\", \"$tgLocation\", \"$tgNavUrls\",\r\n                                    \"lightboxService\", \"$tgLoading\", DeleteUserDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/live-notifications.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmixOf = @.taiga.mixOf\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## User settings Controller\r\n#############################################################################\r\n\r\nclass UserLiveNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAuth\",\r\n        \"tgErrorHandlingService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @auth, @errorHandlingService) ->\r\n        @scope.sectionName = \"USER_SETTINGS.EVENTS.LIVE_SECTION_NAME\"\r\n        @scope.user = @auth.getUser()\r\n        promise = @.loadInitialData()\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadInitialData: ->\r\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\r\n            @scope.notifyPolicies = notifyPolicies\r\n            return notifyPolicies\r\n\r\nmodule.controller(\"UserLiveNotificationsController\", UserLiveNotificationsController)\r\n\r\n\r\n#############################################################################\r\n## User Notifications Directive\r\n#############################################################################\r\n\r\nUserLiveNotificationsDirective = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserLiveNotifications\", UserLiveNotificationsDirective)\r\n\r\n\r\n#############################################################################\r\n## User Notifications List Directive\r\n#############################################################################\r\n\r\nUserLiveNotificationsListDirective = ($repo, $confirm, $compile) ->\r\n    template = _.template(\"\"\"\r\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\r\n        <div class=\"policy-table-row\" data-index=\"<%- index %>\">\r\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\r\n          <div class=\"policy-table-all\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-all-<%- notifyPolicy.id %>\"\r\n                     value=\"2\" <% if (notifyPolicy.live_notify_level == 2) { %>checked=\"checked\"<% } %>/>\r\n              <label for=\"policy-all-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_ALL\"></label>\r\n            </fieldset>\r\n          </div>\r\n          <div class=\"policy-table-involved\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-involved-<%- notifyPolicy.id %>\"\r\n                     value=\"1\" <% if (notifyPolicy.live_notify_level == 1) { %>checked=\"checked\"<% } %> />\r\n              <label for=\"policy-involved-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_INVOLVED\"></label>\r\n            </fieldset>\r\n          </div>\r\n          <div class=\"policy-table-none\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-none-<%- notifyPolicy.id %>\"\r\n                     value=\"3\" <% if (notifyPolicy.live_notify_level == 3) { %>checked=\"checked\"<% } %> />\r\n              <label for=\"policy-none-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_NONE\"></label>\r\n            </fieldset>\r\n          </div>\r\n        </div>\r\n        <% }) %>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = ->\r\n            $el.off()\r\n\r\n            ctx = {notifyPolicies: $scope.notifyPolicies}\r\n            html = template(ctx)\r\n\r\n            $el.html($compile(html)($scope))\r\n\r\n            $el.on \"change\", \"input[type=radio]\", (event) ->\r\n                target = angular.element(event.currentTarget)\r\n\r\n                policyIndex = target.parents(\".policy-table-row\").data('index')\r\n                policy = $scope.notifyPolicies[policyIndex]\r\n                prev_level = policy.live_notify_level\r\n                policy.live_notify_level = parseInt(target.val(), 10)\r\n\r\n                onSuccess = ->\r\n                    $confirm.notify(\"success\")\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                    target.parents(\".policy-table-row\")\r\n                          .find(\"input[value=#{prev_level}]\")\r\n                          .prop(\"checked\", true)\r\n\r\n                $repo.save(policy).then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        bindOnce($scope, $attrs.ngModel, render)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserLiveNotificationsList\", [\"$tgRepo\", \"$tgConfirm\", \"$compile\",\r\n                                             UserLiveNotificationsListDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/main.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmixOf = @.taiga.mixOf\r\nsizeFormat = @.taiga.sizeFormat\r\nmodule = angular.module(\"taigaUserSettings\")\r\ndebounce = @.taiga.debounce\r\n\r\n#############################################################################\r\n## User settings Controller\r\n#############################################################################\r\n\r\nclass UserSettingsController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgConfig\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAuth\",\r\n        \"$translate\",\r\n        \"tgErrorHandlingService\"\r\n        \"$window\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @config, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\r\n                  @auth, @translate, @errorHandlingService, @window) ->\r\n        @scope.sectionName = \"USER_SETTINGS.MENU.SECTION_TITLE\"\r\n\r\n        @scope.project = {}\r\n        @scope.user = @auth.getUser()\r\n\r\n        if !@scope.user\r\n            @errorHandlingService.permissionDenied()\r\n\r\n        @scope.lang = @getLan()\r\n        @scope.theme = @getTheme()\r\n\r\n        maxFileSize = @config.get(\"maxUploadFileSize\", null)\r\n        if maxFileSize\r\n            text = @translate.instant(\"USER_SETTINGS.AVATAR_MAX_SIZE\", {\"maxFileSize\": sizeFormat(maxFileSize)})\r\n            @scope.maxFileSizeMsg = text\r\n\r\n        promise = @.loadInitialData()\r\n\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadInitialData: ->\r\n        @scope.availableThemes = @config.get(\"themes\", [])\r\n\r\n        return @rs.locales.list().then (locales) =>\r\n            @scope.locales = locales\r\n            return locales\r\n\r\n    openDeleteLightbox: ->\r\n        @rootscope.$broadcast(\"deletelightbox:new\", @scope.user)\r\n\r\n    getLan: ->\r\n        return @scope.user.lang ||\r\n               @translate.preferredLanguage()\r\n\r\n    getTheme: ->\r\n        return @scope.user.theme ||\r\n               @config.get(\"defaultTheme\") ||\r\n               \"taiga\"\r\n\r\n    exportProfile: ->\r\n        onSuccess = (result) ->\r\n            dumpUrl = result.data.url\r\n            @window.open(dumpUrl, \"_blank\")\r\n\r\n        onError = (response) =>\r\n            if response.data?._error_message\r\n                @confirm.notify(\"error\", response.data._error_message)\r\n\r\n        @auth.exportProfile().then(onSuccess, onError)\r\n\r\n\r\nmodule.controller(\"UserSettingsController\", UserSettingsController)\r\n\r\n\r\n#############################################################################\r\n## User Profile Directive\r\n#############################################################################\r\n\r\nUserProfileDirective = ($confirm, $auth, $repo, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        submit = debounce 2000, (event) =>\r\n            event.preventDefault()\r\n\r\n            form = $el.find(\"form\").checksley()\r\n            return if not form.validate()\r\n\r\n            changeEmail = $scope.user.isAttributeModified(\"email\")\r\n            $scope.user.lang = $scope.lang\r\n            $scope.user.theme = $scope.theme\r\n\r\n            onSuccess = (data) =>\r\n                $auth.setUser(data)\r\n\r\n                if changeEmail\r\n                    text = $translate.instant(\"USER_PROFILE.CHANGE_EMAIL_SUCCESS\")\r\n                    $confirm.success(text)\r\n                else\r\n                    $confirm.notify('success')\r\n\r\n            onError = (data) =>\r\n                form.setErrors(data)\r\n                $confirm.notify('error', data._error_message)\r\n\r\n            $repo.save($scope.user).then(onSuccess, onError)\r\n\r\n        $el.on \"submit\", \"form\", submit\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserProfile\", [\"$tgConfirm\", \"$tgAuth\", \"$tgRepo\", \"$translate\", UserProfileDirective])\r\n\r\n\r\n#############################################################################\r\n## User Avatar Directive\r\n#############################################################################\r\n\r\nUserAvatarDirective = ($auth, $model, $rs, $confirm) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        showSizeInfo = ->\r\n            $el.find(\".size-info\").removeClass(\"hidden\")\r\n\r\n        onSuccess = (response) ->\r\n            user = $model.make_model(\"users\", response.data)\r\n            $auth.setUser(user)\r\n            $scope.user = user\r\n\r\n            $el.find('.loading-overlay').removeClass('active')\r\n            $confirm.notify('success')\r\n\r\n        onError = (response) ->\r\n            showSizeInfo() if response.status == 413\r\n            $el.find('.loading-overlay').removeClass('active')\r\n            $confirm.notify('error', response.data._error_message)\r\n\r\n        # Change photo\r\n        $el.on \"click\", \".js-change-avatar\", ->\r\n            $el.find(\"#avatar-field\").click()\r\n\r\n        $el.on \"change\", \"#avatar-field\", (event) ->\r\n            if $scope.avatarAttachment\r\n                $el.find('.loading-overlay').addClass(\"active\")\r\n                $rs.userSettings.changeAvatar($scope.avatarAttachment).then(onSuccess, onError)\r\n\r\n        # Use gravatar photo\r\n        $el.on \"click\", \"a.js-use-gravatar\", (event) ->\r\n            $el.find('.loading-overlay').addClass(\"active\")\r\n            $rs.userSettings.removeAvatar().then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserAvatar\", [\"$tgAuth\", \"$tgModel\", \"$tgResources\", \"$tgConfirm\", UserAvatarDirective])\r\n\r\n\r\n#############################################################################\r\n## User Avatar Model Directive\r\n#############################################################################\r\n\r\nTaigaAvatarModelDirective = ($parse) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        model = $parse($attrs.tgAvatarModel)\r\n        modelSetter = model.assign\r\n\r\n        $el.bind 'change', ->\r\n            $scope.$apply ->\r\n                modelSetter($scope, $el[0].files[0])\r\n\r\n    return {link:link}\r\n\r\nmodule.directive('tgAvatarModel', ['$parse', TaigaAvatarModelDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/nav.coffee\r\n###\r\n\r\nUserSettingsNavigationDirective = ->\r\n    link = ($scope, $el, $attrs) ->\r\n        section = $attrs.tgUserSettingsNavigation\r\n        $el.find(\".active\").removeClass(\"active\")\r\n        $el.find(\"#usersettingsmenu-#{section} a\").addClass(\"active\")\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\nmodule.directive(\"tgUserSettingsNavigation\", UserSettingsNavigationDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/notifications.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmixOf = @.taiga.mixOf\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## User settings Controller\r\n#############################################################################\r\n\r\nclass UserNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$rootScope\",\r\n        \"$tgRepo\",\r\n        \"$tgConfirm\",\r\n        \"$tgResources\",\r\n        \"$routeParams\",\r\n        \"$q\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAuth\",\r\n        \"tgErrorHandlingService\"\r\n    ]\r\n\r\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @auth, @errorHandlingService) ->\r\n        @scope.sectionName = \"USER_SETTINGS.NOTIFICATIONS.SECTION_NAME\"\r\n        @scope.user = @auth.getUser()\r\n        promise = @.loadInitialData()\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadInitialData: ->\r\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\r\n            @scope.notifyPolicies = notifyPolicies\r\n            return notifyPolicies\r\n\r\nmodule.controller(\"UserNotificationsController\", UserNotificationsController)\r\n\r\n\r\n#############################################################################\r\n## User Notifications Directive\r\n#############################################################################\r\n\r\nUserNotificationsDirective = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserNotifications\", UserNotificationsDirective)\r\n\r\n\r\n#############################################################################\r\n## User Notifications List Directive\r\n#############################################################################\r\n\r\nUserNotificationsListDirective = ($repo, $confirm, $compile) ->\r\n    template = _.template(\"\"\"\r\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\r\n        <div class=\"policy-table-row\" data-index=\"<%- index %>\">\r\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\r\n          <div class=\"policy-table-all\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-all-<%- notifyPolicy.id %>\"\r\n                     value=\"2\" <% if (notifyPolicy.notify_level == 2) { %>checked=\"checked\"<% } %>/>\r\n              <label for=\"policy-all-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_ALL\"></label>\r\n            </fieldset>\r\n          </div>\r\n          <div class=\"policy-table-involved\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-involved-<%- notifyPolicy.id %>\"\r\n                     value=\"1\" <% if (notifyPolicy.notify_level == 1) { %>checked=\"checked\"<% } %> />\r\n              <label for=\"policy-involved-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_INVOLVED\"></label>\r\n            </fieldset>\r\n          </div>\r\n          <div class=\"policy-table-none\">\r\n            <fieldset>\r\n              <input type=\"radio\"\r\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-none-<%- notifyPolicy.id %>\"\r\n                     value=\"3\" <% if (notifyPolicy.notify_level == 3) { %>checked=\"checked\"<% } %> />\r\n              <label for=\"policy-none-<%- notifyPolicy.id %>\"\r\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_NONE\"></label>\r\n            </fieldset>\r\n          </div>\r\n        </div>\r\n        <% }) %>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = ->\r\n            $el.off()\r\n\r\n            ctx = {notifyPolicies: $scope.notifyPolicies}\r\n            html = template(ctx)\r\n\r\n            $el.html($compile(html)($scope))\r\n\r\n            $el.on \"change\", \"input[type=radio]\", (event) ->\r\n                target = angular.element(event.currentTarget)\r\n\r\n                policyIndex = target.parents(\".policy-table-row\").data('index')\r\n                policy = $scope.notifyPolicies[policyIndex]\r\n                prev_level = policy.notify_level\r\n                policy.notify_level = parseInt(target.val(), 10)\r\n\r\n                onSuccess = ->\r\n                    $confirm.notify(\"success\")\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n                    target.parents(\".policy-table-row\")\r\n                          .find(\"input[value=#{prev_level}]\")\r\n                          .prop(\"checked\", true)\r\n\r\n                $repo.save(policy).then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        bindOnce($scope, $attrs.ngModel, render)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserNotificationsList\", [\"$tgRepo\", \"$tgConfirm\", \"$compile\",\r\n                                             UserNotificationsListDirective])\r\n","###\r\n# Copyright (C) 2014-2017 Andrey Antukh <niwi@niwi.nz>\r\n# Copyright (C) 2014-2017 Jesús Espino Garcia <jespinog@gmail.com>\r\n# Copyright (C) 2014-2017 David Barragán Merino <bameda@dbarragan.com>\r\n# Copyright (C) 2014-2017 Alejandro Alonso <alejandro.alonso@kaleidos.net>\r\n# Copyright (C) 2014-2017 Juan Francisco Alcántara <juanfran.alcantara@kaleidos.net>\r\n# Copyright (C) 2014-2017 Xavi Julian <xavier.julian@kaleidos.net>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/user-project-settings.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmixOf = @.taiga.mixOf\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## Custom Homepage Controller\r\n#############################################################################\r\n\r\nclass UserProjectSettingsController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$rootScope\"\r\n        \"$scope\"\r\n        \"$tgSections\"\r\n        \"$tgResources\"\r\n        \"$tgRepo\"\r\n        \"$tgConfirm\"\r\n         \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@rootScope, @scope, @tgSections, @rs, @repo, @confirm, @currentUserService) ->\r\n        @scope.sections = @tgSections.list()\r\n\r\n        promise = @.loadInitialData()\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadInitialData: ->\r\n        return @rs.userProjectSettings.list().then (userProjectSettings) =>\r\n            @scope.userProjectSettings = userProjectSettings\r\n\r\n    updateCustomHomePage: (projectSettings) ->\r\n        onSuccess = =>\r\n            @currentUserService.loadProjects()\r\n            @rootScope.$broadcast(\"dropdown-project-list:updated\")\r\n            @confirm.notify(\"success\")\r\n\r\n        onError = =>\r\n            @confirm.notify(\"error\")\r\n\r\n        @repo.save(projectSettings).then(onSuccess, onError)\r\n\r\n    filteredSections: (projectSettings) ->\r\n        return _.filter @scope.sections, (section) ->\r\n            section.id in projectSettings.allowed_sections\r\n\r\n\r\nmodule.controller(\"UserProjectSettingsController\", UserProjectSettingsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: modules/user-settings/live-notifications.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nmixOf = @.taiga.mixOf\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module(\"taigaUserSettings\")\r\n\r\n\r\n#############################################################################\r\n## User Web Notifications Controller\r\n#############################################################################\r\n\r\nclass UserWebNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\r\n    @.$inject = [\r\n        \"$scope\",\r\n        \"$tgResources\",\r\n        \"$tgAuth\"\r\n    ]\r\n\r\n    constructor: (@scope, @rs, @auth) ->\r\n        @scope.sectionName = \"USER_SETTINGS.EVENTS.SECTION_NAME\"\r\n        @scope.user = @auth.getUser()\r\n        promise = @.loadInitialData()\r\n        promise.then null, @.onInitialDataError.bind(@)\r\n\r\n    loadInitialData: ->\r\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\r\n            @scope.notifyPolicies = notifyPolicies\r\n            return notifyPolicies\r\n\r\nmodule.controller(\"UserWebNotificationsController\", UserWebNotificationsController)\r\n\r\n\r\n#############################################################################\r\n## User Web Notifications Directive\r\n#############################################################################\r\n\r\nUserWebNotificationsDirective = () ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserWebNotifications\", UserWebNotificationsDirective)\r\n\r\n\r\n#############################################################################\r\n## User Web Notifications List Directive\r\n#############################################################################\r\n\r\nUserWebNotificationsListDirective = ($repo, $confirm, $compile) ->\r\n    template = _.template(\"\"\"\r\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\r\n        <div class=\"policy-table-row\">\r\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\r\n          <div class=\"policy-table-all\">\r\n            <div class=\"check\" data-index=\"<%- index %>\">\r\n              <input type=\"checkbox\"\r\n                <% if(notifyPolicy.web_notify_level) { %> checked=\"checked\" <% } %>\r\n                name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-<%- notifyPolicy.id %>\"/>\r\n              <div></div>\r\n              <span class=\"check-text check-yes\" translate=\"COMMON.YES\"></span>\r\n              <span class=\"check-text check-no\"\" translate=\"COMMON.NO\"></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <% }) %>\r\n    \"\"\")\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        render = ->\r\n            $el.off()\r\n\r\n            ctx = {notifyPolicies: $scope.notifyPolicies}\r\n            html = template(ctx)\r\n\r\n            $el.html($compile(html)($scope))\r\n\r\n            $el.on \"click\", \".check\", (event) ->\r\n                target = angular.element(event.currentTarget)\r\n                policyIndex = target.data('index')\r\n                policy = $scope.notifyPolicies[policyIndex]\r\n                policy.web_notify_level = !policy.web_notify_level\r\n\r\n                onSuccess = ->\r\n                    $confirm.notify(\"success\")\r\n                    target.find(\"input\").prop(\"checked\", policy.web_notify_level)\r\n\r\n                onError = ->\r\n                    $confirm.notify(\"error\")\r\n\r\n                $repo.save(policy).then(onSuccess, onError)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n        bindOnce($scope, $attrs.ngModel, render)\r\n\r\n    return {link:link}\r\n\r\nmodule.directive(\"tgUserWebNotificationsList\",\r\n[\"$tgRepo\", \"$tgConfirm\", \"$compile\", UserWebNotificationsListDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/components.module.coffee\r\n###\r\n\r\nangular.module(\"taigaComponents\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/discover.module.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaDiscover\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: external-apps/external-apps.module.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaExternalApps\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history.module.coffee\r\n###\r\n\r\nangular.module(\"taigaHistory\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/home.module.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHome\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/navigation-bar.module.coffee\r\n###\r\n\r\nangular.module(\"taigaNavigationBar\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/projects.module.coffee\r\n###\r\n\r\nangular.module(\"taigaNotifications\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile.module.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaProfile\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/projects.module.coffee\r\n###\r\n\r\nangular.module(\"taigaProjects\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/resources.module.coffee\r\n###\r\n\r\nangular.module(\"taigaResources2\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline.module.coffee\r\n###\r\n\r\nangular.module(\"taigaUserTimeline\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: utils/utils.module.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaUtils\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: wiki/history/wiki-history.module.coffee\r\n###\r\n\r\nangular.module(\"taigaWikiHistory\", [])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned-to/assigned-item/assigned-item.directive.coffee\r\n###\r\n\r\nAssignedItemDirective = () ->\r\n\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        templateUrl: \"components/assigned-to/assigned-item/assigned-item.html\",\r\n        scope: {\r\n            member: \"=\"\r\n        },\r\n        link: link\r\n    }\r\n\r\nAssignedItemDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAssignedItem\", AssignedItemDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned-to/assigned-to-selector/assigned-to-selector.controller.coffee\r\n###\r\n\r\nclass AssignedToSelectorController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        if @.assigned\r\n            @._getAssignedMember()\r\n        @._filterAssignedMember()\r\n\r\n    _getAssignedMember: () ->\r\n        @.assignedMember = _.filter(@.project.members, (member) =>\r\n            return member.id == @.assigned.get('id')\r\n        )\r\n\r\n    _filterAssignedMember: () ->\r\n        if @.assigned\r\n            @.nonAssignedMembers = _.filter(@.project.members, (member) =>\r\n                return member.id != @.assigned.get('id')\r\n            )\r\n        else\r\n            @.nonAssignedMembers = @.project.members\r\n\r\nangular.module('taigaComponents').controller('AssignedToSelectorCtrl', AssignedToSelectorController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned-to/assigned-to-selector/assigned-to-selector.directive.coffee\r\n###\r\n\r\nAssignedToSelectorDirective = () ->\r\n\r\n    return {\r\n        controller: \"AssignedToSelectorCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"components/assigned-to/assigned-to-selector/assigned-to-selector.html\",\r\n        scope: {\r\n            assigned: \"=\",\r\n            project: \"=\",\r\n            onRemoveAssigned: \"&\",\r\n            onAssignTo: \"&\"\r\n        }\r\n    }\r\n\r\nAssignedToSelectorDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAssignedToSelector\", AssignedToSelectorDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned-to/assigned-to.controller.coffee\r\n###\r\n\r\nclass AssignedToController\r\n    @.$inject = [\r\n        \"tgLightboxFactory\",\r\n        \"lightboxService\",\r\n    ]\r\n\r\n    constructor: (@lightboxFactory, @lightboxService) ->\r\n        @.has_permissions = _.includes(@.project.my_permissions, 'modify_epic')\r\n\r\n    _closeAndRemoveAssigned: () ->\r\n        @lightboxService.closeAll()\r\n        @.onRemoveAssigned()\r\n\r\n    _closeAndAssign: (member) ->\r\n        @lightboxService.closeAll()\r\n        @.onAssignTo({'member': member})\r\n\r\n    onSelectAssignedTo: (assigned, project) ->\r\n        @lightboxFactory.create('tg-assigned-to-selector', {\r\n            \"class\": \"lightbox lightbox-assigned-to-selector open\",\r\n            \"assigned\": \"assigned\",\r\n            \"project\": \"project\",\r\n            \"on-remove-assigned\": \"onRemoveAssigned()\"\r\n            \"on-assign-to\": \"assignTo(member)\"\r\n        }, {\r\n            \"assigned\": @.assignedTo,\r\n            \"project\": @.project,\r\n            \"onRemoveAssigned\": @._closeAndRemoveAssigned.bind(this),\r\n            \"assignTo\": @._closeAndAssign.bind(this)\r\n        })\r\n\r\nangular.module('taigaComponents').controller('AssignedToCtrl', AssignedToController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned-to/assigned-to.directive.coffee\r\n###\r\n\r\nAssignedToDirective = () ->\r\n\r\n    return {\r\n        controller: \"AssignedToCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"components/assigned-to/assigned-to.html\",\r\n        scope: {\r\n            assignedTo: \"=\",\r\n            project: \"=\",\r\n            onRemoveAssigned: \"&\",\r\n            onAssignTo: \"&\"\r\n        }\r\n    }\r\n\r\nAssignedToDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAssignedToComponent\", AssignedToDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned/assigned-to-inline.directive.coffee\r\n###\r\n\r\nAssignedToInlineDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template\r\n$translate, $compile, $currentUserService, avatarService, $userListService) ->\r\n    link = ($scope, $el, $attr, $model) ->\r\n        isEditable = ->\r\n            return $scope.project?.my_permissions?.indexOf($attr.requiredPerm) != -1\r\n\r\n        renderUserList = (text) ->\r\n            selectedId = $model.$modelValue.assigned_to\r\n            users = $userListService.searchUsers(text)\r\n            users = _.reject(users, {\"id\": selectedId}) if selectedId\r\n\r\n            visibleUsers = _.slice(users, 0, 5)\r\n            visibleUsers = _.map visibleUsers, (user) -> user.avatar = avatarService.getAvatar(user)\r\n\r\n            $scope.users = _.slice(users, 0, 5)\r\n            $scope.showMore = users.length > 5\r\n\r\n        renderUser = (assignedObject) ->\r\n            if assignedObject?.assigned_to\r\n                $scope.selected = assignedObject.assigned_to\r\n                assigned_to_extra_info = $scope.usersById[$scope.selected]\r\n                $scope.fullName = assigned_to_extra_info?.full_name_display\r\n                $scope.isUnassigned = false\r\n                $scope.avatar = avatarService.getAvatar(assigned_to_extra_info)\r\n                $scope.bg = $scope.avatar.bg\r\n                $scope.isIocaine = assignedObject?.is_iocaine\r\n            else\r\n                $scope.fullName = $translate.instant(\"COMMON.ASSIGNED_TO.ASSIGN\")\r\n                $scope.isUnassigned = true\r\n                $scope.avatar = avatarService.getAvatar(null)\r\n                $scope.bg = null\r\n                $scope.isIocaine = false\r\n\r\n            $scope.fullNameVisible = !($scope.isUnassigned && !$currentUserService.isAuthenticated())\r\n            $scope.isEditable = isEditable()\r\n\r\n        $el.on \"click\", \".users-search\", (event) ->\r\n            event.stopPropagation()\r\n\r\n        $el.on \"click\", \".users-dropdown\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $scope.usersSearch = \"\"\r\n            renderUserList()\r\n            $scope.$apply()\r\n            $el.find(\".pop-users\").popover().open()\r\n\r\n        $scope.selfAssign = () ->\r\n            $model.$modelValue.assigned_to = $currentUserService.getUser().get('id')\r\n            renderUser($model.$modelValue)\r\n\r\n        $scope.unassign = () ->\r\n            $model.$modelValue.assigned_to  = null\r\n            renderUser()\r\n\r\n        $scope.$watch \"usersSearch\", (searchingText) ->\r\n            if searchingText?\r\n                renderUserList(searchingText)\r\n                $el.find('input').focus()\r\n\r\n        $el.on \"click\", \".user-list-single\", (event) ->\r\n            event.preventDefault()\r\n            target = angular.element(event.currentTarget)\r\n            $model.$modelValue.assigned_to = target.data(\"user-id\")\r\n            renderUser($model.$modelValue)\r\n            $scope.$apply()\r\n\r\n        $scope.$watch $attr.ngModel, (instance) ->\r\n            renderUser(instance)\r\n\r\n        $scope.$on \"isiocaine:changed\", (ctx, instance) ->\r\n            renderUser(instance)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link:link,\r\n        templateUrl: \"common/components/assigned-to-inline.html\"\r\n        require:\"ngModel\"\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgAssignedToInline\", [\"$rootScope\", \"$tgConfirm\",\r\n\"$tgRepo\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\r\n\"tgCurrentUserService\", \"tgAvatarService\", \"tgUserListService\", AssignedToInlineDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned/assigned-to.directive.coffee\r\n###\r\n\r\nAssignedToDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template,\r\n$translate, $compile, $currentUserService, avatarService) ->\r\n    # You have to include a div with the tg-lb-assignedto directive in the page\r\n    # where use this directive\r\n    template = $template.get(\"common/components/assigned-to.html\", true)\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\r\n\r\n        save = (userId) ->\r\n            item = $model.$modelValue.clone()\r\n            item.assigned_to = userId\r\n\r\n            currentLoading = $loading()\r\n                .target($el)\r\n                .start()\r\n\r\n            transform = $modelTransform.save (item) ->\r\n                item.assigned_to = userId\r\n                return item\r\n\r\n            transform.then (item) ->\r\n                currentLoading.finish()\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n                currentLoading.finish()\r\n\r\n            return transform\r\n\r\n        render = () ->\r\n            template = $template.get(\"common/components/assigned-to.html\")\r\n            templateScope = $scope.$new()\r\n            compiledTemplate = $compile(template)(templateScope)\r\n            $el.html(compiledTemplate)\r\n\r\n        $scope.assign = () ->\r\n            $rootscope.$broadcast(\"assigned-to:add\", $model.$modelValue)\r\n\r\n        $scope.unassign = () ->\r\n            title = $translate.instant(\"COMMON.ASSIGNED_TO.CONFIRM_UNASSIGNED\")\r\n            $confirm.ask(title).then (response) ->\r\n                response.finish()\r\n                save(null)\r\n\r\n        $scope.selfAssign = () ->\r\n            userId = $currentUserService.getUser().get('id')\r\n            save(userId)\r\n\r\n        $scope.$on \"assigned-to:added\", (ctx, userId, item) ->\r\n            return if item.id != $model.$modelValue.id\r\n            save(userId)\r\n\r\n        $scope.$watch $attrs.ngModel, (instance) ->\r\n            if instance?.assigned_to\r\n                $scope.selected = instance.assigned_to\r\n                assigned_to_extra_info = $scope.usersById[$scope.selected]\r\n                $scope.fullName = assigned_to_extra_info?.full_name_display\r\n                $scope.isUnassigned = false\r\n                $scope.avatar = avatarService.getAvatar(assigned_to_extra_info)\r\n                $scope.bg = $scope.avatar.bg\r\n                $scope.isIocaine = instance?.is_iocaine\r\n            else\r\n                $scope.fullName = $translate.instant(\"COMMON.ASSIGNED_TO.ASSIGN\")\r\n                $scope.isUnassigned = true\r\n                $scope.avatar = avatarService.getAvatar(null)\r\n                $scope.bg = null\r\n                $scope.isIocaine = false\r\n\r\n            $scope.fullNameVisible = !($scope.isUnassigned && !$currentUserService.isAuthenticated())\r\n            $scope.isEditable = isEditable()\r\n            render()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        link:link,\r\n        require:\"ngModel\"\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgAssignedTo\", [\"$rootScope\", \"$tgConfirm\", \"$tgRepo\",\r\n\"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\r\n\"tgCurrentUserService\", \"tgAvatarService\", AssignedToDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned/assigned-users-inline.directive.coffee\r\n###\r\n\r\nAssignedUsersInlineDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template\r\n$translate, $compile, $currentUserService, avatarService, $userListService) ->\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        currentAssignedIds = []\r\n        currentAssignedTo = null\r\n\r\n        isAssigned = ->\r\n            return currentAssignedIds.length > 0\r\n\r\n        renderUsersList = (text) ->\r\n            users = $userListService.searchUsers(text)\r\n\r\n            # Add selected users\r\n            selected = []\r\n            _.map users, (user) ->\r\n                if user.id in currentAssignedIds\r\n                    user.avatar = avatarService.getAvatar(user)\r\n                    selected.push(user)\r\n\r\n            # Filter users in searchs\r\n            visible = []\r\n            _.map users, (user) ->\r\n                if user.id not in currentAssignedIds\r\n                    user.avatar = avatarService.getAvatar(user)\r\n                    visible.push(user)\r\n\r\n            $scope.selected = _.slice(selected, 0, 5)\r\n            if $scope.selected.length < 5\r\n                $scope.users = _.slice(visible, 0, 5 - $scope.selected.length)\r\n            else\r\n                $scope.users = []\r\n            $scope.showMore = users.length > 5\r\n\r\n        renderUsers = () ->\r\n            assignedUsers = _.map(currentAssignedIds, (assignedUserId) -> $scope.usersById[assignedUserId])\r\n            assignedUsers = _.filter assignedUsers, (it) -> return !!it\r\n\r\n            $scope.hiddenUsers = if currentAssignedIds.length > 3 then currentAssignedIds.length - 3 else 0\r\n            $scope.assignedUsers = _.slice(assignedUsers, 0, 3)\r\n\r\n            $scope.isAssigned = isAssigned()\r\n\r\n        applyToModel = () ->\r\n            _.map currentAssignedIds, (userId) ->\r\n                if !$scope.usersById[userId]\r\n                    currentAssignedIds.splice(currentAssignedIds.indexOf(userId), 1)\r\n            if currentAssignedIds.length == 0\r\n                currentAssignedTo = null\r\n            else if currentAssignedIds.indexOf(currentAssignedTo) == -1 || !currentAssignedTo\r\n                currentAssignedTo = currentAssignedIds[0]\r\n            $model.$modelValue.setAttr('assigned_users', currentAssignedIds)\r\n            $model.$modelValue.assigned_to = currentAssignedTo\r\n\r\n        $el.on \"click\", \".users-dropdown\", (event) ->\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n            $scope.usersSearch = null\r\n            renderUsersList()\r\n            $scope.$apply()\r\n            $el.find(\".pop-users\").popover().open()\r\n\r\n        $scope.assign = (user) ->\r\n            currentAssignedIds.push(user.id)\r\n            renderUsers()\r\n            applyToModel()\r\n\r\n        $scope.selfAssign = () ->\r\n            currentAssignedIds.push($currentUserService.getUser().get('id'))\r\n            renderUsers()\r\n            applyToModel()\r\n\r\n        $scope.unassign = (user) ->\r\n            index = currentAssignedIds.indexOf(user.id)\r\n            currentAssignedIds.splice(index, 1)\r\n            renderUsers()\r\n            applyToModel()\r\n\r\n        $el.on \"click\", \".users-search\", (event) ->\r\n            event.stopPropagation()\r\n\r\n        $scope.$watch \"usersSearch\", (searchingText) ->\r\n            if searchingText?\r\n                renderUsersList(searchingText)\r\n                $el.find('input').focus()\r\n\r\n        $scope.$watch $attrs.ngModel, (item) ->\r\n            return if not item?\r\n            currentAssignedIds = []\r\n            assigned_to = null\r\n\r\n            if item.assigned_users?\r\n                currentAssignedIds = item.assigned_users\r\n            assigned_to = item.assigned_to\r\n            renderUsers()\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        scope: true,\r\n        link:link,\r\n        templateUrl: \"common/components/assigned-users-inline.html\",\r\n        require:\"ngModel\"\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgAssignedUsersInline\", [\"$rootScope\", \"$tgConfirm\",\r\n\"$tgRepo\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\r\n\"tgCurrentUserService\", \"tgAvatarService\", \"tgUserListService\", AssignedUsersInlineDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/assigned/assigned-users.directive.coffee\r\n###\r\n\r\nAssignedUsersDirective = ($rootscope, $confirm, $repo, $modelTransform, $template, $compile,\r\n$translate, $currentUserService) ->\r\n    # You have to include a div with the tg-lb-assignedusers directive in the page\r\n    # where use this directive\r\n\r\n    link = ($scope, $el, $attrs, $model) ->\r\n        isEditable = ->\r\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\r\n        isAssigned = ->\r\n            return $scope.assignedUsers.length > 0\r\n\r\n        save = (assignedUsers, assignedToUser) ->\r\n            transform = $modelTransform.save (item) ->\r\n                item.assigned_users = assignedUsers\r\n                if not item.assigned_to\r\n                    item.assigned_to = assignedToUser\r\n                return item\r\n\r\n            transform.then ->\r\n                assignedUsers = _.map(assignedUsers, (assignedUserId) -> $scope.usersById[assignedUserId])\r\n                renderAssignedUsers(assignedUsers)\r\n                result = $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n        openAssignedUsers = ->\r\n            item = _.clone($model.$modelValue, false)\r\n            $rootscope.$broadcast(\"assigned-user:add\", item)\r\n\r\n        $scope.selfAssign = () ->\r\n            return if not isEditable()\r\n            currentUserId = $currentUserService.getUser().get('id')\r\n            assignedUsers = _.clone($model.$modelValue.assigned_users, false)\r\n            assignedUsers.push(currentUserId)\r\n            assignedUsers = _.uniq(assignedUsers)\r\n            save(assignedUsers, currentUserId)\r\n\r\n        $scope.unassign = (user) ->\r\n            return if not isEditable()\r\n            assignedUserId = user.id\r\n\r\n            title = $translate.instant(\"COMMON.ASSIGNED_USERS.TITLE_LIGHTBOX_DELETE_ASSIGNED\")\r\n            message = $scope.usersById[assignedUserId].full_name_display\r\n\r\n            $confirm.askOnDelete(title, message).then (askResponse) ->\r\n                askResponse.finish()\r\n\r\n                assignedUserIds = _.clone($model.$modelValue.assigned_users, false)\r\n                assignedUserIds = _.pull(assignedUserIds, assignedUserId)\r\n\r\n                deleteAssignedUser(assignedUserIds)\r\n\r\n        deleteAssignedUser = (assignedUserIds) ->\r\n            transform = $modelTransform.save (item) ->\r\n                item.assigned_users = assignedUserIds\r\n\r\n                # Update as\r\n                if item.assigned_to not in assignedUserIds and assignedUserIds.length > 0\r\n                    item.assigned_to = assignedUserIds[0]\r\n                if assignedUserIds.length == 0\r\n                    item.assigned_to = null\r\n\r\n                return item\r\n\r\n            transform.then () ->\r\n                item = $modelTransform.getObj()\r\n                assignedUsers = _.map(item.assignedUsers, (assignedUserId) -> $scope.usersById[assignedUserId])\r\n                renderAssignedUsers(assignedUsers)\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                item.revert()\r\n                $confirm.notify(\"error\")\r\n\r\n        renderAssignedUsers = (assignedUsers) ->\r\n            $scope.assignedUsers = assignedUsers\r\n            $scope.isEditable = isEditable()\r\n            $scope.isAssigned = isAssigned()\r\n            $scope.openAssignedUsers = openAssignedUsers\r\n\r\n        $scope.$on \"assigned-user:deleted\", (ctx, assignedUserId) ->\r\n            assignedUsersIds = _.clone($model.$modelValue.assigned_users, false)\r\n            assignedUsersIds = _.pull(assignedUsersIds, assignedUserId)\r\n            assignedUsersIds = _.uniq(assignedUsersIds)\r\n            deleteAssignedUser(assignedUsersIds)\r\n\r\n        $scope.$on \"assigned-user:added\", (ctx, assignedUserId) ->\r\n            assignedUsers = _.clone($model.$modelValue.assigned_users, false)\r\n            assignedUsers.push(assignedUserId)\r\n            assignedUsers = _.uniq(assignedUsers)\r\n\r\n            # Save assigned_users and assignedUserId for assign_to legacy attribute\r\n            save(assignedUsers, assignedUserId)\r\n\r\n        $scope.$watch $attrs.ngModel, (item) ->\r\n            return if not item?\r\n            assignedUsers = _.map(item.assigned_users, (assignedUserId) -> $scope.usersById[assignedUserId])\r\n            assignedUsers = _.filter assignedUsers, (it) -> return !!it\r\n\r\n            renderAssignedUsers(assignedUsers)\r\n\r\n        $scope.$on \"$destroy\", ->\r\n            $el.off()\r\n\r\n    return {\r\n        scope: true,\r\n        templateUrl: \"common/components/assigned-users.html\",\r\n        link:link\r\n        require:\"ngModel\"\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgAssignedUsers\", [\"$rootScope\", \"$tgConfirm\",\r\n\"$tgRepo\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", \"$translate\",\r\n\"tgCurrentUserService\", AssignedUsersDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachment-link/attachment-link.directive.coffee\r\n###\r\n\r\nAttachmentLinkDirective = ($parse, attachmentsPreviewService, lightboxService) ->\r\n    link = (scope, el, attrs) ->\r\n        attachment = $parse(attrs.tgAttachmentLink)(scope)\r\n\r\n        el.on \"click\", (event) ->\r\n            if taiga.isImage(attachment.getIn(['file', 'name']))\r\n                event.preventDefault()\r\n\r\n                scope.$apply ->\r\n                    lightboxService.open($('tg-attachments-preview'))\r\n                    attachmentsPreviewService.fileId = attachment.getIn(['file', 'id'])\r\n            else if taiga.isPdf(attachment.getIn(['file', 'name']))\r\n                event.preventDefault()\r\n                window.open(attachment.getIn(['file', 'url']))\r\n\r\n        scope.$on \"$destroy\", -> el.off()\r\n    return {\r\n        link: link\r\n    }\r\n\r\nAttachmentLinkDirective.$inject = [\r\n    \"$parse\",\r\n    \"tgAttachmentsPreviewService\",\r\n    \"lightboxService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentLink\", AttachmentLinkDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachment/attachment-gallery.directive.coffee\r\n###\r\n\r\nAttachmentGalleryDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            attachment: \"=\",\r\n            onDelete: \"&\",\r\n            onUpdate: \"&\",\r\n            type: \"=\"\r\n        },\r\n        controller: \"Attachment\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/attachment/attachment-gallery.html\",\r\n        link: link\r\n    }\r\n\r\nAttachmentGalleryDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentGallery\", AttachmentGalleryDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachment/attachment.controller.coffee\r\n###\r\n\r\nclass AttachmentController\r\n    @.$inject = [\r\n        'tgAttachmentsService',\r\n        '$translate'\r\n    ]\r\n\r\n    constructor: (@attachmentsService, @translate) ->\r\n        @.form = {}\r\n        @.form.description = @.attachment.getIn(['file', 'description'])\r\n        @.form.is_deprecated = @.attachment.get(['file', 'is_deprecated'])\r\n\r\n        @.title = @translate.instant(\"ATTACHMENT.TITLE\", {\r\n            fileName: @.attachment.get('name'),\r\n            date: moment(@.attachment.get('created_date')).format(@translate.instant(\"ATTACHMENT.DATE\"))\r\n        })\r\n\r\n    editMode: (mode) ->\r\n        attachment = @.attachment.set('editable', mode)\r\n        @.onUpdate({attachment: attachment})\r\n\r\n    delete: () ->\r\n        @.onDelete({attachment: @.attachment})\r\n\r\n    save: () ->\r\n        attachment = @.attachment.set('loading', true)\r\n\r\n        @.onUpdate({attachment: attachment})\r\n\r\n        attachment = @.attachment.merge({\r\n            editable: false,\r\n            loading: false\r\n        })\r\n\r\n        attachment = attachment.mergeIn(['file'], {\r\n            description: @.form.description,\r\n            is_deprecated: !!@.form.is_deprecated\r\n        })\r\n\r\n        @.onUpdate({attachment: attachment})\r\n\r\nangular.module('taigaComponents').controller('Attachment', AttachmentController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachment/attachment.directive.coffee\r\n###\r\n\r\nAttachmentDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            attachment: \"=\",\r\n            onDelete: \"&\",\r\n            onUpdate: \"&\",\r\n            type: \"=\"\r\n        },\r\n        controller: \"Attachment\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/attachment/attachment.html\",\r\n        link: link\r\n    }\r\n\r\nAttachmentDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachment\", AttachmentDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-drop/attachments-drop.directive.coffee\r\n###\r\n\r\nAttachmentsDropDirective = ($parse) ->\r\n    link = (scope, el, attrs) ->\r\n        eventAttr = $parse(attrs.tgAttachmentsDrop)\r\n\r\n        el.on 'dragover', (e) ->\r\n            e.preventDefault()\r\n            return false\r\n\r\n        el.on 'drop', (e) ->\r\n            e.stopPropagation()\r\n            e.preventDefault()\r\n\r\n            dataTransfer = e.dataTransfer || (e.originalEvent && e.originalEvent.dataTransfer)\r\n\r\n            scope.$apply () -> eventAttr(scope, {files: dataTransfer.files})\r\n\r\n        scope.$on \"$destroy\", -> el.off()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nAttachmentsDropDirective.$inject = [\r\n    \"$parse\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsDrop\", AttachmentsDropDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-full/attachments-full.controller.coffee\r\n###\r\n\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\nclass AttachmentsFullController\r\n    @.$inject = [\r\n        \"$translate\",\r\n        \"$tgConfirm\",\r\n        \"$tgConfig\",\r\n        \"$tgStorage\",\r\n        \"tgAttachmentsFullService\",\r\n        \"tgProjectService\",\r\n        \"tgAttachmentsPreviewService\"\r\n    ]\r\n\r\n    constructor: (@translate, @confirm, @config, @storage, @attachmentsFullService, @projectService, @attachmentsPreviewService) ->\r\n        @.mode = @storage.get('attachment-mode', 'list')\r\n\r\n        @.maxFileSize = @config.get(\"maxUploadFileSize\", null)\r\n        @.maxFileSize = sizeFormat(@.maxFileSize) if @.maxFileSize\r\n        @.maxFileSizeMsg = if @.maxFileSize then @translate.instant(\"ATTACHMENT.MAX_UPLOAD_SIZE\", {maxFileSize: @.maxFileSize}) else \"\"\r\n\r\n        taiga.defineImmutableProperty @, 'attachments', () => return @attachmentsFullService.attachments\r\n        taiga.defineImmutableProperty @, 'deprecatedsCount', () => return @attachmentsFullService.deprecatedsCount\r\n        taiga.defineImmutableProperty @, 'attachmentsVisible', () => return @attachmentsFullService.attachmentsVisible\r\n        taiga.defineImmutableProperty @, 'deprecatedsVisible', () => return @attachmentsFullService.deprecatedsVisible\r\n\r\n    uploadingAttachments: () ->\r\n        return @attachmentsFullService.uploadingAttachments\r\n\r\n    addAttachment: (file) ->\r\n        editable = (@.mode == 'list')\r\n\r\n        @attachmentsFullService.addAttachment(@.projectId, @.objId, @.type, file, editable)\r\n\r\n    setMode: (mode) ->\r\n        @.mode = mode\r\n\r\n        @storage.set('attachment-mode', mode)\r\n\r\n    toggleDeprecatedsVisible: () ->\r\n        @attachmentsFullService.toggleDeprecatedsVisible()\r\n\r\n    addAttachments: (files) ->\r\n        _.forEach files, (file) => @.addAttachment(file)\r\n\r\n    loadAttachments: ->\r\n        @attachmentsFullService.loadAttachments(@.type, @.objId, @.projectId)\r\n\r\n    deleteAttachment: (toDeleteAttachment) ->\r\n        @attachmentsPreviewService.fileId = null\r\n\r\n        title = @translate.instant(\"ATTACHMENT.TITLE_LIGHTBOX_DELETE_ATTACHMENT\")\r\n        message = @translate.instant(\"ATTACHMENT.MSG_LIGHTBOX_DELETE_ATTACHMENT\", {\r\n            fileName: toDeleteAttachment.getIn(['file', 'name'])\r\n        })\r\n\r\n        return @confirm.askOnDelete(title, message)\r\n            .then (askResponse) =>\r\n                onError = () =>\r\n                    message = @translate.instant(\"ATTACHMENT.ERROR_DELETE_ATTACHMENT\", {errorMessage: message})\r\n                    @confirm.notify(\"error\", null, message)\r\n                    askResponse.finish(false)\r\n\r\n                onSuccess = () => askResponse.finish()\r\n\r\n                @attachmentsFullService.deleteAttachment(toDeleteAttachment, @.type).then(onSuccess, onError)\r\n\r\n    reorderAttachment: (attachment, newIndex) ->\r\n        @attachmentsFullService.reorderAttachment(@.type, attachment, newIndex)\r\n\r\n    updateAttachment: (toUpdateAttachment) ->\r\n        @attachmentsFullService.updateAttachment(toUpdateAttachment, @.type)\r\n\r\n    _isEditable: ->\r\n        if @projectService.project\r\n            return @projectService.hasPermission(@.editPermission)\r\n        return false\r\n\r\n    showAttachments: ->\r\n        return @._isEditable() || @attachmentsFullService.attachments.size\r\n\r\nangular.module(\"taigaComponents\").controller(\"AttachmentsFull\", AttachmentsFullController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-full/attachments-full.directive.coffee\r\n###\r\n\r\nbindOnce = @.taiga.bindOnce\r\n\r\nAttachmentsFullDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        bindOnce scope, 'vm.objId', (value) ->\r\n            ctrl.loadAttachments()\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            type: \"@\",\r\n            objId: \"=\",\r\n            projectId: \"=\",\r\n            editPermission: \"@\"\r\n        },\r\n        controller: \"AttachmentsFull\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/attachments-full/attachments-full.html\",\r\n        link: link\r\n    }\r\n\r\nAttachmentsFullDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsFull\", AttachmentsFullDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-full/attachments-full.service.coffee\r\n###\r\n\r\nclass AttachmentsFullService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgAttachmentsService\",\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@attachmentsService, @rootScope) ->\r\n        @._attachments = Immutable.List()\r\n        @._deprecatedsCount = 0\r\n        @._attachmentsVisible = Immutable.List()\r\n        @._deprecatedsVisible = false\r\n        @.uploadingAttachments = []\r\n\r\n        taiga.defineImmutableProperty @, 'attachments', () => return @._attachments\r\n        taiga.defineImmutableProperty @, 'deprecatedsCount', () => return @._deprecatedsCount\r\n        taiga.defineImmutableProperty @, 'attachmentsVisible', () => return @._attachmentsVisible\r\n        taiga.defineImmutableProperty @, 'deprecatedsVisible', () => return @._deprecatedsVisible\r\n\r\n    toggleDeprecatedsVisible: () ->\r\n        @._deprecatedsVisible = !@._deprecatedsVisible\r\n        @.regenerate()\r\n\r\n    regenerate: () ->\r\n        @._deprecatedsCount = @._attachments.count (it) -> it.getIn(['file', 'is_deprecated'])\r\n\r\n        if @._deprecatedsVisible\r\n            @._attachmentsVisible = @._attachments\r\n        else\r\n            @._attachmentsVisible = @._attachments.filter (it) -> !it.getIn(['file', 'is_deprecated'])\r\n\r\n    addAttachment: (projectId, objId, type, file, editable = true, comment = false) ->\r\n        return new Promise (resolve, reject) =>\r\n            if @attachmentsService.validate(file)\r\n                @.uploadingAttachments.push(file)\r\n\r\n                promise = @attachmentsService.upload(file, objId, projectId, type, comment)\r\n                promise.then (file) =>\r\n                    @.uploadingAttachments = @.uploadingAttachments.filter (uploading) ->\r\n                        return uploading.name != file.get('name')\r\n\r\n                    attachment = Immutable.Map()\r\n\r\n                    attachment = attachment.merge({\r\n                        file: file,\r\n                        editable: editable,\r\n                        loading: false,\r\n                        from_comment: comment\r\n                    })\r\n\r\n                    @._attachments = @._attachments.push(attachment)\r\n\r\n                    @.regenerate()\r\n\r\n                    @rootScope.$broadcast(\"attachment:create\")\r\n\r\n                    resolve(attachment)\r\n            else\r\n                reject(new Error(file))\r\n\r\n    loadAttachments: (type, objId, projectId)->\r\n        @attachmentsService.list(type, objId, projectId).then (files) =>\r\n            @._attachments = files.map (file) ->\r\n                attachment = Immutable.Map()\r\n\r\n                return attachment.merge({\r\n                    loading: false,\r\n                    editable: false,\r\n                    file: file\r\n                })\r\n\r\n            @.regenerate()\r\n\r\n    deleteAttachment: (toDeleteAttachment, type) ->\r\n        onSuccess = () =>\r\n            @._attachments = @._attachments.filter (attachment) -> attachment != toDeleteAttachment\r\n\r\n            @.regenerate()\r\n\r\n        return @attachmentsService.delete(type, toDeleteAttachment.getIn(['file', 'id'])).then(onSuccess)\r\n\r\n    reorderAttachment: (type, attachment, newIndex) ->\r\n        oldIndex = @.attachments.findIndex (it) -> it == attachment\r\n        return if oldIndex == newIndex\r\n\r\n        attachments = @.attachments.remove(oldIndex)\r\n        attachments = attachments.splice(newIndex, 0, attachment)\r\n        attachments = attachments.map (x, i) -> x.setIn(['file', 'order'], i + 1)\r\n\r\n        promises = []\r\n        attachments.forEach (attachment) =>\r\n            patch = {order: attachment.getIn(['file', 'order'])}\r\n\r\n            promises.push @attachmentsService.patch(attachment.getIn(['file', 'id']), type, patch)\r\n            \r\n        return Promise.all(promises).then () =>\r\n            @._attachments = attachments\r\n\r\n            @.regenerate()\r\n\r\n    updateAttachment: (toUpdateAttachment, type) ->\r\n        index = @._attachments.findIndex (attachment) ->\r\n            return attachment.getIn(['file', 'id']) == toUpdateAttachment.getIn(['file', 'id'])\r\n\r\n        oldAttachment = @._attachments.get(index)\r\n\r\n        patch = taiga.patch(oldAttachment.get('file'), toUpdateAttachment.get('file'))\r\n\r\n        if toUpdateAttachment.get('loading')\r\n            @._attachments = @._attachments.set(index, toUpdateAttachment)\r\n\r\n            @.regenerate()\r\n        else\r\n            return @attachmentsService.patch(toUpdateAttachment.getIn(['file', 'id']), type, patch).then () =>\r\n                @._attachments = @._attachments.set(index, toUpdateAttachment)\r\n\r\n                @.regenerate()\r\n\r\nangular.module(\"taigaComponents\").service(\"tgAttachmentsFullService\", AttachmentsFullService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-preview/attachments-preview.controller.coffee\r\n###\r\n\r\nclass AttachmentsPreviewController\r\n    @.$inject = [\r\n        \"tgAttachmentsPreviewService\"\r\n    ]\r\n\r\n    constructor: (@attachmentsPreviewService) ->\r\n        taiga.defineImmutableProperty @, \"current\", () =>\r\n            if !@attachmentsPreviewService.fileId\r\n                return null\r\n\r\n            return @.getCurrent()\r\n\r\n    hasPagination: () ->\r\n        images = @.attachments.filter (attachment) =>\r\n            return taiga.isImage(attachment.getIn(['file', 'name']))\r\n\r\n        return images.size > 1\r\n\r\n    getCurrent: () ->\r\n        attachment = @.attachments.find (attachment) =>\r\n            @attachmentsPreviewService.fileId == attachment.getIn(['file', 'id'])\r\n\r\n        file = attachment.get('file')\r\n\r\n        return file\r\n\r\n    getIndex: () ->\r\n        return @.attachments.findIndex (attachment) =>\r\n            @attachmentsPreviewService.fileId == attachment.getIn(['file', 'id'])\r\n\r\n    next: () ->\r\n        attachmentIndex = @.getIndex()\r\n\r\n        image = @.attachments.slice(attachmentIndex + 1).find (attachment) ->\r\n                return taiga.isImage(attachment.getIn(['file', 'name']))\r\n\r\n        if !image\r\n            image = @.attachments.find (attachment) ->\r\n                return taiga.isImage(attachment.getIn(['file', 'name']))\r\n\r\n\r\n        @attachmentsPreviewService.fileId = image.getIn(['file', 'id'])\r\n\r\n    previous: () ->\r\n        attachmentIndex = @.getIndex()\r\n\r\n        image = @.attachments.slice(0, attachmentIndex).findLast (attachment) ->\r\n                return taiga.isImage(attachment.getIn(['file', 'name']))\r\n\r\n        if !image\r\n            image = @.attachments.findLast (attachment) ->\r\n                return taiga.isImage(attachment.getIn(['file', 'name']))\r\n\r\n        @attachmentsPreviewService.fileId = image.getIn(['file', 'id'])\r\n\r\nangular.module('taigaComponents').controller('AttachmentsPreview', AttachmentsPreviewController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-preview/attachments-preview.directive.coffee\r\n###\r\n\r\nAttachmentPreviewLightboxDirective = (lightboxService, attachmentsPreviewService) ->\r\n    link = ($scope, el, attrs, ctrl) ->\r\n        $(document.body).on \"keydown.image-preview\", (e) ->\r\n            if attachmentsPreviewService.fileId\r\n                if e.keyCode == 39\r\n                    ctrl.next()\r\n                else if e.keyCode == 37\r\n                    ctrl.previous()\r\n\r\n            $scope.$digest()\r\n\r\n        $scope.$on '$destroy', () ->\r\n            $(document.body).off('.image-preview')\r\n\r\n    return {\r\n        scope: {},\r\n        controller: 'AttachmentsPreview',\r\n        templateUrl: 'components/attachments-preview/attachments-preview.html',\r\n        link: link,\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            attachments: \"=\"\r\n        }\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgAttachmentsPreview\", [\r\n    \"lightboxService\",\r\n    \"tgAttachmentsPreviewService\",\r\n    AttachmentPreviewLightboxDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-preview/attachments-preview.service.coffee\r\n###\r\n\r\nclass AttachmentsPreviewService extends taiga.Service\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n\r\nangular.module(\"taigaComponents\").service(\"tgAttachmentsPreviewService\", AttachmentsPreviewService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-simple/attachments-simple.controller.coffee\r\n###\r\n\r\nclass AttachmentsSimpleController\r\n    @.$inject = [\r\n        \"tgAttachmentsService\"\r\n    ]\r\n\r\n    constructor: (@attachmentsService) ->\r\n\r\n    addAttachment: (file) ->\r\n        attachment = Immutable.fromJS({\r\n            file: file,\r\n            name: file.name,\r\n            size: file.size\r\n        })\r\n\r\n        if @attachmentsService.validate(file)\r\n            @.attachments = @.attachments.push(attachment)\r\n\r\n            @.onAdd({attachment: attachment}) if @.onAdd\r\n\r\n    addAttachments: (files) ->\r\n        _.forEach files, @.addAttachment.bind(this)\r\n\r\n    deleteAttachment: (toDeleteAttachment) ->\r\n        @.attachments = @.attachments.filter (attachment) -> attachment != toDeleteAttachment\r\n\r\n        @.onDelete({attachment: toDeleteAttachment}) if @.onDelete\r\n\r\nangular.module(\"taigaComponents\").controller(\"AttachmentsSimple\", AttachmentsSimpleController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-simple/attachments-simple.directive.coffee\r\n###\r\n\r\nAttachmentsSimpleDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            attachments: \"=\",\r\n            onAdd: \"&\",\r\n            onDelete: \"&\"\r\n        },\r\n        controller: \"AttachmentsSimple\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/attachments-simple/attachments-simple.html\",\r\n        link: link\r\n    }\r\n\r\nAttachmentsSimpleDirective.$inject = []\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsSimple\", AttachmentsSimpleDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/attachments-sortable/attachments-sortable.directive.coffee\r\n###\r\n\r\nAttachmentSortableDirective = ($parse) ->\r\n    link = (scope, el, attrs) ->\r\n        callback = $parse(attrs.tgAttachmentsSortable)\r\n\r\n        drake = dragula([el[0]], {\r\n            copySortSource: false,\r\n            copy: false,\r\n            mirrorContainer: el[0],\r\n            moves: (item) -> return $(item).is('div[tg-bind-scope]')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            item = $(item)\r\n\r\n            attachment = item.scope().attachment\r\n            newIndex = item.index()\r\n\r\n            scope.$apply () ->\r\n                callback(scope, {attachment: attachment, index: newIndex})\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n\r\n        scope.$on \"$destroy\", ->\r\n            el.off()\r\n            drake.destroy()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nAttachmentSortableDirective.$inject = [\r\n    \"$parse\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsSortable\", AttachmentSortableDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/auto-select/auto-select.directive.coffee\r\n###\r\n\r\nAutoSelectDirective = ($timeout) ->\r\n    return {\r\n        link: (scope, elm) ->\r\n            $timeout () -> elm[0].select()\r\n    }\r\n\r\nAutoSelectDirective.$inject = [\r\n    '$timeout'\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAutoSelect\", AutoSelectDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/avatar/avatar.directive.coffee\r\n###\r\n\r\nAvatarDirective = (avatarService) ->\r\n    link = (scope, el, attrs) ->\r\n        if attrs.tgAvatarBig\r\n            attributeName = 'avatarBig'\r\n        else\r\n            attributeName = 'avatar'\r\n\r\n        scope.$watch attributeName, (user) ->\r\n            avatar = avatarService.getAvatar(user, attributeName)\r\n\r\n            el.attr('src', avatar.url)\r\n            el.attr('title', \"#{avatar.username}\")\r\n            el.attr('alt', \"#{avatar.username}\")\r\n            el.css('background', avatar.bg or \"\")\r\n\r\n    return {\r\n        link: link\r\n        scope: {\r\n            avatar: \"=tgAvatar\"\r\n            avatarBig: \"=tgAvatarBig\"\r\n        }\r\n    }\r\n\r\nAvatarDirective.$inject = [\r\n    'tgAvatarService'\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgAvatar\", AvatarDirective)\r\nangular.module(\"taigaComponents\").directive(\"tgAvatarBig\", AvatarDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/belong-to-epics/belong-to-epics.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\n\r\nBelongToEpicsDirective = ($translate, $confirm, $rs, $rs2, lightboxService) ->\r\n\r\n    link = (scope, el, attrs) ->\r\n        scope.$watch 'epics', (epics) ->\r\n            updateEpics(epics)\r\n\r\n        scope.$on \"related-epics:changed\", (ctx, userStory)->\r\n            $rs.userstories.getByRef(userStory.project, userStory.ref, {}).then (us) ->\r\n                scope.item.epics = us.epics\r\n                updateEpics(us.epics)\r\n\r\n        scope.removeEpicRelationship = (epic) ->\r\n            title = $translate.instant(\"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.TITLE\")\r\n            message = $translate.instant(\r\n                \"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.MESSAGE\",\r\n                { epicSubject:  epic.get('subject') }\r\n            )\r\n\r\n            $confirm.ask(title, null, message).then (askResponse) ->\r\n                onSuccess = ->\r\n                    askResponse.finish()\r\n                    scope.$broadcast(\"related-epics:changed\", scope.item)\r\n\r\n                onError = ->\r\n                    askResponse.finish(false)\r\n                    $confirm.notify(\"error\")\r\n\r\n                epicId = epic.get('id')\r\n                usId = scope.item.id\r\n                $rs2.epics.deleteRelatedUserstory(epicId, usId).then(onSuccess, onError)\r\n\r\n        updateEpics = (epics) ->\r\n            scope.epicsLength = 0\r\n            scope.immutable_epics = []\r\n            if epics && !epics.isIterable\r\n                scope.epicsLength = epics.length\r\n                scope.immutable_epics = Immutable.fromJS(epics)\r\n\r\n    templateUrl = (el, attrs) ->\r\n        if attrs.format\r\n            return \"components/belong-to-epics/belong-to-epics-\" + attrs.format + \".html\"\r\n        return \"components/belong-to-epics/belong-to-epics-pill.html\"\r\n\r\n    return {\r\n        link: link,\r\n        scope: {\r\n            epics: '=',\r\n            item: \"=\"\r\n        },\r\n        templateUrl: templateUrl\r\n    }\r\n\r\n\r\nmodule.directive(\"tgBelongToEpics\", [\r\n    \"$translate\", \"$tgConfirm\", \"$tgResources\", \"tgResources\", \"lightboxService\",\r\n    BelongToEpicsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/bind-code.directive.coffee\r\n###\r\n\r\nBindCode = ($sce, $parse, $compile, wysiwygService, wysiwygCodeHightlighterService) ->\r\n  return {\r\n    restrict: 'A',\r\n    compile:  (tElement, tAttrs) ->\r\n        tgBindCodeGetter = $parse(tAttrs.tgBindCode)\r\n        tgBindCodeWatch = $parse tAttrs.tgBindCode, (value) ->\r\n            return (value || '').toString()\r\n\r\n        $compile.$$addBindingClass(tElement)\r\n\r\n        return (scope, element, attr) ->\r\n            $compile.$$addBindingInfo(element, attr.tgBindCode);\r\n\r\n            scope.$watch tgBindCodeWatch, () ->\r\n                html = wysiwygService.getHTML(tgBindCodeGetter(scope))\r\n\r\n                element.html($sce.getTrustedHtml(html) || '')\r\n\r\n                wysiwygCodeHightlighterService.addHightlighter(element)\r\n\r\n  }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgBindCode\", [\r\n        \"$sce\",\r\n        \"$parse\",\r\n        \"$compile\",\r\n        \"tgWysiwygService\",\r\n        \"tgWysiwygCodeHightlighterService\",\r\n        BindCode])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/board-zoom/board-zoom.directive.coffee\r\n###\r\n\r\nBoardZoomDirective = () ->\r\n    return {\r\n        scope: {\r\n            levels: \"=\",\r\n            value: \"=\"\r\n        },\r\n        templateUrl: 'components/board-zoom/board-zoom.html'\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgBoardZoom\", [BoardZoomDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/card-slideshow/card-slideshow.controller.coffee\r\n###\r\n\r\nclass CardSlideshowController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.index = 0\r\n\r\n    next: () ->\r\n        @.index++\r\n\r\n        if @.index >= @.images.size\r\n            @.index = 0\r\n\r\n    previous: () ->\r\n        @.index--\r\n\r\n        if @.index < 0\r\n            @.index = @.images.size - 1\r\n\r\nangular.module('taigaComponents').controller('CardSlideshow', CardSlideshowController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/card-slideshow/card-slideshow.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\ncardSlideshowDirective = () ->\r\n    return {\r\n        controller: \"CardSlideshow\",\r\n        templateUrl: \"components/card-slideshow/card-slideshow.html\",\r\n        bindToController: true,\r\n        controllerAs: \"vm\",\r\n        scope: {\r\n            images: \"=\"\r\n        }\r\n    }\r\n\r\nmodule.directive('tgCardSlideshow', cardSlideshowDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/card/card.controller.coffee\r\n###\r\n\r\nclass CardController\r\n    @.$inject = []\r\n\r\n    visible: (name) ->\r\n        return @.zoom.indexOf(name) != -1\r\n\r\n    hasTasks: () ->\r\n        tasks = @.item.getIn(['model', 'tasks'])\r\n        return tasks and tasks.size > 0\r\n\r\n    hasMultipleAssignedUsers: () ->\r\n        assignedUsers = @.item.getIn(['model', 'assigned_users'])\r\n        return assignedUsers and assignedUsers.size > 1\r\n\r\n    hasVisibleAttachments: () ->\r\n        return @.item.get('images').size > 0\r\n\r\n    toggleFold: () ->\r\n        @.onToggleFold({id: @.item.get('id')})\r\n\r\n    getClosedTasks: () ->\r\n        return @.item.getIn(['model', 'tasks']).filter (task) -> return task.get('is_closed')\r\n\r\n    closedTasksPercent: () ->\r\n        return @.getClosedTasks().size * 100 / @.item.getIn(['model', 'tasks']).size\r\n\r\n    getModifyPermisionKey: () ->\r\n        return  if @.type == 'task' then 'modify_task' else 'modify_us'\r\n\r\n    getDeletePermisionKey: () ->\r\n        return  if @.type == 'task' then 'delete_task' else 'delete_us'\r\n\r\n    _setVisibility: () ->\r\n        visibility = {\r\n            related: @.visible('related_tasks'),\r\n            slides: @.visible('attachments')\r\n        }\r\n\r\n        if!_.isUndefined(@.item.get('foldStatusChanged'))\r\n            if @.visible('related_tasks') && @.visible('attachments')\r\n                visibility.related = !@.item.get('foldStatusChanged')\r\n                visibility.slides = !@.item.get('foldStatusChanged')\r\n            else if @.visible('attachments')\r\n                visibility.related = @.item.get('foldStatusChanged')\r\n                visibility.slides = @.item.get('foldStatusChanged')\r\n            else if !@.visible('related_tasks') && !@.visible('attachments')\r\n                visibility.related = @.item.get('foldStatusChanged')\r\n                visibility.slides = @.item.get('foldStatusChanged')\r\n\r\n        if !@.item.getIn(['model', 'tasks']) || !@.item.getIn(['model', 'tasks']).size\r\n            visibility.related = false\r\n\r\n        if !@.item.get('images') || !@.item.get('images').size\r\n            visibility.slides = false\r\n\r\n        return visibility\r\n\r\n    isRelatedTasksVisible: () ->\r\n        visibility = @._setVisibility()\r\n\r\n        return visibility.related\r\n\r\n    isSlideshowVisible: () ->\r\n        visibility = @._setVisibility()\r\n\r\n        return visibility.slides\r\n\r\n    getNavKey: () ->\r\n        if @.type == 'task'\r\n            return 'project-tasks-detail'\r\n        else if @.type == 'issue'\r\n            return 'project-issues-detail'\r\n        else\r\n            return 'project-userstories-detail'\r\n\r\nangular.module('taigaComponents').controller('Card', CardController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/card/card.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\ncardDirective = () ->\r\n    return {\r\n        link: (scope) ->\r\n\r\n        controller: \"Card\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"components/card/card.html\",\r\n        scope: {\r\n            onToggleFold: \"&\",\r\n            onClickAssignedTo: \"&\",\r\n            onClickEdit: \"&\",\r\n            onClickRemove: \"&\",\r\n            onClickDelete: \"&\",\r\n            project: \"=\",\r\n            item: \"=\",\r\n            zoom: \"=\",\r\n            zoomLevel: \"=\",\r\n            archived: \"=\",\r\n            type: \"@\"\r\n        }\r\n    }\r\n\r\nmodule.directive('tgCard', cardDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/click-input-file.directive.coffee\r\n###\r\n\r\nClickInputFile = () ->\r\n  return {\r\n      link:  (scope, el) ->\r\n          el.on 'click', (e) ->\r\n              if !$(e.target).is('input')\r\n                  e.preventDefault()\r\n                  inputFile = el.find('input[type=\"file\"]')\r\n                  inputFile.val('')\r\n                  inputFile.trigger('click')\r\n\r\n          scope.$on \"$destroy\", -> el.off()\r\n  }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgClickInputFile\", [ClickInputFile])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/color-selector/color-selector.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ngetDefaulColorList = taiga.getDefaulColorList\r\n\r\n\r\nclass ColorSelectorController\r\n    @.$inject = [\r\n        \"tgProjectService\",\r\n    ]\r\n\r\n    constructor: (@projectService) ->\r\n        @.colorList = getDefaulColorList()\r\n        @.checkIsColorRequired()\r\n        @.displayColorList = false\r\n\r\n    userCanChangeColor: () ->\r\n        return true if not @.requiredPerm\r\n        return @projectService.hasPermission(@.requiredPerm)\r\n\r\n    checkIsColorRequired: () ->\r\n        if !@.isColorRequired\r\n            @.colorList = _.dropRight(@.colorList)\r\n\r\n    setColor: (color) ->\r\n        @.color = color\r\n        @.customColor = color\r\n\r\n    resetColor: () ->\r\n        if @.isColorRequired and not @.color\r\n            @.color = @.initColor\r\n\r\n    toggleColorList: () ->\r\n        @.displayColorList = !@.displayColorList\r\n        @.customColor = @.color\r\n        @.resetColor()\r\n\r\n    onSelectDropdownColor: (color) ->\r\n        @.color = color\r\n        @.onSelectColor({color: color})\r\n        @.toggleColorList()\r\n\r\n    onKeyDown: (event) ->\r\n        if event.which == 13 # ENTER\r\n            if @.customColor or not @.isColorRequired\r\n                @.onSelectDropdownColor(@.customColor)\r\n            event.preventDefault()\r\n\r\n\r\nangular.module('taigaComponents').controller(\"ColorSelectorCtrl\", ColorSelectorController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/color-selector/color-selector.directive.coffee\r\n###\r\n\r\nbindOnce = @.taiga.bindOnce\r\n\r\nColorSelectorDirective = ($timeout) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        # Animation\r\n        _timeout = null\r\n\r\n        cancel = () ->\r\n            $timeout.cancel(_timeout)\r\n            _timeout = null\r\n\r\n        close = () ->\r\n            return if _timeout\r\n\r\n            _timeout = $timeout (() ->\r\n                ctrl.displayColorList = false\r\n                ctrl.resetColor()\r\n            ), 400\r\n\r\n        el.find('.color-selector')\r\n            .mouseenter(cancel)\r\n            .mouseleave(close)\r\n\r\n        el.find('.color-selector-dropdown')\r\n            .mouseenter(cancel)\r\n            .mouseleave(close)\r\n\r\n        scope.$watch 'vm.initColor', (color) ->\r\n            # We can't just bind once because sometimes the initial color is reset from the outside\r\n            ctrl.setColor(color)\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"components/color-selector/color-selector.html\",\r\n        controller: \"ColorSelectorCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            isColorRequired: \"=\",\r\n            onSelectColor: \"&\",\r\n            initColor: \"=\",\r\n            requiredPerm: \"@\"\r\n        },\r\n        scope: {},\r\n    }\r\n\r\n\r\nColorSelectorDirective.$inject = [\r\n    \"$timeout\"\r\n]\r\n\r\nangular.module('taigaComponents').directive(\"tgColorSelector\", ColorSelectorDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/detail/header/detail-header.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaUserStories\")\r\n\r\nclass StoryHeaderController\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"$tgConfirm\",\r\n        \"$tgQueueModelTransformation\",\r\n        \"$tgNavUrls\",\r\n        \"$window\"\r\n    ]\r\n\r\n    constructor: (@rootScope, @confirm, @modelTransform, @navUrls, @window) ->\r\n        @.editMode = false\r\n        @.loadingSubject = false\r\n        @.originalSubject = @.item.subject\r\n        @.objType = {\r\n            'tasks': 'task',\r\n            'issues': 'issue',\r\n            'userstories': 'us',\r\n        }[@.item._name]\r\n\r\n    _checkNav: () ->\r\n        if @.item.neighbors.previous?.ref?\r\n            ctx = {\r\n                project: @.project.slug\r\n                ref: @.item.neighbors.previous.ref\r\n            }\r\n            @.previousUrl = @navUrls.resolve(\"project-\" + @.item._name + \"-detail\", ctx)\r\n\r\n        if @.item.neighbors.next?.ref?\r\n            ctx = {\r\n                project: @.project.slug\r\n                ref: @.item.neighbors.next.ref\r\n            }\r\n            @.nextUrl = @navUrls.resolve(\"project-\" + @.item._name + \"-detail\", ctx)\r\n\r\n    _checkPermissions: () ->\r\n        @.permissions = {\r\n            canEdit: _.includes(@.project.my_permissions, @.requiredPerm)\r\n        }\r\n\r\n    cancelEdit: () ->\r\n        @.editMode = false\r\n        @.item.subject = @.originalSubject\r\n\r\n    editSubject: (value) ->\r\n        selection = @window.getSelection()\r\n        if selection.type != \"Range\"\r\n            if value\r\n                @.editMode = true\r\n            if !value\r\n                @.editMode = false\r\n\r\n    onKeyDown: (event) ->\r\n        if event.which == 13\r\n            @.saveSubject()\r\n\r\n        if event.which == 27\r\n            @.item.subject = @.originalSubject\r\n            @.editSubject(false)\r\n\r\n    saveSubject: () ->\r\n        onEditSubjectSuccess = () =>\r\n            @.loadingSubject = false\r\n            @rootScope.$broadcast(\"object:updated\")\r\n            @confirm.notify('success')\r\n            @.originalSubject = @.item.subject\r\n\r\n        onEditSubjectError = () =>\r\n            @.loadingSubject = false\r\n            @confirm.notify('error')\r\n\r\n        @.editMode = false\r\n        @.loadingSubject = true\r\n        item = @.item\r\n        transform = @modelTransform.save (item) ->\r\n            return item\r\n        return transform.then(onEditSubjectSuccess, onEditSubjectError)\r\n\r\n    relateToEpic: (us) ->\r\n        @rootScope.$broadcast(\"relate-to-epic:add\", us)\r\n\r\nmodule.controller(\"StoryHeaderCtrl\", StoryHeaderController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/detail/header/detail-header.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaUserStories')\r\n\r\nDetailHeaderDirective = () ->\r\n    @.$inject = []\r\n\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl._checkPermissions()\r\n        ctrl._checkNav()\r\n\r\n    return {\r\n        link: link,\r\n        controller: \"StoryHeaderCtrl\",\r\n        bindToController: true,\r\n        scope: {\r\n            item: \"=\",\r\n            project: \"=\",\r\n            requiredPerm: \"@\"\r\n        },\r\n        controllerAs: \"vm\",\r\n        templateUrl:\"components/detail/header/detail-header.html\"\r\n    }\r\n\r\n\r\nmodule.directive(\"tgDetailHeader\", DetailHeaderDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/due-date/due-date-controller.coffee\r\n###\r\n\r\nclass DueDateController\r\n    @.$inject = [\r\n        \"$translate\"\r\n        \"tgLightboxFactory\"\r\n        \"tgProjectService\"\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@translate, @tgLightboxFactory, @projectService,  @rootscope) ->\r\n        @.defaultConfig = [\r\n            {\"color\": \"#9dce0a\", \"name\": \"normal due\", \"days_to_due\": null, \"by_default\": true},\r\n            {\"color\": \"#ff9900\", \"name\": \"due soon\", \"days_to_due\": 14, \"by_default\": false},\r\n            {\"color\": \"#ff8a84\", \"name\": \"past due\", \"days_to_due\": 0, \"by_default\": false}\r\n        ]\r\n\r\n    visible: () ->\r\n        return @.format == 'button' or @.dueDate?\r\n\r\n    disabled: () ->\r\n        return @.isClosed\r\n\r\n    color: () ->\r\n        return @.getStatus()?.color || null\r\n\r\n    title: () ->\r\n        if @.dueDate\r\n            return @._formatTitle()\r\n        else if @.format == 'button'\r\n            return @translate.instant('COMMON.DUE_DATE.TITLE_ACTION_SET_DUE_DATE')\r\n        return ''\r\n\r\n    getStatus: (options) ->\r\n        if !@.dueDate\r\n            return null\r\n\r\n        project = @projectService.project.toJS()\r\n        options = project[\"#{@.objType}_duedates\"]\r\n\r\n        if !options\r\n            options = @.defaultConfig\r\n\r\n        return @._getAppearance(options)\r\n\r\n    _getDefaultAppearance: (options) ->\r\n        defaultAppearance = null\r\n        _.map options, (option) ->\r\n            if option.by_default == true\r\n                defaultAppearance = option\r\n        return defaultAppearance\r\n\r\n    _getAppearance: (options) ->\r\n        currentAppearance = @._getDefaultAppearance(options)\r\n        options = _.sortBy(options, (o) -> - o.days_to_due) # sort desc\r\n\r\n        dueDate = moment(@.dueDate)\r\n        now = moment()\r\n        _.map options, (appearance) ->\r\n            if appearance.days_to_due == null\r\n                return\r\n            limitDate = moment(dueDate - moment.duration(appearance.days_to_due, \"days\"))\r\n            if now >= limitDate\r\n                currentAppearance = appearance\r\n\r\n        return currentAppearance\r\n\r\n    _formatTitle: () ->\r\n        prettyDate = @translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n        formatedDate = moment(@.dueDate).format(prettyDate)\r\n\r\n        status = @.getStatus()\r\n        if status?.name\r\n            return \"#{formatedDate} (#{status.name})\"\r\n        return formatedDate\r\n\r\n    setDueDate: () ->\r\n        return if @.disabled()\r\n        @tgLightboxFactory.create(\r\n            \"tg-lb-set-due-date\",\r\n            {\"class\": \"lightbox lightbox-set-due-date\"},\r\n            {\"object\": @.item, \"notAutoSave\": @.notAutoSave}\r\n        )\r\n\r\nangular.module('taigaComponents').controller('DueDateCtrl', DueDateController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/due-date/due-date-popover.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\ndueDatePopoverDirective = ($translate, datePickerConfigService) ->\r\n    return {\r\n        link: (scope, el, attrs, ctrl) ->\r\n            scope.open = false\r\n\r\n            datePickerConfig = datePickerConfigService.get()\r\n            _.merge(datePickerConfig, {\r\n                field: el.find('.due-date-button')[0]\r\n                container: el.find('.date-picker-container')[0]\r\n                bound: true\r\n                onClose: () ->\r\n                    scope.open = false\r\n                    scope.$apply()\r\n                onSelect: () ->\r\n                    ctrl.dueDate = this.getMoment().format('YYYY-MM-DD')\r\n            })\r\n            el.picker = new Pikaday(datePickerConfig)\r\n\r\n            el.on \"click\", \".due-date-button\", (event) ->\r\n                if scope.open\r\n                    el.picker.hide()\r\n                    return\r\n                if !el.picker.getDate() && ctrl.dueDate\r\n                    el.picker.setDate(moment(ctrl.dueDate).format('YYYY-MM-DD'))\r\n                el.picker.show()\r\n                scope.open = true\r\n                scope.$apply()\r\n\r\n            el.on \"click\", \".date-picker-clean\", (event) ->\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                ctrl.dueDate = null\r\n                el.picker.setDate(ctrl.dueDate)\r\n                scope.open = false\r\n                el.picker.hide()\r\n                scope.$apply()\r\n\r\n            scope.$on \"status:changed\", (ctx, status) ->\r\n                ctrl.isClosed = ctrl.item.is_closed\r\n\r\n        controller: \"DueDateCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"components/due-date/due-date-popover.html\",\r\n        scope: {\r\n            dueDate: '=',\r\n            isClosed: '=',\r\n            item: '=',\r\n            objType: '@',\r\n            format: '@',\r\n            notAutoSave: '='\r\n        }\r\n    }\r\n\r\nmodule.directive('tgDueDatePopover', ['$translate', 'tgDatePickerConfigService', dueDatePopoverDirective])","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/due-date/due-date.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\ndueDateDirective = ($translate, datePickerConfigService) ->\r\n    templateUrl = (el, attrs) ->\r\n        if attrs.format\r\n            return \"components/due-date/due-date-\" + attrs.format + \".html\"\r\n        return \"components/due-date/due-date-icon.html\"\r\n\r\n    return {\r\n        link: (scope, el, attrs, ctrl) ->\r\n            renderDatePicker = () ->\r\n                prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n                if ctrl.dueDate\r\n                    ctrl.dueDate = moment(ctrl.dueDate, prettyDate)\r\n\r\n                el.on \"click\", \".date-picker-popover-trigger\", (event) ->\r\n                    if ctrl.disabled()\r\n                        return\r\n                    event.preventDefault()\r\n                    event.stopPropagation()\r\n                    el.find(\".date-picker-popover\").popover().open()\r\n\r\n                el.on \"click\", \".date-picker-clean\", (event) ->\r\n                    event.preventDefault()\r\n                    event.stopPropagation()\r\n                    ctrl.dueDate = null\r\n                    scope.$apply()\r\n                    el.find(\".date-picker-popover\").popover().close()\r\n\r\n                datePickerConfig = datePickerConfigService.get()\r\n                _.merge(datePickerConfig, {\r\n                    field: el.find('input.due-date')[0]\r\n                    container: el.find('.date-picker-container')[0]\r\n                    bound: false\r\n                    onSelect: () ->\r\n                        ctrl.dueDate = this.getMoment().format('YYYY-MM-DD')\r\n                        el.find(\".date-picker-popover\").popover().close()\r\n                        scope.$apply()\r\n                })\r\n\r\n                el.picker = new Pikaday(datePickerConfig)\r\n\r\n            if attrs.format == 'button-popover'\r\n                renderDatePicker()\r\n\r\n        controller: \"DueDateCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: templateUrl,\r\n        scope: {\r\n            dueDate: '=',\r\n            isClosed: '=',\r\n            item: '=',\r\n            objType: '@',\r\n            format: '@',\r\n            notAutoSave: '='\r\n        }\r\n    }\r\n\r\nmodule.directive('tgDueDate', ['$translate', 'tgDatePickerConfigService', dueDateDirective])","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/file-change/file-change.directive.coffee\r\n###\r\n\r\nFileChangeDirective = ($parse) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        eventAttr = $parse(attrs.tgFileChange)\r\n\r\n        el.on 'change', (event) ->\r\n            scope.$apply () -> eventAttr(scope, {files: event.currentTarget.files})\r\n\r\n        scope.$on \"$destroy\", -> el.off()\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        link: link\r\n    }\r\n\r\nFileChangeDirective.$inject = [\r\n    \"$parse\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgFileChange\", FileChangeDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/filter/filter-remote.service.coffee\r\n###\r\n\r\ngenerateHash = taiga.generateHash\r\n\r\nclass FilterRemoteStorageService extends taiga.Service\r\n    @.$inject = [\r\n        \"$q\",\r\n        \"$tgUrls\",\r\n        \"$tgHttp\"\r\n    ]\r\n\r\n    constructor: (@q, @urls, @http) ->\r\n\r\n    storeFilters: (projectId, myFilters, filtersHashSuffix) ->\r\n        deferred = @q.defer()\r\n        url = @urls.resolve(\"user-storage\")\r\n        ns = \"#{projectId}:#{filtersHashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n        if _.isEmpty(myFilters)\r\n            promise = @http.delete(\"#{url}/#{hash}\", {key: hash, value:myFilters})\r\n            promise.then ->\r\n                deferred.resolve()\r\n            promise.then null, ->\r\n                deferred.reject()\r\n        else\r\n            promise = @http.put(\"#{url}/#{hash}\", {key: hash, value:myFilters})\r\n            promise.then (data) ->\r\n                deferred.resolve()\r\n            promise.then null, (data) =>\r\n                innerPromise = @http.post(\"#{url}\", {key: hash, value:myFilters})\r\n                innerPromise.then ->\r\n                    deferred.resolve()\r\n                innerPromise.then null, ->\r\n                    deferred.reject()\r\n        return deferred.promise\r\n\r\n    getFilters: (projectId, filtersHashSuffix) ->\r\n        deferred = @q.defer()\r\n        url = @urls.resolve(\"user-storage\")\r\n        ns = \"#{projectId}:#{filtersHashSuffix}\"\r\n        hash = generateHash([projectId, ns])\r\n\r\n        promise = @http.get(\"#{url}/#{hash}\")\r\n        promise.then (data) ->\r\n            deferred.resolve(data.data.value)\r\n        promise.then null, (data) ->\r\n            deferred.resolve({})\r\n\r\n        return deferred.promise\r\n\r\nangular.module(\"taigaComponents\").service(\"tgFilterRemoteStorageService\", FilterRemoteStorageService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/filter/filter-slide-down.directive.coffee\r\n###\r\n\r\nFilterSlideDownDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        filter = $('tg-filter')\r\n\r\n        scope.$watch attrs.ngIf, (value) ->\r\n            if value\r\n                filter.find('.filter-list').hide()\r\n\r\n                wrapperHeight = filter.height()\r\n                contentHeight = 0\r\n\r\n                filter.children().each () ->\r\n                    contentHeight += $(this).outerHeight(true)\r\n\r\n                $(el.context.nextSibling)\r\n                    .css({\r\n                        \"max-height\": wrapperHeight - contentHeight,\r\n                        \"display\": \"block\"\r\n                    })\r\n\r\n    return {\r\n        priority: 900,\r\n        link: link\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgFilterSlideDown\", [FilterSlideDownDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/filter/filter.controller.coffee\r\n###\r\n\r\nclass FilterController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.opened = null\r\n        @.customFilterForm = false\r\n        @.customFilterName = ''\r\n\r\n    toggleFilterCategory: (filterName) ->\r\n        if @.opened == filterName\r\n            @.opened = null\r\n        else\r\n            @.opened = filterName\r\n\r\n    isOpen: (filterName) ->\r\n        return @.opened == filterName\r\n\r\n    saveCustomFilter: () ->\r\n        @.onSaveCustomFilter({name: @.customFilterName})\r\n        @.customFilterForm = false\r\n        @.opened = 'custom-filter'\r\n        @.customFilterName = ''\r\n\r\n    changeQ: () ->\r\n        @.onChangeQ({q: @.q})\r\n\r\n    unselectFilter: (filter) ->\r\n        @.onRemoveFilter({filter: filter})\r\n\r\n    unselectFilter: (filter) ->\r\n        @.onRemoveFilter({filter: filter})\r\n\r\n    selectFilter: (filterCategory, filter) ->\r\n        filter = {\r\n            category: filterCategory\r\n            filter: filter\r\n        }\r\n\r\n        @.onAddFilter({filter: filter})\r\n\r\n    removeCustomFilter: (filter) ->\r\n        @.onRemoveCustomFilter({filter: filter})\r\n\r\n    selectCustomFilter: (filter) ->\r\n        @.onSelectCustomFilter({filter: filter})\r\n\r\n    isFilterSelected: (filterCategory, filter) ->\r\n        return !!_.find @.selectedFilters, (it) ->\r\n            return filter.id == it.id && filterCategory.dataType == it.dataType\r\n\r\nangular.module('taigaComponents').controller('Filter', FilterController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/filter/filter.directive.coffee\r\n###\r\n\r\nFilterDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        unwatch = scope.$watch \"vm.defaultQ\", (q) ->\r\n            if q && !scope.vm.filtersForm.$dirty\r\n                scope.vm.q = q\r\n                unwatch()\r\n            else if scope.vm.filtersForm.$dirty\r\n                unwatch()\r\n\r\n        attrs.$observe \"open\", (open) ->\r\n            open = scope.$eval(open)\r\n\r\n            if open\r\n                el.addClass('open')\r\n            else\r\n                el.removeClass('open')\r\n\r\n    return {\r\n        scope: {\r\n            onChangeQ: \"&\",\r\n            onAddFilter: \"&\",\r\n            onSelectCustomFilter: \"&\",\r\n            onRemoveFilter: \"&\",\r\n            onRemoveCustomFilter: \"&\",\r\n            onSaveCustomFilter: \"&\",\r\n            customFilters: \"<\",\r\n            defaultQ: \"=q\",\r\n            filters: \"<\"\r\n            customFilters: \"<\"\r\n            selectedFilters: \"<\"\r\n        },\r\n        bindToController: true,\r\n        controller: \"Filter\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: 'components/filter/filter.html',\r\n        link: link\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgFilter\", [FilterDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/joy-ride/joy-ride.directive.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nJoyRideDirective = ($rootScope, currentUserService, joyRideService, $location, $translate) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        unsuscribe = null\r\n        intro = introJs()\r\n\r\n        intro.oncomplete () ->\r\n            $('html,body').scrollTop(0)\r\n\r\n        intro.onexit () ->\r\n            currentUserService.disableJoyRide()\r\n\r\n        initJoyrRide = (next, config) ->\r\n            if !config[next.joyride]\r\n                return\r\n\r\n            intro.setOptions({\r\n                exitOnEsc: false,\r\n                exitOnOverlayClick: false,\r\n                showStepNumbers: false,\r\n                nextLabel: $translate.instant('JOYRIDE.NAV.NEXT') + ' &rarr;',\r\n                prevLabel: '&larr; ' + $translate.instant('JOYRIDE.NAV.BACK'),\r\n                skipLabel: $translate.instant('JOYRIDE.NAV.SKIP'),\r\n                doneLabel: $translate.instant('JOYRIDE.NAV.DONE'),\r\n                disableInteraction: true\r\n            })\r\n\r\n            intro.setOption('steps', joyRideService.get(next.joyride))\r\n            intro.start()\r\n\r\n        $rootScope.$on '$routeChangeSuccess',  (event, next) ->\r\n            if !next.joyride || !currentUserService.isAuthenticated()\r\n                intro.exit()\r\n                unsuscribe() if unsuscribe\r\n                return\r\n\r\n\r\n            intro.oncomplete () ->\r\n                currentUserService.disableJoyRide(next.joyride)\r\n\r\n            if next.loader\r\n                unsuscribe = $rootScope.$on 'loader:end',  () ->\r\n                    currentUserService.loadJoyRideConfig()\r\n                        .then (config) -> initJoyrRide(next, config)\r\n\r\n                    unsuscribe()\r\n            else\r\n                currentUserService.loadJoyRideConfig()\r\n                    .then (config) -> initJoyrRide(next, config)\r\n\r\n    return {\r\n        scope: {},\r\n        link: link\r\n    }\r\n\r\nJoyRideDirective.$inject = [\r\n    \"$rootScope\",\r\n    \"tgCurrentUserService\",\r\n    \"tgJoyRideService\",\r\n    \"$location\",\r\n    \"$translate\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgJoyRide\", JoyRideDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/joy-ride/joy-ride.service.coffee\r\n###\r\n\r\nclass JoyRideService extends taiga.Service\r\n    @.$inject = [\r\n        '$translate',\r\n        'tgCheckPermissionsService'\r\n    ]\r\n\r\n    constructor: (@translate, @checkPermissionsService) ->\r\n\r\n    getConfig: () ->\r\n      return {\r\n          dashboard: () =>\r\n              steps = [\r\n                  {\r\n                      element: '.project-list > section:not(.ng-hide)',\r\n                      position: 'left',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP1.TITLE'),\r\n                          text: @translate.instant('JOYRIDE.DASHBOARD.STEP1.TEXT')\r\n                      }\r\n                  },\r\n                  {\r\n                      element: '.working-on-container',\r\n                      position: 'right',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP2.TITLE'),\r\n                          text: @translate.instant('JOYRIDE.DASHBOARD.STEP2.TEXT')\r\n                      }\r\n                  },\r\n                  {\r\n                      element: '.watching-container',\r\n                      position: 'right',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP3.TITLE')\r\n                          text: [\r\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP3.TEXT1'),\r\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP3.TEXT2')\r\n                          ]\r\n                      }\r\n                  }\r\n              ]\r\n\r\n              if !$('.project-list .create-project-button').is(':hidden')\r\n                  steps.push({\r\n                      element: '.project-list .create-project-button',\r\n                      position: 'bottom',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP4.TITLE')\r\n                          text: [\r\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP4.TEXT1'),\r\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP4.TEXT2')\r\n                          ]\r\n                      }\r\n                  })\r\n\r\n              return steps\r\n\r\n          backlog: () =>\r\n              steps = [\r\n                  {\r\n                      element: '.summary',\r\n                      position: 'bottom',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP1.TITLE')\r\n                          text: [\r\n                              @translate.instant('JOYRIDE.BACKLOG.STEP1.TEXT1'),\r\n                              @translate.instant('JOYRIDE.BACKLOG.STEP1.TEXT2')\r\n                          ]\r\n                      }\r\n                  },\r\n                  {\r\n                      element: '.backlog-table-empty',\r\n                      position: 'bottom',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP2.TITLE')\r\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP2.TEXT')\r\n                      }\r\n                  },\r\n                  {\r\n                      element: '.sprints',\r\n                      position: 'left',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP3.TITLE')\r\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP3.TEXT')\r\n                      }\r\n                  }\r\n              ]\r\n\r\n              if @checkPermissionsService.check('add_us')\r\n                  steps.push({\r\n                      element: '.new-us',\r\n                      position: 'rigth',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP4.TITLE')\r\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP4.TEXT')\r\n                      }\r\n                  })\r\n\r\n              return steps\r\n\r\n           kanban: () =>\r\n              steps = [\r\n                  {\r\n                      element: '.kanban-table-inner',\r\n                      position: 'bottom',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.KANBAN.STEP1.TITLE')\r\n                          text: @translate.instant('JOYRIDE.KANBAN.STEP1.TEXT')\r\n                      }\r\n                  },\r\n                  {\r\n                      element: '.card-placeholder',\r\n                      position: 'right',\r\n                      joyride: {\r\n                          title: @translate.instant('JOYRIDE.KANBAN.STEP2.TITLE')\r\n                          text: @translate.instant('JOYRIDE.KANBAN.STEP2.TEXT')\r\n                      }\r\n                  }\r\n              ]\r\n\r\n              if @checkPermissionsService.check('add_us')\r\n                  steps.push({\r\n                        element: '.add-action',\r\n                        position: 'bottom',\r\n                        joyride: {\r\n                            title: @translate.instant('JOYRIDE.KANBAN.STEP3.TITLE')\r\n                            text: [\r\n                                @translate.instant('JOYRIDE.KANBAN.STEP3.TEXT1'),\r\n                                @translate.instant('JOYRIDE.KANBAN.STEP3.TEXT2'),\r\n                            ]\r\n                        }\r\n                    })\r\n\r\n              return steps\r\n      }\r\n\r\n    get: (name) ->\r\n        joyRides = @.getConfig()\r\n        joyRide = joyRides[name].call(this)\r\n\r\n        return _.map joyRide, (item) ->\r\n            html = \"\"\r\n\r\n            if item.joyride.title\r\n                html += \"<h3>#{item.joyride.title}</h3>\"\r\n\r\n            if _.isArray(item.joyride.text)\r\n                _.forEach item.joyride.text, (text) ->\r\n                    html += \"<p>#{text}</p>\"\r\n            else\r\n                html += \"<p>#{item.joyride.text}</p>\"\r\n\r\n            item.intro = html\r\n\r\n            return item\r\n\r\nangular.module(\"taigaComponents\").service(\"tgJoyRideService\", JoyRideService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/kanban-board-zoom/kanban-board-zoom.directive.coffee\r\n###\r\n\r\nKanbanBoardZoomDirective = (storage, projectService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.zoomIndex = storage.get(\"kanban_zoom\") or 2\r\n        scope.levels = 5\r\n\r\n        zooms = [\r\n            [\"ref\"],\r\n            [\"subject\"],\r\n            [\"owner\", \"tags\", \"extra_info\", \"unfold\"],\r\n            [\"attachments\"],\r\n            [\"related_tasks\", \"empty_extra_info\"]\r\n        ]\r\n\r\n        getZoomView = (zoomIndex = 0) ->\r\n            if storage.get(\"kanban_zoom\") != zoomIndex\r\n                storage.set(\"kanban_zoom\", zoomIndex)\r\n\r\n            return _.reduce zooms, (result, value, key) ->\r\n                if key <= zoomIndex\r\n                    result = result.concat(value)\r\n\r\n                return result\r\n\r\n        scope.$watch 'zoomIndex', (zoomLevel) ->\r\n            zoom = getZoomView(zoomLevel)\r\n            scope.onZoomChange({zoomLevel: zoomLevel, zoom: zoom})\r\n\r\n        unwatch = scope.$watch () ->\r\n            return projectService.project\r\n        , (project) ->\r\n            if project\r\n                if project.get('my_permissions').indexOf(\"view_tasks\") == -1\r\n                    scope.levels = 4\r\n                unwatch()\r\n\r\n    return {\r\n        scope: {\r\n            onZoomChange: \"&\"\r\n        },\r\n        template: \"\"\"\r\n        <tg-board-zoom\r\n            class=\"board-zoom\"\r\n            value=\"zoomIndex\"\r\n            levels=\"levels\"\r\n        ></tg-board-zoom>\r\n        \"\"\",\r\n        link: link\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgKanbanBoardZoom\", [\"$tgStorage\", \"tgProjectService\", KanbanBoardZoomDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/live-announcement/live-announcement.directive.coffee\r\n###\r\n\r\n\r\nLiveAnnouncementDirective = (liveAnnouncementService) ->\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        restrict: \"AE\",\r\n        scope: {},\r\n        controllerAs: 'vm',\r\n        controller: () ->\r\n            this.close = () ->\r\n                liveAnnouncementService.open = false\r\n\r\n            Object.defineProperties(this, {\r\n                open: {\r\n                    get: () -> return liveAnnouncementService.open\r\n                },\r\n                title: {\r\n                    get: () -> return liveAnnouncementService.title\r\n                },\r\n                desc: {\r\n                    get: () -> return liveAnnouncementService.desc\r\n                }\r\n            })\r\n        link: link,\r\n        templateUrl: \"components/live-announcement/live-announcement.html\"\r\n    }\r\n\r\nLiveAnnouncementDirective.$inject = [\r\n    \"tgLiveAnnouncementService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgLiveAnnouncement\", LiveAnnouncementDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/live-announcement/live-announcement.service.coffee\r\n###\r\n\r\nclass LiveAnnouncementService extends taiga.Service\r\n    constructor: () ->\r\n        @.open = false\r\n        @.title = \"\"\r\n        @.desc = \"\"\r\n\r\n    show: (title, desc) ->\r\n        @.open = true\r\n        @.title = title\r\n        @.desc = desc\r\n\r\nangular.module(\"taigaComponents\").service(\"tgLiveAnnouncementService\", LiveAnnouncementService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\nclass MoveToSprintLightboxController\r\n    @.$inject = [\r\n        '$rootScope'\r\n        '$scope'\r\n        '$tgResources'\r\n        'tgProjectService'\r\n        '$translate'\r\n        'lightboxService'\r\n        '$tgConfirm'\r\n    ]\r\n\r\n    constructor: (\r\n        @rootScope\r\n        @scope\r\n        @rs\r\n        @projectService\r\n        @translate\r\n        @lightboxService\r\n        @confirm\r\n    ) ->\r\n        @.projectId = @projectService.project.get('id')\r\n        @.loading = false\r\n        @.someSelected = false\r\n        @.selectedSprintId = null\r\n        @.typesSelected = {\r\n            uss: false\r\n            tasks: false\r\n            issues: false\r\n        }\r\n        @.itemsToMove = {}\r\n        @._loadSprints()\r\n\r\n        @scope.$watch \"vm.openItems\", (openItems) =>\r\n            return if !openItems\r\n            @._init(openItems)\r\n\r\n    _init: (openItems) ->\r\n        @.hasManyItemTypes = _.size(@.openItems) > 1\r\n\r\n        @.ussCount = parseInt(openItems.uss?.length)\r\n        @.updateSelected('uss', @.ussCount > 0)\r\n\r\n        @.tasksCount = parseInt(openItems.tasks?.length)\r\n        @.updateSelected('tasks', @.tasksCount > 0)\r\n\r\n        @.issuesCount = parseInt(openItems.issues?.length)\r\n        @.updateSelected('issues', @.issuesCount > 0)\r\n\r\n    _loadSprints: () ->\r\n        @rs.sprints.list(@.projectId, {closed: false}).then (data) =>\r\n            @.sprints = _.filter(data.milestones, (x) => x.id != @.sprint.id)\r\n\r\n    updateSelected: (itemType, value) ->\r\n        @.typesSelected[itemType] = value\r\n        @.someSelected = _.some(@.typesSelected)\r\n\r\n        if value is true\r\n            @.itemsToMove[itemType] = @.openItems[itemType]\r\n        else if @.itemsToMove[itemType]\r\n            delete @.itemsToMove[itemType]\r\n\r\n    submit: () ->\r\n        itemsNotMoved = {}\r\n        _.map @.openItems, (itemsList, itemsType) =>\r\n            if not @.itemsToMove[itemsType]\r\n                itemsNotMoved[itemsType] = true\r\n        \r\n        @.loading = true\r\n\r\n        @moveItems().then () =>\r\n            @rootScope.$broadcast(\"taskboard:items:move\", @.typesSelected)\r\n            @lightboxService.closeAll()\r\n            @.loading = false\r\n            if _.size(itemsNotMoved) > 0\r\n                @.displayWarning(itemsNotMoved)\r\n\r\n    moveItems: () ->\r\n        promises = []\r\n        if  @.itemsToMove.uss\r\n            promises.push(\r\n                @rs.userstories.bulkUpdateMilestone(\r\n                    @.projectId\r\n                    @.selectedSprintId\r\n                    @.itemsToMove.uss\r\n                )\r\n            )\r\n        if  @.itemsToMove.tasks\r\n            promises.push(\r\n                @rs.tasks.bulkUpdateMilestone(\r\n                    @.projectId\r\n                    @.selectedSprintId\r\n                    @.itemsToMove.tasks\r\n                )\r\n            )\r\n        if  @.itemsToMove.issues\r\n            promises.push(\r\n                @rs.issues.bulkUpdateMilestone(\r\n                    @.projectId\r\n                    @.selectedSprintId\r\n                    @.itemsToMove.issues\r\n                )\r\n            )\r\n        return Promise.all(promises)\r\n\r\n    displayWarning: (itemsNotMoved) ->\r\n        action = @translate.instant('COMMON.I_GET_IT')\r\n        if _.size(itemsNotMoved) == 1 and itemsNotMoved.issues is true\r\n            title = @translate.instant('TASKBOARD.MOVE_TO_SPRINT.WARNING_ISSUES_NOT_MOVED_TITLE')\r\n            desc = @translate.instant('TASKBOARD.MOVE_TO_SPRINT.WARNING_ISSUES_NOT_MOVED')\r\n        else\r\n            totalItemsMoved = 0\r\n            _.map @.itemsToMove, (itemsList, itemsType) -> totalItemsMoved += itemsList.length\r\n            title = @translate.instant(\r\n                'TASKBOARD.MOVE_TO_SPRINT.WARNING_SPRINT_STILL_OPEN_TITLE'\r\n                { total: totalItemsMoved }\r\n                'messageformat'\r\n            )\r\n            desc = @translate.instant(\r\n                'TASKBOARD.MOVE_TO_SPRINT.WARNING_SPRINT_STILL_OPEN'\r\n                { sprintName: @.sprint?.name }\r\n            )\r\n        @confirm.success(title, desc, null, action)\r\n\r\nmodule.controller(\"MoveToSprintLbCtrl\", MoveToSprintLightboxController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\nmoveToSprintLightboxDirective = (lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        lightboxService.open(el)\r\n\r\n    return {\r\n        scope: {}\r\n        bindToController: {\r\n            openItems: \"=\"\r\n            sprint: \"=\"\r\n        },\r\n        templateUrl: \"components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.html\"\r\n        controller: \"MoveToSprintLbCtrl\"\r\n        controllerAs: \"vm\"\r\n        link: link\r\n    }\r\n\r\nmoveToSprintLightboxDirective.$inject = [\r\n    \"lightboxService\"\r\n]\r\n\r\nmodule.directive(\"tgLbMoveToSprint\", moveToSprintLightboxDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/move-to-sprint/move-to-sprint-controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass MoveToSprintController\r\n    @.$inject = [\r\n      '$scope'\r\n      'tgLightboxFactory'\r\n      'tgProjectService'\r\n    ]\r\n\r\n    constructor: (\r\n        @scope\r\n        @lightboxFactory\r\n        @projectService\r\n    ) ->\r\n        @.permissions = @projectService.project.get('my_permissions')\r\n        @.hasOpenItems = false\r\n        @.disabled = false\r\n        @.openItems = {\r\n            uss: []\r\n            tasks: []\r\n            issues: []\r\n        }\r\n\r\n        @scope.$watch \"vm.uss\", () => @getOpenUss()\r\n        @scope.$watch \"vm.unnasignedTasks\", () => @getOpenStorylessTasks()\r\n        @scope.$watch \"vm.issues\", () => @getOpenIssues()\r\n\r\n    checkOpenItems: () ->\r\n        return _.some(Object.keys(@.openItems), (x) => @.openItems[x].length > 0)\r\n\r\n    openLightbox: () ->\r\n        if @.disabled is not true && @.hasOpenItems\r\n            openItems = {}\r\n            _.map @.openItems, (itemsList, itemsType) ->\r\n                if itemsList.length\r\n                    openItems[itemsType] = itemsList\r\n  \r\n            @lightboxFactory.create('tg-lb-move-to-sprint', {\r\n                \"class\": \"lightbox lightbox-move-to-sprint\"\r\n                \"sprint\": \"sprint\"\r\n                \"open-items\": \"openItems\"\r\n            }, {\r\n                sprint: @.sprint\r\n                openItems: openItems\r\n            })\r\n\r\n    getOpenUss: () ->\r\n        return if !@.uss or @.permissions.indexOf(\"modify_us\") == -1\r\n        @.openItems.uss = []\r\n        @.uss.map (us) =>\r\n            if us.is_closed is false\r\n                @.openItems.uss.push({\r\n                    us_id: us.id\r\n                    order: us.sprint_order\r\n                })\r\n        @.hasOpenItems = @checkOpenItems()\r\n\r\n    getOpenStorylessTasks: () ->\r\n        return if !@.unnasignedTasks or @.permissions.indexOf(\"modify_task\") == -1\r\n        @.openItems.tasks = []\r\n        @.unnasignedTasks.map (column) => column.map (task) =>\r\n            if task.get('model').get('is_closed') is false\r\n                @.openItems.tasks.push({\r\n                    task_id: task.get('model').get('id')\r\n                    order: task.get('model').get('taskboard_order')\r\n                })\r\n        @.hasOpenItems = @checkOpenItems()\r\n\r\n    getOpenIssues: () ->\r\n        return if !@.issues or @.permissions.indexOf(\"modify_issue\") == -1\r\n        @.openItems.issues = []\r\n        @.issues.map (issue) =>\r\n            if issue.get('status').get('is_closed') is false\r\n                @.openItems.issues.push({ issue_id: issue.get('id') })\r\n        @.hasOpenItems = @checkOpenItems()\r\n\r\nangular.module('taigaComponents').controller('MoveToSprintCtrl', MoveToSprintController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/move-to-sprint/move-to-sprint.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\nmoveToSprintDirective = (taskboardTasksService) ->\r\n    return {\r\n        controller: \"MoveToSprintCtrl\"\r\n        controllerAs: \"vm\"\r\n        bindToController: true\r\n        templateUrl: 'components/move-to-sprint/move-to-sprint.html'\r\n        scope:  {\r\n            sprint: '='\r\n            uss: '='\r\n            unnasignedTasks: '='\r\n            issues: '='\r\n            disabled: '='\r\n        }\r\n    }\r\n\r\nmoveToSprintDirective.$inject = [\r\n    'tgTaskboardTasks'\r\n]\r\n\r\nmodule.directive('tgMoveToSprint', [moveToSprintDirective])","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/project-logo-big-src/project-logo-big-src.directive.coffee\r\n###\r\n\r\nProjectLogoBigSrcDirective = (projectLogoService) ->\r\n    link = (scope, el, attrs) ->\r\n        scope.$watch 'project', (project) ->\r\n            project = Immutable.fromJS(project) # Necesary for old code\r\n\r\n            return if not project\r\n\r\n            projectLogo = project.get('logo_big_url')\r\n\r\n            if projectLogo\r\n                el.attr('src', projectLogo)\r\n                el.css('background', \"\")\r\n            else\r\n                logo = projectLogoService.getDefaultProjectLogo(project.get('slug'), project.get('id'))\r\n                el.attr('src', logo.src)\r\n                el.css('background', logo.color)\r\n\r\n    return {\r\n        link: link\r\n        scope: {\r\n             project: \"=tgProjectLogoBigSrc\"\r\n        }\r\n    }\r\n\r\nProjectLogoBigSrcDirective.$inject = [\r\n    \"tgProjectLogoService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgProjectLogoBigSrc\", ProjectLogoBigSrcDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/project-logo-small-src/project-logo-small-src.directive.coffee\r\n###\r\n\r\nProjectLogoSmallSrcDirective = (projectLogoService) ->\r\n    link = (scope, el, attrs) ->\r\n        scope.$watch 'project', (project) ->\r\n            project = Immutable.fromJS(project) # Necesary for old code\r\n\r\n            return if not project\r\n\r\n            projectLogo = project.get('logo_small_url')\r\n\r\n            if projectLogo\r\n                el.attr('src', projectLogo)\r\n                el.css('background', \"\")\r\n            else\r\n                logo = projectLogoService.getDefaultProjectLogo(project.get('slug'), project.get('id'))\r\n                el.attr('src', logo.src)\r\n                el.css('background', logo.color)\r\n\r\n    return {\r\n        link: link\r\n        scope: {\r\n             project: \"=tgProjectLogoSmallSrc\"\r\n        }\r\n    }\r\n\r\nProjectLogoSmallSrcDirective.$inject = [\r\n    \"tgProjectLogoService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgProjectLogoSmallSrc\", ProjectLogoSmallSrcDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/project-menu/project-menu.controller.coffee\r\n###\r\n\r\nclass ProjectMenuController\r\n    @.$inject = [\r\n        \"tgProjectService\",\r\n        \"tgLightboxFactory\"\r\n    ]\r\n\r\n    constructor: (@projectService, @lightboxFactory) ->\r\n        @.project = null\r\n        @.menu = Immutable.Map()\r\n\r\n    show: () ->\r\n        @.project = @projectService.project\r\n        @.sprints = @.project.get('milestones')?.toJS()\r\n        @.active = @._getActiveSection()\r\n\r\n        @._setVideoConference()\r\n        @._setMenuPermissions()\r\n\r\n    hide: () ->\r\n        @.project = null\r\n        @.menu = {}\r\n\r\n    search: () ->\r\n        @lightboxFactory.create(\"tg-search-box\", {\r\n            \"class\": \"lightbox lightbox-search\"\r\n        })\r\n\r\n    _setVideoConference: () ->\r\n        videoconferenceUrl = @._videoConferenceUrl()\r\n\r\n        if videoconferenceUrl\r\n            @.project = @.project.set(\"videoconferenceUrl\", videoconferenceUrl)\r\n\r\n    _setMenuPermissions: () ->\r\n        @.menu = Immutable.Map({\r\n            epics: false,\r\n            backlog: false,\r\n            kanban: false,\r\n            issues: false,\r\n            wiki: false\r\n        })\r\n\r\n        if @.project.get(\"is_epics_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_epics\") != -1\r\n            @.menu = @.menu.set(\"epics\", true)\r\n\r\n        if @.project.get(\"is_backlog_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_us\") != -1\r\n            @.menu = @.menu.set(\"backlog\", true)\r\n\r\n        if @.project.get(\"is_kanban_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_us\") != -1\r\n            @.menu = @.menu.set(\"kanban\", true)\r\n\r\n        if @.project.get(\"is_issues_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_issues\") != -1\r\n            @.menu = @.menu.set(\"issues\", true)\r\n\r\n        if @.project.get(\"is_wiki_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_wiki_pages\") != -1\r\n            @.menu = @.menu.set(\"wiki\", true)\r\n\r\n    _getActiveSection: () ->\r\n        sectionName = @projectService.section\r\n\r\n        sectionsBreadcrumb = @projectService.sectionsBreadcrumb\r\n\r\n        indexBacklog = sectionsBreadcrumb.lastIndexOf(\"backlog\")\r\n        indexKanban = sectionsBreadcrumb.lastIndexOf(\"kanban\")\r\n\r\n        if indexBacklog != -1 || indexKanban != -1\r\n            if indexKanban == -1 || indexBacklog > indexKanban\r\n                oldSectionName = \"backlog\"\r\n            else\r\n                oldSectionName = \"kanban\"\r\n\r\n        if  sectionName  == \"backlog-kanban\"\r\n            if oldSectionName in [\"backlog\", \"kanban\"]\r\n                sectionName = oldSectionName\r\n            else if @.project.get(\"is_backlog_activated\") && !@.project.get(\"is_kanban_activated\")\r\n                sectionName = \"backlog\"\r\n            else if !@.project.get(\"is_backlog_activated\") && @.project.get(\"is_kanban_activated\")\r\n                sectionName = \"kanban\"\r\n\r\n        return sectionName\r\n\r\n    _videoConferenceUrl: () ->\r\n        # Get base url\r\n        if @.project.get(\"videoconferences\") == \"appear-in\"\r\n            baseUrl = \"https://appear.in/\"\r\n        else if @.project.get(\"videoconferences\") == \"talky\"\r\n            baseUrl = \"https://talky.io/\"\r\n        else if @.project.get(\"videoconferences\") == \"jitsi\"\r\n            baseUrl = \"https://meet.jit.si/\"\r\n        else if @.project.get(\"videoconferences\") == \"custom\"\r\n            return @.project.get(\"videoconferences_extra_data\")\r\n        else\r\n            return \"\"\r\n\r\n        # Add prefix to the chat room name if exist\r\n        if @.project.get(\"videoconferences_extra_data\")\r\n            url = @.project.get(\"slug\") + \"-\" + taiga.slugify(@.project.get(\"videoconferences_extra_data\"))\r\n        else\r\n            url = @.project.get(\"slug\")\r\n\r\n        # Some special cases\r\n        if @.project.get(\"videoconferences\") == \"jitsi\"\r\n            url = url.replace(/-/g, \"\")\r\n\r\n        return baseUrl + url\r\n\r\nangular.module(\"taigaComponents\").controller(\"ProjectMenu\", ProjectMenuController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/project-menu/project-menu.directive.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nProjectMenuDirective = (projectService, lightboxFactory) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        projectChange = () ->\r\n            if projectService.project\r\n                ctrl.show()\r\n            else\r\n                ctrl.hide()\r\n\r\n        scope.$watch ( () ->\r\n            return projectService.project\r\n        ), projectChange\r\n\r\n        scope.vm.fixed = false\r\n        $(window).on \"scroll\", () ->\r\n            position = $(window).scrollTop()\r\n            if position > 100 && scope.vm.fixed == false\r\n                scope.vm.fixed = true\r\n                scope.$digest()\r\n            else if position < 100 && scope.vm.fixed == true\r\n                scope.vm.fixed = false\r\n                scope.$digest()\r\n\r\n    return {\r\n        scope: {},\r\n        controller: \"ProjectMenu\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/project-menu/project-menu.html\",\r\n        link: link\r\n    }\r\n\r\nProjectMenuDirective.$inject = [\r\n    \"tgProjectService\",\r\n    \"tgLightboxFactory\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgProjectMenu\", ProjectMenuDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/search-list/search-list.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\nnormalizeString = @.taiga.normalizeString\r\ngroupBy = @.taiga.groupBy\r\n\r\nsearchListDirective = ($translate) ->\r\n    link = (scope, el, attrs, model) ->\r\n        scope.templateUrl = \"components/search-list/search-list-#{scope.itemType}-choice.html\"\r\n        scope.currentSelected = null\r\n        filtering = false\r\n        avaliableItems = []\r\n        itemsById = {}\r\n\r\n        if scope.itemType == 'issue'\r\n            scope.milestonesById = groupBy(scope.project.milestones, (e) -> e.id)\r\n\r\n        if scope.filterClosed\r\n            scope.showClosed = false\r\n\r\n            if scope.itemType == 'sprint'\r\n                scope.textShowClosed = $translate.instant(\"BACKLOG.SPRINTS.ACTION_SHOW_CLOSED_SPRINTS\")\r\n                scope.textHideClosed = $translate.instant(\"BACKLOG.SPRINTS.ACTION_HIDE_CLOSED_SPRINTS\")\r\n\r\n        el.on \"click\", \".choice\", (event) ->\r\n            choiceId = parseInt($(event.currentTarget).data(\"choice-id\"))\r\n            value = if attrs.ngModel?.id != choiceId then itemsById[choiceId] else null\r\n            model.$setViewValue(value)\r\n            scope.currentSelected = value\r\n            scope.$apply()\r\n\r\n        isContainedIn = (needle, haystack) ->\r\n            return _.includes(parseString(haystack), parseString(needle))\r\n\r\n        parseString = (value) ->\r\n            if typeof value != 'string'\r\n                value = value.toString()\r\n            return normalizeString(value.toUpperCase())\r\n\r\n        resetSelected = () ->\r\n            scope.currentSelected = null\r\n            model.$setViewValue(null)\r\n\r\n        resetAll = () ->\r\n            resetSelected()\r\n            scope.searchText = ''\r\n            avaliableItems = angular.copy(scope.items)\r\n            itemsById = groupBy(avaliableItems, (x) -> x.id)\r\n\r\n\r\n        scope.isVisible = (item) ->\r\n            if !scope.filterClosed || scope.showClosed\r\n                return true\r\n            if (scope.itemType == 'sprint' && (item.closed || item.is_closed))\r\n                if (scope.currentSelected?.id == item.id)\r\n                    resetSelected()\r\n                return false\r\n            return true\r\n\r\n        scope.toggleShowClosed = (item) ->\r\n            scope.showClosed = !scope.showClosed\r\n\r\n        scope.filterItems = (searchText) ->\r\n            scope.filtering = true\r\n            scope.items = _.filter(avaliableItems, (item) ->\r\n                itemAttrs = item.getAttrs()\r\n                if Array.isArray(scope.filterBy)\r\n                    _.some(scope.filterBy, (attr) -> isContainedIn(searchText, itemAttrs[attr]))\r\n                else\r\n                    isContainedIn(searchText, itemAttrs[scope.filterBy])\r\n            )\r\n            if !_.find(scope.items, scope.currentSelected)\r\n                resetSelected()\r\n\r\n        scope.$watch 'items', (items) ->\r\n            if !scope.filtering && items\r\n                resetAll()\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl: \"components/search-list/search-list.html\",\r\n        require: \"ngModel\",\r\n        scope: {\r\n            label: '@',\r\n            placeholder: '@',\r\n            project: '=',\r\n            filterBy: '=',\r\n            items: '=',\r\n            itemType: '@',\r\n            filterClosed: '=',\r\n            itemDisabled: '='\r\n        }\r\n    }\r\n\r\nmodule.directive('tgSearchList', ['$translate', searchListDirective])\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nTagOptionDirective = () ->\r\n    select = (selected) ->\r\n        selected.addClass('selected')\r\n\r\n        selectedPosition = selected.position().top + selected.outerHeight()\r\n        containerHeight = selected.parent().outerHeight()\r\n\r\n        if selectedPosition > containerHeight\r\n            diff = selectedPosition - containerHeight\r\n            selected.parent().scrollTop(selected.parent().scrollTop() + diff)\r\n        else if selected.position().top < 0\r\n            selected.parent().scrollTop(selected.parent().scrollTop() + selected.position().top)\r\n\r\n    dispatch = (el, code, scope) ->\r\n        activeElement = el.find(\".selected\")\r\n\r\n        # Key: down\r\n        if code == 40\r\n            if not activeElement.length\r\n                select(el.find('li:first'))\r\n            else\r\n                next = activeElement.next('li')\r\n                if next.length\r\n                    activeElement.removeClass('selected')\r\n                    select(next)\r\n        # Key: up\r\n        else if code == 38\r\n            if not activeElement.length\r\n                select(el.find('li:last'))\r\n            else\r\n                prev = activeElement.prev('li')\r\n\r\n                if prev.length\r\n                    activeElement.removeClass('selected')\r\n                    select(prev)\r\n\r\n    stop = ->\r\n        $(document).off(\".tags-keyboard-navigation\")\r\n\r\n    link = (scope, el) ->\r\n        stop()\r\n\r\n        $(el).parent().on \"keydown.tags-keyboard-navigation\", (event) =>\r\n            code = if event.keyCode then event.keyCode else event.which\r\n\r\n            if code == 40 || code == 38\r\n                event.preventDefault()\r\n\r\n                dispatch(el, code, scope)\r\n\r\n        scope.$on(\"$destroy\", stop)\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"components/tags/tag-dropdown/tag-dropdown.html\",\r\n        scope: {\r\n            onSelectTag: \"&\",\r\n            colorArray: \"=\",\r\n            tag: \"=\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgTagsDropdown\", TagOptionDirective)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.controller.coffee\r\n###\r\n\r\ntrim = @.taiga.trim\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nclass TagLineCommonController\r\n\r\n    @.$inject = [\r\n        \"tgTagLineService\"\r\n    ]\r\n\r\n    constructor: (@tagLineService) ->\r\n        @.disableColorSelection = false\r\n        @.newTag = {name: \"\", color: null}\r\n        @.colorArray = []\r\n        @.addTag = false\r\n\r\n    checkPermissions: () ->\r\n        return @tagLineService.checkPermissions(@.project.my_permissions, @.permissions)\r\n\r\n    _createColorsArray: (projectTagColors) ->\r\n        @.colorArray =  @tagLineService.createColorsArray(projectTagColors)\r\n\r\n    displayTagInput: () ->\r\n        @.addTag = true\r\n\r\n    addNewTag: (name, color) ->\r\n        @.newTag.name = \"\"\r\n        @.newTag.color = null\r\n\r\n        return if not name.length\r\n\r\n        if @.disableColorSelection\r\n            @.onAddTag({name: name, color: color}) if name.length\r\n        else\r\n            if @.project.tags_colors[name]\r\n                color = @.project.tags_colors[name]\r\n            @.onAddTag({name: name, color: color})\r\n\r\n    selectColor: (color) ->\r\n        @.newTag.color = color\r\n\r\nmodule.controller(\"TagLineCommonCtrl\", TagLineCommonController)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nTagLineCommonDirective = () ->\r\n    link = (scope, el, attr, ctrl) ->\r\n        if !_.isUndefined(attr.disableColorSelection)\r\n            ctrl.disableColorSelection = true\r\n\r\n        unwatch = scope.$watch \"vm.project\", (project) ->\r\n            return if !project || !Object.keys(project).length\r\n\r\n            unwatch()\r\n\r\n            if not ctrl.disableColorSelection\r\n                ctrl.colorArray = ctrl._createColorsArray(ctrl.project.tags_colors)\r\n\r\n        el.on \"keydown\", \".tag-input\", (event) ->\r\n            if event.keyCode == 27\r\n                ctrl.addTag = false\r\n\r\n                ctrl.newTag.name = \"\"\r\n                ctrl.newTag.color = \"\"\r\n\r\n                event.stopPropagation()\r\n            else if event.keyCode == 13\r\n                event.preventDefault()\r\n\r\n                if el.find('.tags-dropdown .selected').length\r\n                    tagName = $('.tags-dropdown .selected .tags-dropdown-name').text()\r\n                    ctrl.addNewTag(tagName, null)\r\n                else\r\n                    ctrl.addNewTag(ctrl.newTag.name, ctrl.newTag.color)\r\n\r\n            scope.$apply()\r\n\r\n    return {\r\n        link: link,\r\n        scope: {\r\n            permissions: \"@\",\r\n            loadingAddTag: \"=\",\r\n            loadingRemoveTag: \"=\",\r\n            tags: \"=\",\r\n            project: \"=\",\r\n            onAddTag: \"&\",\r\n            onDeleteTag: \"&\"\r\n        },\r\n        templateUrl:\"components/tags/tag-line-common/tag-line-common.html\",\r\n        controller: \"TagLineCommonCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true\r\n    }\r\n\r\nmodule.directive(\"tgTagLineCommon\", TagLineCommonDirective)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.controller.coffee\r\n###\r\n\r\ntrim = @.taiga.trim\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nclass TagLineController\r\n\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"$tgConfirm\",\r\n        \"$tgQueueModelTransformation\",\r\n    ]\r\n\r\n    constructor: (@rootScope, @confirm, @modelTransform) ->\r\n        @.loadingAddTag = false\r\n\r\n    onDeleteTag: (tag) ->\r\n        @.loadingRemoveTag = tag[0]\r\n\r\n        onDeleteTagSuccess = (item) =>\r\n            @rootScope.$broadcast(\"object:updated\")\r\n            @.loadingRemoveTag = false\r\n\r\n            return item\r\n\r\n        onDeleteTagError = () =>\r\n            @confirm.notify(\"error\")\r\n            @.loadingRemoveTag = false\r\n\r\n        tagName = trim(tag[0].toLowerCase())\r\n\r\n        transform = @modelTransform.save (item) ->\r\n            itemtags = _.clone(item.tags)\r\n\r\n            _.remove itemtags, (tag) -> tag[0] == tagName\r\n\r\n            item.tags = itemtags\r\n\r\n            return item\r\n\r\n        return transform.then(onDeleteTagSuccess, onDeleteTagError)\r\n\r\n    onAddTag: (tag, color) ->\r\n        @.loadingAddTag = true\r\n\r\n        onAddTagSuccess = (item) =>\r\n            @rootScope.$broadcast(\"object:updated\") #its a kind of magic.\r\n            @rootScope.$broadcast(\"tags:updated\")\r\n            @.addTag = false\r\n            @.loadingAddTag = false\r\n\r\n            return item\r\n\r\n        onAddTagError = () =>\r\n            @.loadingAddTag = false\r\n            @confirm.notify(\"error\")\r\n\r\n        transform = @modelTransform.save (item) =>\r\n            value = trim(tag.toLowerCase())\r\n\r\n            itemtags = _.clone(item.tags)\r\n\r\n            itemtags.push([tag , color])\r\n\r\n            item.tags = itemtags\r\n\r\n            return item\r\n\r\n        return transform.then(onAddTagSuccess, onAddTagError)\r\n\r\nmodule.controller(\"TagLineCtrl\", TagLineController)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nTagLineDirective = () ->\r\n    return {\r\n        scope: {\r\n            item: \"=\",\r\n            permissions: \"@\",\r\n            project: \"=\"\r\n        },\r\n        templateUrl:\"components/tags/tag-line-detail/tag-line-detail.html\",\r\n        controller: \"TagLineCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true\r\n    }\r\n\r\nmodule.directive(\"tgTagLine\", TagLineDirective)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.service.coffee\r\n###\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nclass TagLineService extends taiga.Service\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n\r\n    checkPermissions: (myPermissions, projectPermissions) ->\r\n        return _.includes(myPermissions, projectPermissions)\r\n\r\n    createColorsArray: (projectTagColors) ->\r\n        return _.map(projectTagColors, (index, value) ->\r\n            return [value, index]\r\n        )\r\n\r\nmodule.service(\"tgTagLineService\", TagLineService)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tag-line.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaCommon')\r\n\r\nTagDirective = () ->\r\n    return {\r\n        templateUrl:\"components/tags/tag/tag.html\",\r\n        scope: {\r\n            tag: \"<\",\r\n            loadingRemoveTag: \"<\",\r\n            onDeleteTag: \"&\",\r\n            hasPermissions: \"@\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgTag\", TagDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/taskboard-zoom/taskboard-zoom.directive.coffee\r\n###\r\n\r\nTaskboardZoomDirective = (storage) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.zoomIndex = storage.get(\"taskboard_zoom\") or 2\r\n\r\n        scope.levels = 4\r\n\r\n        zooms = [\r\n            [\"ref\"],\r\n            [\"subject\"],\r\n            [\"owner\", \"tags\", \"extra_info\", \"unfold\"],\r\n            [\"attachments\", \"empty_extra_info\"],\r\n            [\"related_tasks\"]\r\n        ]\r\n\r\n        getZoomView = (zoomIndex = 0) ->\r\n            if storage.get(\"taskboard_zoom\") != zoomIndex\r\n                storage.set(\"taskboard_zoom\", zoomIndex)\r\n\r\n            return _.reduce zooms, (result, value, key) ->\r\n                if key <= zoomIndex\r\n                    result = result.concat(value)\r\n\r\n                return result\r\n\r\n        scope.$watch 'zoomIndex', (zoomLevel) ->\r\n            zoom = getZoomView(zoomLevel)\r\n            scope.onZoomChange({zoomLevel: zoomLevel, zoom: zoom})\r\n\r\n    return {\r\n        scope: {\r\n            onZoomChange: \"&\"\r\n        },\r\n        template: \"\"\"\r\n        <tg-board-zoom\r\n            levels=\"levels\"\r\n            class=\"board-zoom\"\r\n            value=\"zoomIndex\"\r\n        ></tg-board-zoom>\r\n        \"\"\",\r\n        link: link\r\n    }\r\n\r\nangular.module('taigaComponents').directive(\"tgTaskboardZoom\", [\"$tgStorage\", TaskboardZoomDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: tasks-sortable.directive.coffee\r\n###\r\n\r\nTasksSortableDirective = ($parse, projectService) ->\r\n    link = (scope, el, attrs) ->\r\n        return if not projectService.hasPermission(\"modify_task\")\r\n\r\n        callback = $parse(attrs.tgTasksSortable)\r\n\r\n        drake = dragula([el[0]], {\r\n            copySortSource: false\r\n            copy: false\r\n            mirrorContainer: el[0]\r\n            moves: (item) ->\r\n                return $(item).is('div.single-related-task.js-related-task')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            itemEl = $(item)\r\n\r\n            task = itemEl.scope().task\r\n            newIndex = itemEl.index()\r\n\r\n            scope.$apply () ->\r\n                callback(scope, {task: task, newIndex: newIndex})\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n        scope.$on \"$destroy\", ->\r\n            el.off()\r\n            drake.destroy()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nTasksSortableDirective.$inject = [\r\n    \"$parse\",\r\n    \"tgProjectService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgTasksSortable\", TasksSortableDirective)","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/terms-announcement/terms-announcement.directive.coffee\r\n###\r\n\r\n\r\nTermsAnnouncementDirective = (TermsAnnouncementService, $repo, $auth, $config, $model) ->\r\n    link = (scope, el, attrs) ->\r\n        scope.privacyPolicyUrl = $config.get(\"privacyPolicyUrl\")\r\n        scope.termsOfServiceUrl = $config.get(\"termsOfServiceUrl\")\r\n        scope.GDPRUrl = $config.get(\"GDPRUrl\")\r\n\r\n    return {\r\n        restrict: \"AE\",\r\n        scope: {},\r\n        controllerAs: 'vm',\r\n        controller: () ->\r\n            this.close = () ->\r\n                TermsAnnouncementService.open = false\r\n                user = $auth.getUser()\r\n\r\n                # We need to force initialization of rootscope user if localstorage user\r\n                # doesn't have the 'read_new_terms' key\r\n                if user.read_new_terms == undefined\r\n                    userData = user.getAttrs()\r\n                    userData.read_new_terms = false\r\n                    user = $model.make_model(\"users\", userData)\r\n\r\n                user.read_new_terms = true\r\n\r\n                onSuccess = (data) ->\r\n                    $auth.setUser(data)\r\n\r\n                $repo.save(user).then(onSuccess)\r\n\r\n            Object.defineProperties(this, {\r\n                open: {\r\n                    get: () -> return TermsAnnouncementService.open\r\n                }\r\n            })\r\n        link: link,\r\n        templateUrl: \"components/terms-announcement/terms-announcement.html\"\r\n    }\r\n\r\nTermsAnnouncementDirective.$inject = [\r\n    \"tgTermsAnnouncementService\",\r\n    \"$tgRepo\",\r\n    \"$tgAuth\",\r\n    \"$tgConfig\",\r\n    \"$tgModel\"\r\n]\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgTermsAnnouncement\", TermsAnnouncementDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/terms-announcement/terms-announcement.service.coffee\r\n###\r\n\r\nclass TermsAnnouncementService extends taiga.Service\r\n    constructor: () ->\r\n        @.open = false\r\n\r\n    show: () ->\r\n        @.open = true\r\n\r\nangular.module(\"taigaComponents\").service(\"tgTermsAnnouncementService\", TermsAnnouncementService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.directive.coffee\r\n###\r\n\r\n\r\nTermsOfServiceAndPrivacyPolicyNoticeDirective = ($config) ->\r\n    link = (scope, el, attrs) ->\r\n        scope.privacyPolicyUrl = $config.get(\"privacyPolicyUrl\")\r\n        scope.termsOfServiceUrl = $config.get(\"termsOfServiceUrl\")\r\n        scope.target = false\r\n\r\n        if !scope.privacyPolicyUrl || !scope.termsOfServiceUrl\r\n            scope.target = true\r\n\r\n        el.on \"change\", \"input[name='accepted_terms']\", (event) ->\r\n            target = angular.element(event.currentTarget)\r\n            scope.target = target.is(\":checked\")\r\n            scope.$apply()\r\n\r\n    return {\r\n        restrict: \"AE\",\r\n        link: link,\r\n        scope: {\r\n            target: \"=\"\r\n        }\r\n        templateUrl: \"components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.html\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgTermsOfServiceAndPrivacyPolicyNotice\", [\r\n        \"$tgConfig\",\r\n        TermsOfServiceAndPrivacyPolicyNoticeDirective\r\n    ])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/tips/tips.directive.coffee\r\n###\r\n\r\ntimeout = @.taiga.timeout\r\n\r\nmodule = angular.module(\"taigaComponents\")\r\n\r\ntipsDirective = (tgLoader, $translate) ->\r\n    tips = [\r\n      { contentType: \"icon\", icon: \"icon-project\", message: \"PROJECTS_ORDER\"}\r\n      { contentType: \"icon\", icon: \"icon-upvote\", message: \"VOTING\"}\r\n      { contentType: \"icon\", icon: \"icon-attach\", message: \"ISSUES_TO_SPRINT\"}\r\n      { contentType: \"icon\", icon: \"icon-clock\", message: \"DUE_DATE\"}\r\n      { contentType: \"icon\", icon: \"icon-iocaine\", message: \"IOCAIN\"}\r\n      { contentType: \"icon\", icon: \"icon-blocked-project\", message: \"BLOCKED\"}\r\n      { contentType: \"icon\", icon: \"icon-promote\", message: \"PROMOTE\"}\r\n      { contentType: \"icon\", icon: \"icon-bulk\", message: \"BULK\"}\r\n      { contentType: \"range\", message: \"ZOOM\"}\r\n      { contentType: \"icon\", icon: \"icon-settings\", message: \"CUSTOM_FIELDS\"}\r\n      { contentType: \"arrows\", message: \"SLIDE_ARROWS\"}\r\n    ]\r\n\r\n    randomInt = (size) ->\r\n        return Math.floor(Math.random() * size) + 1\r\n\r\n    link = (scope, el, attrs) ->\r\n        scope.tipLoaded = false\r\n        waitingTimeout = null\r\n\r\n        tgLoader.onStart () ->\r\n            waitingTimeout = timeout 1000, ->\r\n                loadTip()\r\n\r\n        tgLoader.onEnd () ->\r\n            clearTimeout(waitingTimeout)\r\n            scope.tipLoaded = false\r\n\r\n        loadTip = () ->\r\n            scope.tipLoaded = true\r\n            tip = tips[randomInt(tips.length - 1)]\r\n            scope.tip = {\r\n                contentType: tip.contentType\r\n                message: \"TIPS.TIP_#{tip.message}\"\r\n                icon: tip.icon\r\n                color: \"tip-color-#{randomInt(5)}\"\r\n            }\r\n\r\n    return {\r\n        link: link,\r\n        scope: true,\r\n        templateUrl: \"components/tips/tip.html\",\r\n    }\r\n\r\nmodule.directive('tgTips', ['tgLoader', '$translate', tipsDirective])","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/tribe-button/tribe-button.directive.coffee\r\n###\r\n\r\nTribeButtonDirective = (configService, locationService) ->\r\n    link = (scope, el, attrs) ->\r\n\r\n        scope.vm = {}\r\n        scope.vm.tribeHost = configService.config.tribeHost\r\n        scope.vm.url = \"#{locationService.protocol()}://#{locationService.host()}\"\r\n        if (locationService.protocol() == \"http\" and locationService.port() != 80)\r\n            scope.vm.url = \"#{scope.vm.url}:#{locationService.port()}\"\r\n        else if (locationService.protocol() == \"https\" and locationService.port() != 443)\r\n            scope.vm.url = \"#{scope.vm.url}:#{locationService.port()}\"\r\n\r\n    return {\r\n        scope: {usId: \"=\", projectSlug: \"=\"}\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/tribe-button/tribe-button.html\",\r\n        link: link\r\n    }\r\n\r\nTribeButtonDirective.$inject = [\r\n    \"$tgConfig\", \"$tgLocation\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgTribeButton\", TribeButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/tribe-button/tribe-linked.directive.coffee\r\n###\r\n\r\nTribeLinkedDirective = (configService) ->\r\n    link = (scope, el, attrs) ->\r\n\r\n        scope.vm = {}\r\n\r\n        scope.vm.tribeHost = configService.config.tribeHost\r\n\r\n        scope.vm.show = () ->\r\n            scope.vm.open = true\r\n\r\n        scope.vm.hide = (event) ->\r\n            scope.vm.open = false\r\n\r\n    directive = {\r\n        templateUrl: \"components/tribe-button/tribe-linked.html\",\r\n        scope: {\r\n            gigTitle: \"=\",\r\n            gigId: \"=\"\r\n        },\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nTribeLinkedDirective.$inject = [\r\n    \"$tgConfig\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgTribeLinked\", TribeLinkedDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/vote-button/vote-button.controller.coffee\r\n###\r\n\r\nclass VoteButtonController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        @.user = @currentUserService.getUser()\r\n        @.isMouseOver = false\r\n        @.loading = false\r\n\r\n    showTextWhenMouseIsOver: ->\r\n        @.isMouseOver = true\r\n\r\n    showTextWhenMouseIsLeave: ->\r\n        @.isMouseOver = false\r\n\r\n    toggleVote: ->\r\n        @.loading = true\r\n\r\n        if not @.item.is_voter\r\n            promise = @._upvote()\r\n        else\r\n            promise = @._downvote()\r\n\r\n        promise.finally () => @.loading = false\r\n\r\n        return promise\r\n\r\n    _upvote: ->\r\n        @.onUpvote().then =>\r\n            @.showTextWhenMouseIsLeave()\r\n\r\n    _downvote: ->\r\n        @.onDownvote()\r\n\r\nangular.module(\"taigaComponents\").controller(\"VoteButton\", VoteButtonController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/vote-button/vote-button.directive.coffee\r\n###\r\n\r\nVoteButtonDirective = ->\r\n    return {\r\n        scope: {}\r\n        controller: \"VoteButton\",\r\n        bindToController: {\r\n            item: \"=\",\r\n            onUpvote: \"=\",\r\n            onDownvote: \"=\"\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"components/vote-button/vote-button.html\",\r\n    }\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgVoteButton\", VoteButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/watch-button/watch-button.controller.coffee\r\n###\r\n\r\nclass WatchButtonController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @rootScope) ->\r\n        @.user = @currentUserService.getUser()\r\n        @.isMouseOver = false\r\n        @.loading = false\r\n\r\n    showTextWhenMouseIsOver: ->\r\n        @.isMouseOver = true\r\n\r\n    showTextWhenMouseIsLeave: ->\r\n        @.isMouseOver = false\r\n\r\n    openWatchers: ->\r\n        @rootScope.$broadcast(\"watcher:add\", @.item)\r\n\r\n    getPerms: ->\r\n        return \"\" if !@.item\r\n\r\n        name = @.item._name\r\n\r\n        perms = {\r\n            userstories: 'modify_us',\r\n            issues: 'modify_issue',\r\n            tasks: 'modify_task',\r\n            epics: 'modify_epic'\r\n        }\r\n\r\n        return perms[name]\r\n\r\n    toggleWatch: ->\r\n        @.loading = true\r\n\r\n        if not @.item.is_watcher\r\n            promise = @._watch()\r\n        else\r\n            promise = @._unwatch()\r\n\r\n        promise.finally () => @.loading = false\r\n\r\n        return promise\r\n\r\n    _watch: ->\r\n        @.onWatch().then =>\r\n            @.showTextWhenMouseIsLeave()\r\n\r\n    _unwatch: ->\r\n        @.onUnwatch()\r\n\r\nangular.module(\"taigaComponents\").controller(\"WatchButton\", WatchButtonController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/watch-button/watch-button.directive.coffee\r\n###\r\n\r\nWatchButtonDirective = ->\r\n    return {\r\n        scope: {}\r\n        controller: \"WatchButton\",\r\n        bindToController: {\r\n            item: \"=\",\r\n            onWatch: \"=\",\r\n            onUnwatch: \"=\"\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: (item, attributes) ->\r\n            return \"components/watch-button/watch-button-\"+attributes.environment+\".html\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgWatchButton\", WatchButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/comment-edit-wysiwyg.directive.coffee\r\n###\r\n\r\nCommentEditWysiwyg = (attachmentsFullService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        types = {\r\n            epics: \"epic\",\r\n            userstories: \"us\",\r\n            issues: \"issue\",\r\n            tasks: \"task\"\r\n        }\r\n\r\n        uploadFile = (file, cb) ->\r\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.comment.comment.id, types[$scope.vm.comment.comment._name], file, true, true).then (result) ->\r\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']))\r\n\r\n        $scope.uploadFiles = (files, cb) ->\r\n            for file in files\r\n                uploadFile(file, cb)\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        template: \"\"\"\r\n            <div>\r\n                <tg-wysiwyg\r\n                    editonly\r\n                    required\r\n                    content='vm.comment.comment'\r\n                    on-save=\"vm.saveComment(text, cb)\"\r\n                    on-cancel=\"vm.onEditMode({commentId: vm.comment.id})\"\r\n                    on-upload-file='uploadFiles(files, cb)'>\r\n                </tg-wysiwyg>\r\n            </div>\r\n        \"\"\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgCommentEditWysiwyg\", [\"tgAttachmentsFullService\", CommentEditWysiwyg])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/comment-wysiwyg.directive.coffee\r\n###\r\n\r\nCommentWysiwyg = ($modelTransform, $rootscope, attachmentsFullService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.editableDescription = false\r\n\r\n        $scope.saveComment = (description, cb) ->\r\n            $scope.content = ''\r\n            $scope.vm.type.comment = description\r\n\r\n            transform = $modelTransform.save (item) -> return\r\n            transform.then ->\r\n                if $scope.vm.onAddComment\r\n                    $scope.vm.onAddComment()\r\n                $rootscope.$broadcast(\"object:updated\")\r\n            transform.finally(cb)\r\n\r\n        types = {\r\n            epics: \"epic\",\r\n            userstories: \"us\",\r\n            issues: \"issue\",\r\n            tasks: \"task\"\r\n        }\r\n\r\n        uploadFile = (file, cb) ->\r\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.type.id, types[$scope.vm.type._name], file, true, true).then (result) ->\r\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']))\r\n\r\n        $scope.onChange = (markdown) ->\r\n            $scope.vm.type.comment = markdown\r\n\r\n        $scope.uploadFiles = (files, cb) ->\r\n            for file in files\r\n                uploadFile(file, cb)\r\n\r\n        $scope.content = ''\r\n\r\n        $scope.$watch \"vm.type\", (value) ->\r\n            return if not value\r\n\r\n            $scope.storageKey = \"comment-\" + value.project + \"-\" + value.id + \"-\" + value._name\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        template: \"\"\"\r\n            <div>\r\n                <tg-wysiwyg\r\n                    required\r\n                    not-persist\r\n                    placeholder='{{\"COMMENTS.TYPE_NEW_COMMENT\" | translate}}'\r\n                    storage-key='storageKey'\r\n                    content='content'\r\n                    on-save='saveComment(text, cb)'\r\n                    on-upload-file='uploadFiles(files, cb)'>\r\n                </tg-wysiwyg>\r\n            </div>\r\n        \"\"\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgCommentWysiwyg\", [\r\n        \"$tgQueueModelTransformation\",\r\n        \"$rootScope\",\r\n        \"tgAttachmentsFullService\",\r\n        CommentWysiwyg])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/custom-field-edit-wysiwyg.directive.coffee\r\n###\r\n\r\nCustomFieldEditWysiwyg = (attachmentsFullService) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        types = {\r\n            userstories: \"us\",\r\n            issues: \"issue\",\r\n            tasks: \"task\"\r\n        }\r\n\r\n        uploadFile = (file, cb) ->\r\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.comment.comment.id, types[$scope.vm.comment.comment._name], file).then (result) ->\r\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']))\r\n\r\n        $scope.uploadFiles = (files, cb) ->\r\n            for file in files\r\n                uploadFile(file, cb)\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        template: \"\"\"\r\n            <div>\r\n                <tg-wysiwyg\r\n                    editonly\r\n                    content='customAttributeValue.value'\r\n                    on-save=\"saveCustomRichText(text, cb)\"\r\n                    on-cancel=\"cancelCustomRichText()\"\r\n                    on-upload-file='uploadFiles(files, cb)'>\r\n                </tg-wysiwyg>\r\n            </div>\r\n        \"\"\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgCustomFieldEditWysiwyg\", [\"tgAttachmentsFullService\", CustomFieldEditWysiwyg])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/item-wysiwyg.directive.coffee\r\n###\r\n\r\n# Used in details descriptions\r\nItemWysiwyg = ($modelTransform, $rootscope, $confirm, attachmentsFullService, $translate) ->\r\n    link = ($scope, $el, $attrs) ->\r\n        $scope.editableDescription = false\r\n        $scope.saveDescription = (description, cb) ->\r\n            transform = $modelTransform.save (item) ->\r\n                item.description = description\r\n\r\n                return item\r\n\r\n            transform.then ->\r\n                $confirm.notify(\"success\")\r\n                $rootscope.$broadcast(\"object:updated\")\r\n\r\n            transform.then null, ->\r\n                $confirm.notify(\"error\")\r\n\r\n            transform.finally(cb)\r\n\r\n        uploadFile = (file, cb) ->\r\n            return attachmentsFullService.addAttachment($scope.project.id, $scope.item.id, $attrs.type, file).then (result) ->\r\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']))\r\n\r\n        $scope.uploadFiles = (files, cb) ->\r\n            for file in files\r\n                uploadFile(file, cb)\r\n\r\n        $scope.$watch $attrs.model, (value) ->\r\n            return if not value\r\n            $scope.item = value\r\n            $scope.version = value.version\r\n            $scope.storageKey = $scope.project.id + \"-\" + value.id + \"-\" + $attrs.type\r\n\r\n        $scope.$watch 'project', (project) ->\r\n            return if !project\r\n\r\n            $scope.editableDescription = project.my_permissions.indexOf($attrs.requiredPerm) != -1\r\n\r\n    return {\r\n        scope: true,\r\n        link: link,\r\n        template: \"\"\"\r\n            <div>\r\n                <tg-wysiwyg\r\n                    ng-if=\"editableDescription\"\r\n                    placeholder='{{\"COMMON.DESCRIPTION.EMPTY\" | translate}}'\r\n                    version='version'\r\n                    storage-key='storageKey'\r\n                    content='item.description'\r\n                    on-save='saveDescription(text, cb)'\r\n                    on-upload-file='uploadFiles(files, cb)'>\r\n                </tg-wysiwyg>\r\n\r\n                <div\r\n                    class=\"wysiwyg\"\r\n                    ng-if=\"!editableDescription && item.description.length\"\r\n                    ng-bind-html=\"item.description | markdownToHTML\"></div>\r\n\r\n                <div\r\n                    class=\"wysiwyg\"\r\n                    ng-if=\"!editableDescription && !item.description.length\">\r\n                    {{'COMMON.DESCRIPTION.NO_DESCRIPTION' | translate}}\r\n                </div>\r\n            </div>\r\n        \"\"\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgItemWysiwyg\", [\r\n        \"$tgQueueModelTransformation\",\r\n        \"$rootScope\",\r\n        \"$tgConfirm\",\r\n        \"tgAttachmentsFullService\",\r\n        \"$translate\",\r\n        ItemWysiwyg])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/wysiwyg-code-hightlighter.service.coffee\r\n###\r\n\r\nclass WysiwygCodeHightlighterService\r\n    constructor: () ->\r\n        Prism.plugins.customClass.prefix('prism-')\r\n        Prism.plugins.customClass.map({})        \r\n        \r\n    getLanguages: () ->\r\n        return new Promise (resolve, reject) =>\r\n            if @.languages\r\n                resolve(@.languages)\r\n            else if @.loadPromise\r\n                @.loadPromise.then () => resolve(@.languages)\r\n            else\r\n                @.loadPromise = $.getJSON(\"/#{window._version}/prism/prism-languages.json\").then (_languages_) =>\r\n                    @.loadPromise = null\r\n                    @.languages = _.map _languages_, (it) ->\r\n                        it.url = \"/#{window._version}/prism/\" + it.file\r\n\r\n                        return it\r\n\r\n                    resolve(@.languages)\r\n\r\n    getLanguageInClassList: (classes) ->\r\n        lan = _.find @.languages, (it) ->\r\n            return !!_.find classes, (className) ->\r\n                return 'language-' + it.name == className\r\n\r\n        return if lan then lan.name else null\r\n\r\n    loadLanguage: (lan) ->\r\n        return new Promise (resolve) ->\r\n            if !Prism.languages[lan]\r\n                ljs.load(\"/#{window._version}/prism/prism-#{lan}.min.js\", resolve)\r\n            else\r\n                resolve()\r\n\r\n    # firefox adds br instead of new lines inside <code>\r\n    replaceCodeBrToNl: (code) ->\r\n        $(code).find('br').replaceWith('\\n')\r\n\r\n     hightlightCode: (code) ->\r\n        @.replaceCodeBrToNl(code)\r\n\r\n        lan = @.getLanguageInClassList(code.classList)\r\n\r\n        if lan\r\n            @.loadLanguage(lan).then () -> Prism.highlightElement(code)\r\n\r\n    addHightlighter: (element) ->\r\n        codes = $(element).find('code')\r\n\r\n        codes.each (index, code) => @.hightlightCode(code)\r\n\r\nangular.module(\"taigaComponents\")\r\n    .service(\"tgWysiwygCodeHightlighterService\", WysiwygCodeHightlighterService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.directive.coffee\r\n###\r\n\r\nWysiwygCodeLightbox = (lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.$watch 'visible', (visible) ->\r\n            if visible && !el.hasClass('open')\r\n                scope.open = true\r\n                lightboxService.open(el, null, scope.onClose)\r\n\r\n                scope.$applyAsync () ->\r\n                    textarea = el[0].querySelector('textarea')\r\n                    if textarea\r\n                        textarea.select()\r\n\r\n            else if !visible && el.hasClass('open')\r\n                scope.open = false\r\n                lightboxService.close(el)\r\n\r\n    return {\r\n        scope: {\r\n            languages: '<',\r\n            codeLanguage: '<',\r\n            code: '<',\r\n            visible: '<',\r\n            onClose: '&',\r\n            onSave: '&'\r\n        },\r\n        link: link,\r\n        templateUrl: \"components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.html\"\r\n    }\r\n\r\nangular.module(\"taigaComponents\")\r\n    .directive(\"tgWysiwygCodeLightbox\", [\"lightboxService\", WysiwygCodeLightbox])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/wysiwyg-mention.service.coffee\r\n###\r\n\r\nclass WysiwygMentionService\r\n    @.$inject = [\r\n        \"tgProjectService\",\r\n        \"tgWysiwygService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgResources\"\r\n    ]\r\n\r\n    constructor: (@projectService, @wysiwygService, @navurls, @rs) ->\r\n        @.cancelablePromise = null\r\n        @.projectSlug = @projectService.project.get('slug')\r\n\r\n    search: (mention) ->\r\n        return new Promise (resolve) =>\r\n            if '#'.indexOf(mention[0]) != -1\r\n                @.searchItem(mention.replace('#', '')).then(resolve)\r\n            else if '@'.indexOf(mention[0]) != -1\r\n                @.searchUser(mention.replace('@', ''), resolve)\r\n            else if ':'.indexOf(mention[0]) != -1\r\n                @.searchEmoji(mention.replace(':', ''), resolve)\r\n\r\n    searchItem: (term) ->\r\n        return new Promise (resolve, reject) =>\r\n            term = taiga.slugify(term)\r\n\r\n            filter = (item) ->\r\n                return ['subject', 'ref'].some((attr) ->\r\n                    taiga.slugify(item[attr]).indexOf(term) >= 0\r\n                )\r\n\r\n            @rs.search.do(@projectService.project.get('id'), term).then (res) =>\r\n                result = []\r\n                if !res.count or res.count == res.wikipages.length\r\n                    resolve(result)\r\n                else\r\n                    typeURLs = {\r\n                        issues: 'project-issues-detail'\r\n                        userstories: 'project-userstories-detail'\r\n                        tasks: 'project-tasks-detail'\r\n                    }\r\n\r\n                    for type in ['issues', 'tasks', 'userstories']\r\n                        if not res[type]\r\n                            continue\r\n                        items = res[type].filter(filter).map (item) =>\r\n                            item.url = @navurls.resolve(typeURLs[type], {\r\n                                project: @.projectSlug,\r\n                                ref: item.ref\r\n                            })\r\n                            return item\r\n                        result = result.concat(items)\r\n                    resolve(_.sortBy(result, [\"ref\"]).slice(0, 10))\r\n\r\n    searchUser: (term, callback) ->\r\n        users = @projectService.project.toJS().members.filter (user) ->\r\n            return ['username', 'full_name', 'full_name_display'].some((attr) ->\r\n                taiga.slugify(user[attr]).indexOf(term) >= 0 || user[attr].indexOf(term) >= 0\r\n            )\r\n\r\n        users = users.slice(0, 10).map (item) =>\r\n            item.url = @navurls.resolve('user-profile', {\r\n                project: @.projectSlug,\r\n                username: item.username\r\n            })\r\n            return item\r\n\r\n        callback(users)\r\n\r\n    searchEmoji: (name, callback) ->\r\n        filteredEmojis = @wysiwygService.searchEmojiByName(name)\r\n        filteredEmojis = filteredEmojis.slice(0, 10)\r\n\r\n        callback(filteredEmojis)\r\n\r\nangular.module(\"taigaComponents\").service(\"tgWysiwygMentionService\", WysiwygMentionService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/wysiwyg.directive.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindOnce = @.taiga.bindOnce\r\n\r\nMedium = ($translate, $confirm, $storage, wysiwygService, animationFrame, tgLoader, wysiwygCodeHightlighterService, wysiwygMentionService, analytics, $location) ->\r\n    removeSelections = () ->\r\n        if window.getSelection\r\n            if window.getSelection().empty\r\n                window.getSelection().empty();\r\n        else if window.getSelection().removeAllRanges\r\n            window.getSelection().removeAllRanges()\r\n\r\n        else if document.selection\r\n            document.selection.empty()\r\n\r\n    getRangeCodeBlock = (range) ->\r\n        return $(range.endContainer).parentsUntil('.editor', 'code')\r\n\r\n    isCodeBlockSelected = (range) ->\r\n        return !!getRangeCodeBlock(range).length\r\n\r\n    removeCodeBlockAndHightlight = (selection, mediumInstance) ->\r\n        if $(selection).is('code')\r\n            code = selection\r\n        else\r\n            code = $(selection).closest('code')[0]\r\n\r\n        pre = code.parentNode\r\n\r\n        p = document.createElement('p')\r\n        p.innerText = code.innerText\r\n\r\n        pre.parentNode.replaceChild(p, pre)\r\n        mediumInstance.checkContentChanged(mediumInstance.elements[0])\r\n\r\n    addCodeBlockAndHightlight = (range, mediumInstance) ->\r\n        pre = document.createElement('pre')\r\n        code = document.createElement('code')\r\n\r\n        if !range.startContainer.parentNode.nextSibling\r\n            $('<br/>').insertAfter(range.startContainer.parentNode)\r\n\r\n        start = range.endContainer.parentNode.nextSibling\r\n\r\n        extract = range.extractContents()\r\n\r\n        code.appendChild(extract)\r\n\r\n        pre.appendChild(code)\r\n\r\n        start.parentNode.insertBefore(pre, start)\r\n\r\n        refreshCodeBlocks(mediumInstance)\r\n        mediumInstance.checkContentChanged(mediumInstance.elements[0])\r\n\r\n    refreshCodeBlocks = (mediumInstance) ->\r\n        return if !mediumInstance\r\n\r\n        # clean empty <p> content editable adds it when range.extractContents has been execute it\r\n        for mainChildren in mediumInstance.elements[0].children\r\n            if mainChildren && mainChildren.tagName.toLowerCase() == 'p' && !mainChildren.innerHTML.trim().length\r\n                mainChildren.parentNode.removeChild(mainChildren)\r\n\r\n        preList = mediumInstance.elements[0].querySelectorAll('pre')\r\n\r\n        for pre in preList\r\n            # prevent edit a pre\r\n            pre.setAttribute('contenteditable', false)\r\n\r\n            pre.setAttribute('title', $translate.instant(\"COMMON.WYSIWYG.DB_CLICK\"))\r\n\r\n            # prevent text selection in firefox\r\n            pre.addEventListener 'mousedown', (e) -> e.preventDefault()\r\n\r\n            if pre.nextElementSibling && pre.nextElementSibling.nodeName.toLowerCase() == 'p' && !pre.nextElementSibling.children.length\r\n                pre.nextElementSibling.appendChild(document.createElement('br'))\r\n\r\n            # add p after every pre\r\n            else if !pre.nextElementSibling || ['p', 'ul', 'h1', 'h2', 'h3'].indexOf(pre.nextElementSibling.nodeName.toLowerCase()) == -1\r\n                p = document.createElement('p')\r\n                p.appendChild(document.createElement('br'))\r\n\r\n                pre.parentNode.insertBefore(p, pre.nextSibling)\r\n\r\n    AlignRightButton = MediumEditor.extensions.button.extend({\r\n        name: 'rtl',\r\n        init: () ->\r\n            option = _.find this.base.options.toolbar.buttons, (it) ->\r\n                it.name == 'rtl'\r\n\r\n            this.button = this.document.createElement('button')\r\n            this.button.classList.add('medium-editor-action')\r\n            this.button.innerHTML = option.contentDefault || '<b>RTL</b>'\r\n            this.button.title = 'RTL'\r\n            this.on(this.button, 'click', this.handleClick.bind(this))\r\n\r\n        getButton: () ->\r\n            return this.button\r\n        handleClick: (event) ->\r\n            range = MediumEditor.selection.getSelectionRange(document)\r\n            if range.commonAncestorContainer.parentNode.style.textAlign == 'right'\r\n                document.execCommand('justifyLeft', false)\r\n            else\r\n                document.execCommand('justifyRight', false)\r\n\r\n    })\r\n\r\n    getIcon = (icon) ->\r\n        return \"\"\"<svg class=\"icon icon-#{icon}\">\r\n            <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"##{icon}\"></use>\r\n        </svg>\"\"\"\r\n\r\n    # MediumEditor extension to add <code>\r\n    CodeButton = MediumEditor.extensions.button.extend({\r\n        name: 'code',\r\n        init: () ->\r\n            option = _.find this.base.options.toolbar.buttons, (it) ->\r\n                it.name == 'code'\r\n\r\n            this.button = this.document.createElement('button')\r\n            this.button.classList.add('medium-editor-action')\r\n            this.button.innerHTML = option.contentDefault || '<b>Code</b>'\r\n            this.button.title = 'Code'\r\n            this.on(this.button, 'click', this.handleClick.bind(this))\r\n\r\n        getButton: () ->\r\n            return this.button\r\n\r\n        tagNames: ['code']\r\n\r\n        handleClick: (event) ->\r\n            range = MediumEditor.selection.getSelectionRange(self.document)\r\n\r\n            if isCodeBlockSelected(range, this.base)\r\n                removeCodeBlockAndHightlight(range.endContainer, this.base)\r\n            else\r\n                addCodeBlockAndHightlight(range, this.base)\r\n                removeSelections()\r\n\r\n            toolbar = this.base.getExtensionByName('toolbar')\r\n\r\n            if toolbar\r\n                toolbar.hideToolbar()\r\n\r\n    })\r\n\r\n    CustomPasteHandler = MediumEditor.extensions.paste.extend({\r\n        doPaste: (pastedHTML, pastedPlain, editable) ->\r\n            html = MediumEditor.util.htmlEntities(pastedPlain);\r\n\r\n            MediumEditor.util.insertHTMLCommand(this.document, html);\r\n    })\r\n\r\n    # bug\r\n    # <pre><code></code></pre> the enter key press doesn't work\r\n    oldIsBlockContainer = MediumEditor.util.isBlockContainer\r\n\r\n    MediumEditor.util.isBlockContainer = (element) ->\r\n        if !element\r\n            return oldIsBlockContainer(element)\r\n\r\n        if element.tagName\r\n            tagName = element.tagName\r\n        else\r\n            tagName = element.parentNode.tagName\r\n\r\n        if tagName.toLowerCase() == 'code'\r\n            return true\r\n\r\n        return oldIsBlockContainer(element)\r\n\r\n    link = ($scope, $el, $attrs) ->\r\n        mediumInstance = null\r\n        editorMedium = $el.find('.medium')\r\n        editorMarkdown = $el.find('.markdown')\r\n        codeBlockSelected = null\r\n\r\n        isEditOnly = !!$attrs.$attr.editonly\r\n        notPersist = !!$attrs.$attr.notPersist\r\n\r\n        $scope.required = !!$attrs.$attr.required\r\n        $scope.editMode = isEditOnly || false\r\n        $scope.mode = $storage.get('editor-mode', 'html')\r\n        $scope.markdown = ''\r\n        $scope.codeEditorVisible = false\r\n        $scope.codeLans = []\r\n\r\n        wysiwygCodeHightlighterService.getLanguages().then (codeLans) ->\r\n            $scope.codeLans = codeLans\r\n\r\n        setEditMode = (editMode) ->\r\n            $scope.editMode = editMode\r\n\r\n        setHtmlMedium = (markdown) ->\r\n            html = wysiwygService.getHTML(markdown)\r\n            editorMedium.html(html)\r\n            wysiwygCodeHightlighterService.addHightlighter(mediumInstance.elements[0])\r\n\r\n            if $scope.editMode\r\n                refreshCodeBlocks(mediumInstance)\r\n\r\n        $scope.saveSnippet = (lan, code) ->\r\n            $scope.codeEditorVisible = false\r\n            codeBlockSelected.innerText = code\r\n            codePre = codeBlockSelected.parentNode\r\n\r\n            if lan == 'remove-formating'\r\n                    codeBlockSelected.className = ''\r\n                    codePre.className = ''\r\n\r\n                    removeCodeBlockAndHightlight(codeBlockSelected, mediumInstance)\r\n            else if _.trim(code).length\r\n                if lan\r\n                    codeBlockSelected.className = 'language-' + lan\r\n                    codePre.className = 'language-' + lan\r\n                else\r\n                    codeBlockSelected.className = ''\r\n                    codePre.className = ''\r\n\r\n                wysiwygCodeHightlighterService.hightlightCode(codeBlockSelected)\r\n                mediumInstance.checkContentChanged(mediumInstance.elements[0])\r\n            else\r\n                codeBlockSelected.parentNode.parentNode.removeChild(codeBlockSelected.parentNode)\r\n                mediumInstance.checkContentChanged(mediumInstance.elements[0])\r\n\r\n            throttleChange()\r\n\r\n            return null\r\n\r\n        $scope.setMode = (mode) ->\r\n            $storage.set('editor-mode', mode)\r\n\r\n            if mode == 'markdown'\r\n                updateMarkdownWithCurrentHtml()\r\n            else\r\n                setHtmlMedium($scope.markdown)\r\n\r\n            $scope.mode = mode\r\n            mediumInstance.trigger('editableBlur', {}, editorMedium[0])\r\n\r\n        $scope.save = (e) ->\r\n            e.preventDefault() if e\r\n\r\n            if $scope.mode == 'html'\r\n                updateMarkdownWithCurrentHtml()\r\n\r\n            setHtmlMedium($scope.markdown)\r\n\r\n            return if $scope.required && !$scope.markdown.length\r\n\r\n            $scope.saving  = true\r\n            $scope.outdated = false\r\n\r\n            $scope.onSave({text: $scope.markdown, cb: saveEnd})\r\n\r\n            return\r\n\r\n        $scope.cancel = (e) ->\r\n            e.preventDefault() if e\r\n\r\n            if !isEditOnly\r\n                setEditMode(false)\r\n\r\n            if notPersist\r\n                clean()\r\n            else if $scope.mode == 'html'\r\n                setHtmlMedium($scope.content || null)\r\n\r\n            $scope.markdown = $scope.content\r\n\r\n            discardLocalStorage()\r\n            mediumInstance.trigger('blur', {}, editorMedium[0])\r\n            $scope.outdated = false\r\n            refreshCodeBlocks(mediumInstance)\r\n\r\n            $scope.onCancel()\r\n\r\n            return\r\n\r\n        clean = () ->\r\n            $scope.markdown = ''\r\n            editorMedium.html('')\r\n\r\n        saveEnd = () ->\r\n            $scope.saving  = false\r\n\r\n            if !isEditOnly\r\n                setEditMode(false)\r\n\r\n            if notPersist\r\n                clean()\r\n\r\n            discardLocalStorage()\r\n            mediumInstance.trigger('blur', {}, editorMedium[0])\r\n\r\n            analytics.trackEvent('develop', 'save wysiwyg', $scope.mode, 1)\r\n\r\n        uploadEnd = (name, url) ->\r\n            if taiga.isImage(name)\r\n                mediumInstance.pasteHTML(\"<img src='\" + url + \"' /><br/>\")\r\n            else\r\n                name = $('<div/>').text(name).html()\r\n                mediumInstance.pasteHTML(\"<a target='_blank' href='\" + url + \"'>\" + name + \"</a><br/>\")\r\n\r\n        isOutdated = () ->\r\n            store = $storage.get($scope.storageKey)\r\n\r\n            if store && store.version && store.version != $scope.version\r\n                return true\r\n\r\n            return false\r\n\r\n        isDraft = () ->\r\n            store = $storage.get($scope.storageKey)\r\n\r\n            if store\r\n                return true\r\n\r\n            return false\r\n\r\n        getCurrentContent = () ->\r\n            store = $storage.get($scope.storageKey)\r\n\r\n            if store\r\n                return store.text\r\n\r\n            return $scope.content\r\n\r\n        discardLocalStorage = () ->\r\n            $storage.remove($scope.storageKey)\r\n\r\n        $scope.cancelWithConfirmation = () ->\r\n            if $scope.content == $scope.markdown\r\n                $scope.cancel()\r\n\r\n                document.activeElement.blur()\r\n                document.body.click()\r\n\r\n                return null\r\n\r\n            title = $translate.instant(\"COMMON.CONFIRM_CLOSE_EDIT_MODE_TITLE\")\r\n            message = $translate.instant(\"COMMON.CONFIRM_CLOSE_EDIT_MODE_MESSAGE\")\r\n\r\n            $confirm.ask(title, null, message).then (askResponse) ->\r\n                $scope.cancel()\r\n                askResponse.finish()\r\n\r\n        # firefox adds br instead of new lines inside <code>, taiga must replace the br by \\n before sending to the server\r\n        replaceCodeBrToNl = () ->\r\n            html = $('<div></div>').html(editorMedium.html())\r\n            html.find('code br').replaceWith('\\n')\r\n\r\n            return html.html()\r\n\r\n        updateMarkdownWithCurrentHtml = () ->\r\n            html = replaceCodeBrToNl()\r\n            $scope.markdown = wysiwygService.getMarkdown(html)\r\n\r\n        localSave = (markdown) ->\r\n            if $scope.storageKey\r\n                store = {}\r\n                store.version = $scope.version || 0\r\n                store.text = markdown\r\n                $storage.set($scope.storageKey, store)\r\n\r\n        change = () ->\r\n            if $scope.mode == 'html'\r\n                updateMarkdownWithCurrentHtml()\r\n\r\n            localSave($scope.markdown)\r\n\r\n            $scope.onChange({markdown: $scope.markdown})\r\n\r\n        throttleChange = _.throttle(change, 200)\r\n\r\n        create = (text, editMode=false) ->\r\n            if text.length\r\n                html = wysiwygService.getHTML(text)\r\n                editorMedium.html(html)\r\n\r\n            mediumInstance = new MediumEditor(editorMedium[0], {\r\n                imageDragging: false,\r\n                placeholder: {\r\n                    text: $scope.placeholder\r\n                },\r\n                toolbar: {\r\n                    buttons: [\r\n                        {\r\n                            name: 'bold',\r\n                            contentDefault: getIcon('editor-bold')\r\n                        },\r\n                        {\r\n                            name: 'italic',\r\n                            contentDefault: getIcon('editor-italic')\r\n                        },\r\n                        {\r\n                            name: 'strikethrough',\r\n                            contentDefault: getIcon('editor-cross-out')\r\n                        },\r\n                        {\r\n                            name: 'anchor',\r\n                            contentDefault: getIcon('editor-link')\r\n                        },\r\n                        {\r\n                            name: 'image',\r\n                            contentDefault: getIcon('editor-image')\r\n                        },\r\n                        {\r\n                            name: 'orderedlist',\r\n                            contentDefault: getIcon('editor-list-n')\r\n                        },\r\n                        {\r\n                            name: 'unorderedlist',\r\n                            contentDefault: getIcon('editor-list-o')\r\n                        },\r\n                        {\r\n                            name: 'h1',\r\n                            contentDefault: getIcon('editor-h1')\r\n                        },\r\n                        {\r\n                            name: 'h2',\r\n                            contentDefault: getIcon('editor-h2')\r\n                        },\r\n                        {\r\n                            name: 'h3',\r\n                            contentDefault: getIcon('editor-h3')\r\n                        },\r\n                        {\r\n                            name: 'quote',\r\n                            contentDefault: getIcon('editor-quote')\r\n                        },\r\n                        {\r\n                            name: 'removeFormat',\r\n                            contentDefault: getIcon('editor-no-format')\r\n                        },\r\n                        {\r\n                            name: 'rtl',\r\n                            contentDefault: getIcon('editor-rtl')\r\n                        },\r\n                        {\r\n                            name: 'code',\r\n                            contentDefault: getIcon('editor-code')\r\n                        }\r\n                    ]\r\n                },\r\n                extensions: {\r\n                    paste: new CustomPasteHandler(),\r\n                    code: new CodeButton(),\r\n                    autolist: new AutoList(),\r\n                    alignright: new AlignRightButton(),\r\n                    mediumMention: new MentionExtension({\r\n                        getItems: (mention, mentionCb) ->\r\n                            wysiwygMentionService.search(mention).then(mentionCb)\r\n                    })\r\n                }\r\n            })\r\n\r\n            $scope.changeMarkdown = throttleChange\r\n\r\n            mediumInstance.subscribe 'editableInput', (e) ->\r\n                $scope.$applyAsync(throttleChange)\r\n\r\n            mediumInstance.subscribe \"editableClick\", (e) ->\r\n                r = new RegExp('^(?:[a-z]+:)?//', 'i')\r\n\r\n                if e.target.href \r\n                    if r.test(e.target.getAttribute('href')) || e.target.getAttribute('target') == '_blank'\r\n                        e.stopPropagation()\r\n                        window.open(e.target.href)                                                 \r\n                    else \r\n                        $location.url(e.target.href)\r\n\r\n            mediumInstance.subscribe 'editableDrop', (event) ->\r\n                $scope.onUploadFile({files: event.dataTransfer.files, cb: uploadEnd})\r\n\r\n            mediumInstance.subscribe 'editableKeydown', (e) ->\r\n                code = if e.keyCode then e.keyCode else e.which\r\n\r\n                mention = $('.medium-mention')\r\n\r\n                if (code == 40 || code == 38) && mention.length\r\n                    e.stopPropagation()\r\n                    e.preventDefault()\r\n\r\n                    return\r\n\r\n                if $scope.editMode && code == 27\r\n                    e.stopPropagation()\r\n                    $scope.$applyAsync($scope.cancelWithConfirmation)\r\n                else if code == 27\r\n                    editorMedium.blur()\r\n\r\n            setEditMode(editMode)\r\n\r\n            $scope.$applyAsync () ->\r\n                wysiwygCodeHightlighterService.addHightlighter(mediumInstance.elements[0])\r\n                refreshCodeBlocks(mediumInstance)\r\n\r\n        $(editorMedium[0]).on 'mousedown', (e) -> \r\n            if e.target.href\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n            else\r\n                $scope.$applyAsync () ->\r\n                    if !$scope.editMode\r\n                        setEditMode(true)\r\n                        refreshCodeBlocks(mediumInstance)                   \r\n\r\n        $(editorMedium[0]).on 'dblclick', 'pre', (e) ->\r\n            $scope.$applyAsync () ->\r\n                $scope.codeEditorVisible = true\r\n\r\n                codeBlockSelected = e.currentTarget.querySelector('code')\r\n\r\n                $scope.currentCodeLanguage = wysiwygCodeHightlighterService.getLanguageInClassList(codeBlockSelected.classList)\r\n                $scope.code = codeBlockSelected.innerText\r\n\r\n        unwatch = $scope.$watch 'content', (content) ->\r\n            if !_.isUndefined(content)\r\n                $scope.outdated = isOutdated()\r\n\r\n                if !mediumInstance && isDraft()\r\n                    setEditMode(true)\r\n\r\n                if ($scope.markdown.length || content.length) && $scope.markdown == content\r\n                    return\r\n\r\n                content = getCurrentContent()\r\n\r\n                $scope.markdown = content\r\n\r\n                if mediumInstance\r\n                    mediumInstance.destroy()\r\n\r\n                if tgLoader.open()\r\n                    unwatchLoader = tgLoader.onEnd () ->\r\n                        create(content, $scope.editMode)\r\n                        unwatchLoader()\r\n                else\r\n                    create(content, $scope.editMode)\r\n\r\n                unwatch()\r\n\r\n        $scope.$on \"$destroy\", () ->\r\n            if mediumInstance\r\n                $(editorMedium[0]).off() if editorMedium.length\r\n                mediumInstance.destroy()\r\n\r\n    return {\r\n        templateUrl: \"common/components/wysiwyg-toolbar.html\",\r\n        scope: {\r\n            placeholder: '@',\r\n            version: '<',\r\n            storageKey: '<',\r\n            content: '<',\r\n            onCancel: '&',\r\n            onSave: '&',\r\n            onUploadFile: '&',\r\n            onChange: '&'\r\n        },\r\n        link: link\r\n    }\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgWysiwyg\", [\r\n    \"$translate\",\r\n    \"$tgConfirm\",\r\n    \"$tgStorage\",\r\n    \"tgWysiwygService\",\r\n    \"animationFrame\",\r\n    \"tgLoader\",\r\n    \"tgWysiwygCodeHightlighterService\",\r\n    \"tgWysiwygMentionService\",\r\n    \"$tgAnalytics\",\r\n    \"$location\",\r\n    Medium\r\n])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: components/wysiwyg/wysiwyg.service.coffee\r\n###\r\n\r\nclass WysiwygService\r\n    @.$inject = [\r\n        \"tgWysiwygCodeHightlighterService\",\r\n        \"tgProjectService\",\r\n        \"$tgNavUrls\",\r\n        \"$tgEmojis\"\r\n    ]\r\n    constructor: (@wysiwygCodeHightlighterService, @projectService, @navurls, @emojis) ->\r\n\r\n    searchEmojiByName: (name) ->\r\n        return @emojis.searchByName(name)\r\n\r\n    pipeLinks: (text) ->\r\n        return text.replace /\\[\\[(.*?)\\]\\]/g, (match, p1, offset, str) ->\r\n            linkParams = p1.split('|')\r\n\r\n            link = linkParams[0]\r\n            title = linkParams[1] || linkParams[0]\r\n\r\n            return '[' + title + '](' + link  + ')'\r\n\r\n    replaceUrls: (html) ->\r\n        el = document.createElement( 'html' )\r\n        el.innerHTML = html\r\n\r\n        links = el.querySelectorAll('a')\r\n\r\n        for link in links\r\n            if link.getAttribute('href').indexOf('/profile/') != -1\r\n                link.parentNode.replaceChild(document.createTextNode(link.innerText), link)\r\n            else if link.getAttribute('href').indexOf('/t/') != -1\r\n                link.parentNode.replaceChild(document.createTextNode(link.innerText), link)\r\n\r\n        return el.innerHTML\r\n\r\n    searchWikiLinks: (html) ->\r\n        el = document.createElement( 'html' )\r\n        el.innerHTML = html\r\n\r\n        links = el.querySelectorAll('a')\r\n\r\n        for link in links\r\n            if link.getAttribute('href').indexOf('/') == -1\r\n                url = @navurls.resolve('project-wiki-page', {\r\n                    project: @projectService.project.get('slug'),\r\n                    slug: link.getAttribute('href')\r\n                })\r\n\r\n                link.setAttribute('href', url)\r\n\r\n        return el.innerHTML\r\n\r\n    removeTrailingListBr: (text) ->\r\n        return text.replace(/<li>(.*?)<br><\\/li>/g, '<li>$1</li>')\r\n\r\n    getMarkdown: (html) ->\r\n        # https://github.com/yabwe/medium-editor/issues/543\r\n        cleanIssueConverter = {\r\n            filter: ['html', 'body', 'span', 'div'],\r\n            replacement: (innerHTML) ->\r\n                return innerHTML\r\n        }\r\n\r\n        codeLanguageConverter = {\r\n            filter:  (node) =>\r\n                return node.nodeName == 'PRE' &&\r\n                  node.firstChild &&\r\n                  node.firstChild.nodeName == 'CODE'\r\n            replacement: (content, node) =>\r\n                lan = @wysiwygCodeHightlighterService.getLanguageInClassList(node.firstChild.classList)\r\n                lan = '' if !lan\r\n\r\n                return '\\n\\n```' + lan + '\\n' + _.trim(node.firstChild.textContent) + '\\n```\\n\\n'\r\n         }\r\n\r\n        html = html.replace(/&nbsp;(<\\/.*>)/g, \"$1\")\r\n        html = @emojis.replaceImgsByEmojiName(html)\r\n        html = @.replaceUrls(html)\r\n        html = @.removeTrailingListBr(html)\r\n\r\n        markdown = toMarkdown(html, {\r\n            gfm: true,\r\n            converters: [cleanIssueConverter, codeLanguageConverter]\r\n        })\r\n\r\n        return markdown\r\n\r\n    parseMentionMatches: (text) ->\r\n        serviceName = 'twitter'\r\n        tagBuilder = this.tagBuilder\r\n        matches = []\r\n\r\n        regex = /@[^\\s]{1,50}[^.\\s]/g\r\n        m = regex.exec(text)\r\n\r\n        while m != null\r\n            offset = m.index\r\n            prevChar = text.charAt( offset - 1 )\r\n\r\n            if m.index == regex.lastIndex\r\n                regex.lastIndex++\r\n\r\n            m.forEach (match, groupIndex) ->\r\n                matches.push( new Autolinker.match.Mention({\r\n                    tagBuilder    : tagBuilder,\r\n                    matchedText   : match,\r\n                    offset        : offset,\r\n                    serviceName   : serviceName,\r\n                    mention       : match.slice(1)\r\n                }))\r\n\r\n            m = regex.exec(text)\r\n\r\n        return matches\r\n\r\n    autoLinkHTML: (html) ->\r\n        # override Autolink parser\r\n\r\n        matchRegexStr = String(Autolinker.matcher.Mention.prototype.matcherRegexes.twitter)\r\n        if matchRegexStr.indexOf('.') == -1\r\n            matchRegexStr = '@[^\\s]{1,50}[^.\\s]'\r\n\r\n        autolinker = new Autolinker({\r\n            mention: 'twitter',\r\n            hashtag: 'twitter',\r\n            replaceFn: (match) =>\r\n                if  match.getType() == 'mention'\r\n                    profileUrl = @navurls.resolve('user-profile', {\r\n                        project: @projectService.project.get('slug'),\r\n                        username: match.getMention()\r\n                    })\r\n\r\n                    return '<a class=\"autolink\" href=\"' + profileUrl + '\">@' + match.getMention() + '</a>'\r\n                else if match.getType() == 'hashtag'\r\n                    url = @navurls.resolve('project-detail-ref', {\r\n                        project: @projectService.project.get('slug'),\r\n                        ref: match.getHashtag()\r\n                    })\r\n\r\n                    return '<a class=\"autolink\" href=\"' + url + '\">#' + match.getHashtag() + '</a>'\r\n        })\r\n\r\n        Autolinker.matcher.Mention.prototype.parseMatches = @.parseMentionMatches.bind(autolinker)\r\n\r\n        return autolinker.link(html);\r\n\r\n    getHTML: (text) ->\r\n        return \"\" if !text || !text.length\r\n\r\n        options = {\r\n            breaks: true\r\n        }\r\n\r\n        text = @emojis.replaceEmojiNameByImgs(text)\r\n        text = @.pipeLinks(text)\r\n\r\n        md = window.markdownit({\r\n            breaks: true\r\n        })\r\n\r\n        md.use(window.markdownitLazyHeaders)\r\n        result = md.render(text)\r\n        result = @.searchWikiLinks(result)\r\n\r\n        result = @.autoLinkHTML(result)\r\n\r\n        return result\r\n\r\nangular.module(\"taigaComponents\")\r\n    .service(\"tgWysiwygService\", WysiwygService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-home-order-by/discover-home-order-by.controller.coffee\r\n###\r\n\r\nclass DiscoverHomeOrderByController\r\n    @.$inject = [\r\n        '$translate'\r\n    ]\r\n\r\n    constructor: (@translate) ->\r\n        @.is_open = false\r\n\r\n        @.texts = {\r\n            week: @translate.instant('DISCOVER.FILTERS.WEEK'),\r\n            month: @translate.instant('DISCOVER.FILTERS.MONTH'),\r\n            year: @translate.instant('DISCOVER.FILTERS.YEAR'),\r\n            all: @translate.instant('DISCOVER.FILTERS.ALL_TIME')\r\n        }\r\n\r\n    currentText: () ->\r\n        return @.texts[@.currentOrderBy]\r\n\r\n    open: () ->\r\n        @.is_open = true\r\n\r\n    close: () ->\r\n        @.is_open = false\r\n\r\n    orderBy: (type) ->\r\n        @.currentOrderBy = type\r\n        @.is_open = false\r\n        @.onChange({orderBy: @.currentOrderBy})\r\n\r\nangular.module(\"taigaDiscover\").controller(\"DiscoverHomeOrderBy\", DiscoverHomeOrderByController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-home-order-by/discover-home-order-by.directive.coffee\r\n###\r\n\r\nDiscoverHomeOrderByDirective = () ->\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        controller: \"DiscoverHomeOrderBy\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"discover/components/discover-home-order-by/discover-home-order-by.html\",\r\n        scope: {\r\n            currentOrderBy: \"=orderBy\",\r\n            onChange: \"&\"\r\n        },\r\n        link: link\r\n    }\r\n\r\nDiscoverHomeOrderByDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverHomeOrderBy\", DiscoverHomeOrderByDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-search-bar/discover-search-bar.controller.coffee\r\n###\r\n\r\nclass DiscoverSearchBarController\r\n    @.$inject = [\r\n        'tgDiscoverProjectsService'\r\n    ]\r\n\r\n    constructor: (@discoverProjectsService) ->\r\n        taiga.defineImmutableProperty @, 'projects', () => return @discoverProjectsService.projectsCount\r\n\r\n        @discoverProjectsService.fetchStats()\r\n\r\n    selectFilter: (filter) ->\r\n        @.onChange({filter: filter, q: @.q})\r\n\r\n    submitFilter: ->\r\n        @.onChange({filter: @.filter, q: @.q})\r\n\r\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearchBar\", DiscoverSearchBarController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-search-bar/discover-search-bar.directive.coffee\r\n###\r\n\r\nDiscoverSearchBarDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n\r\n    return {\r\n        controller: \"DiscoverSearchBar\",\r\n        controllerAs: \"vm\"\r\n        templateUrl: 'discover/components/discover-search-bar/discover-search-bar.html',\r\n        bindToController: true,\r\n        scope: {\r\n            q: \"=\",\r\n            filter: \"=\",\r\n            onChange: \"&\"\r\n        },\r\n        compile: (element, attrs) ->\r\n            if !attrs.q\r\n                attrs.q = ''\r\n        link: link\r\n    }\r\n\r\nDiscoverSearchBarDirective.$inject = []\r\n\r\nangular.module('taigaDiscover').directive('tgDiscoverSearchBar', DiscoverSearchBarDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-search-list-header/discover-search-list-header.controller.coffee\r\n###\r\n\r\nclass DiscoverSearchListHeaderController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.like_is_open = @.orderBy.indexOf('-total_fans') == 0\r\n        @.activity_is_open = @.orderBy.indexOf('-total_activity') == 0\r\n\r\n    openLike: () ->\r\n        @.like_is_open = true\r\n        @.activity_is_open = false\r\n\r\n        @.setOrderBy('-total_fans_last_week')\r\n\r\n    openActivity: () ->\r\n        @.activity_is_open = true\r\n        @.like_is_open = false\r\n\r\n        @.setOrderBy('-total_activity_last_week')\r\n\r\n    setOrderBy: (type = '') ->\r\n        if !type\r\n            @.like_is_open = false\r\n            @.activity_is_open = false\r\n\r\n        @.onChange({orderBy: type})\r\n\r\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearchListHeader\", DiscoverSearchListHeaderController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/discover-search-list-header/discover-search-list-header.directive.coffee\r\n###\r\n\r\nDiscoverSearchListHeaderDirective = () ->\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        controller: \"DiscoverSearchListHeader\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        templateUrl: \"discover/components/discover-search-list-header/discover-search-list-header.html\",\r\n        scope: {\r\n            onChange: \"&\",\r\n            orderBy: \"=\"\r\n        },\r\n        link: link\r\n    }\r\n\r\nDiscoverSearchListHeaderDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverSearchListHeader\", DiscoverSearchListHeaderDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/featured-projects/featured-projects.controller.coffee\r\n###\r\n\r\nclass FeaturedProjectsController\r\n    @.$inject = [\r\n        \"tgDiscoverProjectsService\"\r\n    ]\r\n\r\n    constructor: (@discoverProjectsService) ->\r\n        taiga.defineImmutableProperty @, \"featured\", () => return @discoverProjectsService.featured\r\n\r\n        @discoverProjectsService.fetchFeatured()\r\n\r\nangular.module(\"taigaDiscover\").controller(\"FeaturedProjects\", FeaturedProjectsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/featured-projects/featured-projects.directive.coffee\r\n###\r\n\r\nFeaturedProjectsDirective = () ->\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        controller: \"FeaturedProjects\"\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"discover/components/featured-projects/featured-projects.html\",\r\n        scope: {},\r\n        link: link\r\n    }\r\n\r\nFeaturedProjectsDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgFeaturedProjects\", FeaturedProjectsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/highlighted/highlighted.directive.coffee\r\n###\r\n\r\nHighlightedDirective = () ->\r\n    return {\r\n        templateUrl: \"discover/components/highlighted/highlighted.html\",\r\n        scope: {\r\n            loading: \"=\",\r\n            highlighted: \"=\",\r\n            orderBy: \"=\"\r\n        }\r\n    }\r\n\r\nHighlightedDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgHighlighted\", HighlightedDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/most-active/most-active.controller.coffee\r\n###\r\n\r\nclass MostActiveController\r\n    @.$inject = [\r\n        \"tgDiscoverProjectsService\"\r\n    ]\r\n\r\n    constructor: (@discoverProjectsService) ->\r\n        taiga.defineImmutableProperty @, \"highlighted\", () => return @discoverProjectsService.mostActive\r\n\r\n        @.currentOrderBy = 'week'\r\n        @.order_by = @.getOrderBy()\r\n\r\n    fetch: () ->\r\n        @.loading = true\r\n        @.order_by = @.getOrderBy()\r\n\r\n        return @discoverProjectsService.fetchMostActive({order_by: @.order_by}).then () =>\r\n            @.loading = false\r\n\r\n    orderBy: (type) ->\r\n        @.currentOrderBy = type\r\n\r\n        @.fetch()\r\n\r\n    getOrderBy: (type) ->\r\n        if @.currentOrderBy == 'all'\r\n            return '-total_activity'\r\n        else\r\n            return '-total_activity_last_' + @.currentOrderBy\r\n\r\nangular.module(\"taigaDiscover\").controller(\"MostActive\", MostActiveController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/most-active/most-active.directive.coffee\r\n###\r\n\r\nMostActiveDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl.fetch()\r\n\r\n    return {\r\n        controller: \"MostActive\"\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"discover/components/most-active/most-active.html\",\r\n        scope: {},\r\n        link: link\r\n    }\r\n\r\nMostActiveDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgMostActive\", MostActiveDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/most-liked/most-liked.controller.coffee\r\n###\r\n\r\nclass MostLikedController\r\n    @.$inject = [\r\n        \"tgDiscoverProjectsService\"\r\n    ]\r\n\r\n    constructor: (@discoverProjectsService) ->\r\n        taiga.defineImmutableProperty @, \"highlighted\", () => return @discoverProjectsService.mostLiked\r\n\r\n        @.currentOrderBy = 'week'\r\n        @.order_by = @.getOrderBy()\r\n\r\n    fetch: () ->\r\n        @.loading = true\r\n        @.order_by = @.getOrderBy()\r\n\r\n        @discoverProjectsService.fetchMostLiked({order_by: @.order_by}).then () =>\r\n            @.loading = false\r\n\r\n    orderBy: (type) ->\r\n        @.currentOrderBy = type\r\n\r\n        @.fetch()\r\n\r\n    getOrderBy: () ->\r\n        if @.currentOrderBy == 'all'\r\n            return '-total_fans'\r\n        else\r\n            return '-total_fans_last_' + @.currentOrderBy\r\n\r\nangular.module(\"taigaDiscover\").controller(\"MostLiked\", MostLikedController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/components/most-liked/most-liked.directive.coffee\r\n###\r\n\r\nMostLikedDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl.fetch()\r\n\r\n    return {\r\n        controller: \"MostLiked\"\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"discover/components/most-liked/most-liked.html\",\r\n        scope: {},\r\n        link: link\r\n    }\r\n\r\nMostLikedDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgMostLiked\", MostLikedDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/discover-home/discover-home.controller.coffee\r\n###\r\n\r\nclass DiscoverHomeController\r\n    @.$inject = [\r\n        '$tgLocation',\r\n        '$tgNavUrls',\r\n        'tgAppMetaService',\r\n        '$translate'\r\n    ]\r\n\r\n    constructor: (@location, @navUrls, @appMetaService, @translate) ->\r\n        title = @translate.instant(\"DISCOVER.PAGE_TITLE\")\r\n        description = @translate.instant(\"DISCOVER.PAGE_DESCRIPTION\")\r\n        @appMetaService.setAll(title, description)\r\n\r\n    onSubmit: (q) ->\r\n        url = @navUrls.resolve('discover-search')\r\n\r\n        @location.search('text', q).path(url)\r\n\r\nangular.module(\"taigaDiscover\").controller(\"DiscoverHome\", DiscoverHomeController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/discover-search/discover-search.controller.coffee\r\n###\r\n\r\nclass DiscoverSearchController\r\n    @.$inject = [\r\n        '$routeParams',\r\n        'tgDiscoverProjectsService',\r\n        '$route',\r\n        '$tgLocation',\r\n        '$tgAnalytics',\r\n        'tgAppMetaService',\r\n        '$translate'\r\n    ]\r\n\r\n    constructor: (@routeParams, @discoverProjectsService, @route, @location, @analytics, @appMetaService, @translate) ->\r\n        @.page = 1\r\n\r\n        taiga.defineImmutableProperty @, \"searchResult\", () => return @discoverProjectsService.searchResult\r\n        taiga.defineImmutableProperty @, \"nextSearchPage\", () => return @discoverProjectsService.nextSearchPage\r\n\r\n        @.q = @routeParams.text\r\n        @.filter = @routeParams.filter || 'all'\r\n        @.orderBy = @routeParams['order_by'] || ''\r\n\r\n        @.loadingGlobal = false\r\n        @.loadingList = false\r\n        @.loadingPagination = false\r\n\r\n        title = @translate.instant(\"DISCOVER.SEARCH.PAGE_TITLE\")\r\n        description = @translate.instant(\"DISCOVER.SEARCH.PAGE_DESCRIPTION\")\r\n        @appMetaService.setAll(title, description)\r\n        @analytics.trackPage(@location.url(), \"Discover Search\")\r\n\r\n    fetch: () ->\r\n        @.page = 1\r\n\r\n        @discoverProjectsService.resetSearchList()\r\n\r\n        return @.search()\r\n\r\n    fetchByGlobalSearch: () ->\r\n        return if @.loadingGlobal\r\n\r\n        @.loadingGlobal = true\r\n\r\n        @.fetch().then () => @.loadingGlobal = false\r\n\r\n    fetchByOrderBy: () ->\r\n        return if @.loadingList\r\n\r\n        @.loadingList = true\r\n\r\n        @.fetch().then () => @.loadingList = false\r\n\r\n    showMore: () ->\r\n        return if @.loadingPagination\r\n\r\n        @.loadingPagination = true\r\n\r\n        @.page++\r\n\r\n        return @.search().then () => @.loadingPagination = false\r\n\r\n    search: () ->\r\n        filter = @.getFilter()\r\n\r\n        params = {\r\n            page: @.page,\r\n            q: @.q,\r\n            order_by: @.orderBy\r\n        }\r\n\r\n        _.assign(params, filter)\r\n\r\n        return @discoverProjectsService.fetchSearch(params)\r\n\r\n    getFilter: () ->\r\n        if @.filter == 'people'\r\n            return {is_looking_for_people: true}\r\n        else if @.filter == 'scrum'\r\n            return {is_backlog_activated: true}\r\n        else if @.filter == 'kanban'\r\n            return {is_kanban_activated: true}\r\n\r\n        return {}\r\n\r\n    onChangeFilter: (filter, q) ->\r\n        @.filter = filter\r\n        @.q = q\r\n\r\n        @route.updateParams({\r\n            filter: @.filter,\r\n            text: @.q\r\n        })\r\n        @analytics.trackPage(@location.url(), \"Discover Search\")\r\n\r\n        @.fetchByGlobalSearch()\r\n\r\n    onChangeOrder: (orderBy) ->\r\n        @.orderBy = orderBy\r\n\r\n        @route.updateParams({\r\n            order_by: orderBy\r\n        })\r\n        @analytics.trackPage(@location.url(), \"Discover Search\")\r\n\r\n        @.fetchByOrderBy()\r\n\r\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearch\", DiscoverSearchController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/discover-search/discover-search.directive.coffee\r\n###\r\n\r\nDiscoverSearchDirective = () ->\r\n    link = (scope, element, attrs, ctrl) ->\r\n        ctrl.fetch()\r\n\r\n    return {\r\n        controller: \"DiscoverSearch\",\r\n        controllerAs: \"vm\"\r\n        link: link\r\n    }\r\n\r\nDiscoverSearchDirective.$inject = []\r\n\r\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverSearch\", DiscoverSearchDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: discover/services/discover-projects.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass DiscoverProjectsService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgResources\",\r\n        \"tgProjectsService\"\r\n    ]\r\n\r\n    _discoverParams = {\r\n        discover_mode: true\r\n    }\r\n\r\n    constructor: (@rs, @projectsService) ->\r\n        @._mostLiked = Immutable.List()\r\n        @._mostActive = Immutable.List()\r\n        @._featured = Immutable.List()\r\n        @._searchResult = Immutable.List()\r\n        @._projectsCount = 0\r\n\r\n        @.decorate = @projectsService._decorate.bind(@projectsService)\r\n\r\n        taiga.defineImmutableProperty @, \"mostLiked\", () => return @._mostLiked\r\n        taiga.defineImmutableProperty @, \"mostActive\", () => return @._mostActive\r\n        taiga.defineImmutableProperty @, \"featured\", () => return @._featured\r\n        taiga.defineImmutableProperty @, \"searchResult\", () => return @._searchResult\r\n        taiga.defineImmutableProperty @, \"nextSearchPage\", () => return @._nextSearchPage\r\n        taiga.defineImmutableProperty @, \"projectsCount\", () => return @._projectsCount\r\n\r\n    fetchMostLiked: (params) ->\r\n        _params = _.extend({}, _discoverParams, params)\r\n        return @rs.projects.getProjects(_params, false)\r\n            .then (result) =>\r\n                data = result.data.slice(0, 5)\r\n\r\n                projects = Immutable.fromJS(data)\r\n                projects = projects.map(@.decorate)\r\n\r\n                @._mostLiked = projects\r\n\r\n    fetchMostActive: (params) ->\r\n        _params = _.extend({}, _discoverParams, params)\r\n        return @rs.projects.getProjects(_params, false)\r\n            .then (result) =>\r\n                data = result.data.slice(0, 5)\r\n\r\n                projects = Immutable.fromJS(data)\r\n                projects = projects.map(@.decorate)\r\n\r\n                @._mostActive = projects\r\n\r\n    fetchFeatured: () ->\r\n        _params = _.extend({}, _discoverParams)\r\n        _params.is_featured = true\r\n\r\n        return @rs.projects.getProjects(_params, false)\r\n            .then (result) =>\r\n                data = result.data.slice(0, 4)\r\n\r\n                projects = Immutable.fromJS(data)\r\n                projects = projects.map(@.decorate)\r\n\r\n                @._featured = projects\r\n\r\n    resetSearchList: () ->\r\n        @._searchResult = Immutable.List()\r\n\r\n    fetchStats: () ->\r\n        return @rs.stats.discover().then (discover) =>\r\n            @._projectsCount = discover.getIn(['projects', 'total'])\r\n\r\n    fetchSearch: (params) ->\r\n        _params = _.extend({}, _discoverParams, params)\r\n        return @rs.projects.getProjects(_params)\r\n            .then (result) =>\r\n                @._nextSearchPage = !!result.headers('X-Pagination-Next')\r\n\r\n                projects = Immutable.fromJS(result.data)\r\n                projects = projects.map(@.decorate)\r\n\r\n                @._searchResult = @._searchResult.concat(projects)\r\n\r\nangular.module(\"taigaDiscover\").service(\"tgDiscoverProjectsService\", DiscoverProjectsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/create-epic/create-epic.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ntrim = taiga.trim\r\ngetRandomDefaultColor = taiga.getRandomDefaultColor\r\n\r\n\r\nclass CreateEpicController\r\n    @.$inject = [\r\n        \"$tgConfirm\"\r\n        \"tgProjectService\",\r\n        \"tgEpicsService\",\r\n        \"$tgAnalytics\"\r\n    ]\r\n\r\n    constructor: (@confirm, @projectService, @epicsService, @analytics) ->\r\n        # NOTE: To use Checksley setFormErrors() and validateForm()\r\n        #       are defined in the directive.\r\n\r\n        # NOTE: We use project as no inmutable object to make\r\n        #       the code compatible with the old code\r\n        @.project = @projectService.project.toJS()\r\n\r\n        @.newEpic = {\r\n            color: getRandomDefaultColor()\r\n            status: @.project.default_epic_status\r\n            tags: []\r\n        }\r\n        @.attachments = Immutable.List()\r\n\r\n        @.loading = false\r\n\r\n    createEpic: () ->\r\n        return if not @.validateForm()\r\n\r\n        @.loading = true\r\n\r\n        @epicsService.createEpic(@.newEpic, @.attachments)\r\n            .then (response) => # On success\r\n                @analytics.trackEvent(\"epic\", \"create\", \"create epic\", 1)\r\n                @.onCreateEpic()\r\n                @.loading = false\r\n            .catch (response) => # On error\r\n                @.loading = false\r\n                @.setFormErrors(response.data)\r\n                if response.data._error_message\r\n                    @confirm.notify(\"error\", response.data._error_message)\r\n\r\n    # Color selector\r\n    selectColor: (color) ->\r\n        @.newEpic.color = color\r\n\r\n    # Tags\r\n    addTag: (name, color) ->\r\n        name = trim(name.toLowerCase())\r\n\r\n        if not _.find(@.newEpic.tags, (it) -> it[0] == name)\r\n            @.newEpic.tags.push([name, color])\r\n\r\n    deleteTag: (tag) ->\r\n        _.remove @.newEpic.tags, (it) -> it[0] == tag[0]\r\n\r\n    # Attachments\r\n    addAttachment: (attachment) ->\r\n        @.attachments.push(attachment)\r\n\r\nangular.module(\"taigaEpics\").controller(\"CreateEpicCtrl\", CreateEpicController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/create-epic/create-epic.directive.coffee\r\n###\r\n\r\nCreateEpicDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        form = el.find(\"form\").checksley()\r\n\r\n        ctrl.validateForm = =>\r\n            return form.validate()\r\n\r\n        ctrl.setFormErrors = (errors) =>\r\n            form.setErrors(errors)\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"epics/create-epic/create-epic.html\",\r\n        controller: \"CreateEpicCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            onCreateEpic: '&'\r\n        },\r\n        scope: {}\r\n    }\r\n\r\nangular.module('taigaEpics').directive(\"tgCreateEpic\", CreateEpicDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epic-row/epic-row.controller.coffee\r\n###\r\n\r\nclass EpicRowController\r\n    @.$inject = [\r\n        \"$tgConfirm\",\r\n        \"tgProjectService\",\r\n        \"tgEpicsService\"\r\n    ]\r\n\r\n    constructor: (@confirm, @projectService, @epicsService) ->\r\n        @.displayUserStories = false\r\n        @.displayAssignedTo = false\r\n        @.displayStatusList = false\r\n        @.loadingStatus = false\r\n\r\n        # NOTE: We use project as no inmutable object to make\r\n        #       the code compatible with the old code\r\n        @.project = @projectService.project.toJS()\r\n\r\n        @._calculateProgressBar()\r\n\r\n    _calculateProgressBar: () ->\r\n        if @.epic.getIn(['status_extra_info', 'is_closed']) == true\r\n            @.percentage = \"100%\"\r\n        else\r\n            progress = @.epic.getIn(['user_stories_counts', 'progress'])\r\n            total = @.epic.getIn(['user_stories_counts', 'total'])\r\n            if total == 0\r\n                @.percentage = \"0%\"\r\n            else\r\n                @.percentage = \"#{progress * 100 / total}%\"\r\n\r\n    canEditEpics: () ->\r\n        return @projectService.hasPermission(\"modify_epic\")\r\n\r\n    toggleUserStoryList: () ->\r\n        if !@.displayUserStories\r\n            @epicsService.listRelatedUserStories(@.epic)\r\n                .then (userStories) =>\r\n                    @.epicStories = userStories\r\n                    @.displayUserStories = true\r\n                .catch =>\r\n                    @confirm.notify('error')\r\n        else\r\n            @.displayUserStories = false\r\n\r\n    updateStatus: (statusId) ->\r\n        @.displayStatusList = false\r\n        @.loadingStatus = true\r\n        return @epicsService.updateEpicStatus(@.epic, statusId)\r\n            .catch () =>\r\n                @confirm.notify('error')\r\n            .finally () =>\r\n                @.loadingStatus = false\r\n\r\n    updateAssignedTo: (member) ->\r\n        @.assignLoader = true\r\n        return @epicsService.updateEpicAssignedTo(@.epic, member?.id or null)\r\n            .catch () =>\r\n                @confirm.notify('error')\r\n            .then () =>\r\n                @.assignLoader = false\r\n\r\nangular.module(\"taigaEpics\").controller(\"EpicRowCtrl\", EpicRowController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epic-row/epic-row.directive.coffee\r\n###\r\n\r\nEpicRowDirective = () ->\r\n    return {\r\n        templateUrl:\"epics/dashboard/epic-row/epic-row.html\",\r\n        controller: \"EpicRowCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            epic: '=',\r\n            column: '='\r\n        }\r\n    }\r\n\r\nangular.module('taigaEpics').directive(\"tgEpicRow\", EpicRowDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epics-dashboard.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\n\r\nclass EpicsDashboardController\r\n    @.$inject = [\r\n        \"$routeParams\",\r\n        \"tgErrorHandlingService\",\r\n        \"tgLightboxFactory\",\r\n        \"lightboxService\",\r\n        \"$tgConfirm\",\r\n        \"tgProjectService\",\r\n        \"tgEpicsService\",\r\n        \"tgAppMetaService\",\r\n        \"$translate\"\r\n    ]\r\n\r\n    constructor: (@params, @errorHandlingService, @lightboxFactory, @lightboxService,\r\n                  @confirm, @projectService, @epicsService, @appMetaService, @translate) ->\r\n\r\n        @.sectionName = \"EPICS.SECTION_NAME\"\r\n\r\n        taiga.defineImmutableProperty @, 'project', () => return @projectService.project\r\n        taiga.defineImmutableProperty @, 'epics', () => return @epicsService.epics\r\n\r\n        @appMetaService.setfn @._setMeta.bind(this)\r\n\r\n    _setMeta: () ->\r\n        return null if !@.project\r\n\r\n        ctx = {\r\n            projectName: @.project.get(\"name\")\r\n            projectDescription: @.project.get(\"description\")\r\n        }\r\n\r\n        return {\r\n            title: @translate.instant(\"EPICS.PAGE_TITLE\", ctx)\r\n            description: @translate.instant(\"EPICS.PAGE_DESCRIPTION\", ctx)\r\n        }\r\n\r\n    loadInitialData: () ->\r\n        @epicsService.clear()\r\n        return @projectService.setProjectBySlug(@params.pslug)\r\n            .then () =>\r\n                if not @projectService.isEpicsDashboardEnabled()\r\n                    return @errorHandlingService.notFound()\r\n                if not @projectService.hasPermission(\"view_epics\")\r\n                    return @errorHandlingService.permissionDenied()\r\n\r\n                return @epicsService.fetchEpics()\r\n\r\n    canCreateEpics: () ->\r\n        return @projectService.hasPermission(\"add_epic\")\r\n\r\n    onCreateEpic: () ->\r\n        onCreateEpic =  () =>\r\n            @lightboxService.closeAll()\r\n            @confirm.notify(\"success\")\r\n            return # To prevent error https://docs.angularjs.org/error/$parse/isecdom?p0=onCreateEpic()\r\n\r\n        @lightboxFactory.create('tg-create-epic', {\r\n            \"class\": \"lightbox lightbox-create-epic open\"\r\n            \"on-create-epic\": \"onCreateEpic()\"\r\n        }, {\r\n            \"onCreateEpic\": onCreateEpic.bind(this)\r\n        })\r\n\r\nangular.module(\"taigaEpics\").controller(\"EpicsDashboardCtrl\", EpicsDashboardController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epics-sortable/epics-sortable.directive.coffee\r\n###\r\n\r\nEpicsSortableDirective = ($parse, projectService) ->\r\n    link = (scope, el, attrs) ->\r\n        return if not projectService.hasPermission(\"modify_epic\")\r\n\r\n        callback = $parse(attrs.tgEpicsSortable)\r\n\r\n        drake = dragula([el[0]], {\r\n            copySortSource: false\r\n            copy: false\r\n            mirrorContainer: el[0]\r\n            moves: (item) ->\r\n                return $(item).is('div.epics-table-body-row')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            itemEl = $(item)\r\n\r\n            epic = itemEl.scope().epic\r\n            newIndex = itemEl.index()\r\n\r\n            scope.$apply () ->\r\n                callback(scope, {epic: epic, newIndex: newIndex})\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n        scope.$on \"$destroy\", ->\r\n            el.off()\r\n            drake.destroy()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nEpicsSortableDirective.$inject = [\r\n    \"$parse\",\r\n    \"tgProjectService\"\r\n]\r\n\r\nangular.module(\"taigaComponents\").directive(\"tgEpicsSortable\", EpicsSortableDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epics-table/epics-table.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ngenerateHash = @.taiga.generateHash\r\n\r\nclass EpicsTableController\r\n    @.$inject = [\r\n        \"$tgConfirm\",\r\n        \"tgEpicsService\",\r\n        \"$timeout\",\r\n        \"$tgStorage\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@confirm, @epicsService, @timeout, @storage, @projectService) ->\r\n        @.hash = generateHash([@projectService.project.get('id'), 'epics'])\r\n        @.displayOptions = false\r\n        @.displayVotes = true\r\n        @.column = @storage.get(@.hash, {\r\n            votes: true,\r\n            name: true,\r\n            project: true,\r\n            sprint: true,\r\n            assigned: true,\r\n            status: true,\r\n            progress: true\r\n        })\r\n\r\n        taiga.defineImmutableProperty @, 'epics', () => return @epicsService.epics\r\n        taiga.defineImmutableProperty @, 'disabledEpicsPagination', () => return @epicsService._disablePagination\r\n        taiga.defineImmutableProperty @, 'loadingEpics', () => return @epicsService._loadingEpics\r\n\r\n    toggleEpicTableOptions: () ->\r\n        @.displayOptions = !@.displayOptions\r\n\r\n    reorderEpic: (epic, newIndex) ->\r\n        if epic.get('epics_order') == newIndex\r\n            return null\r\n\r\n        @epicsService.reorderEpic(epic, newIndex)\r\n            .then null, () => # on error\r\n                @confirm.notify(\"error\")\r\n\r\n    nextPage: () ->\r\n        @epicsService.nextPage()\r\n\r\n    hoverEpicTableOption: () ->\r\n        if @.timer\r\n            @timeout.cancel(@.timer)\r\n\r\n    hideEpicTableOption: () ->\r\n        return @.timer = @timeout (=> @.displayOptions = false), 400\r\n\r\n    updateViewOptions: () ->\r\n        @storage.set(@.hash, @.column)\r\n\r\nangular.module(\"taigaEpics\").controller(\"EpicsTableCtrl\", EpicsTableController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/epics-table/epics-table.directive.coffee\r\n###\r\n\r\nEpicsTableDirective = () ->\r\n    return {\r\n        templateUrl:\"epics/dashboard/epics-table/epics-table.html\",\r\n        controller: \"EpicsTableCtrl\",\r\n        controllerAs: \"vm\",\r\n        scope: {}\r\n    }\r\n\r\n\r\nangular.module('taigaEpics').directive(\"tgEpicsTable\", EpicsTableDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/story-row/story-row.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaEpics\")\r\n\r\nclass StoryRowController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @._calculateProgressBar()\r\n\r\n    _calculateProgressBar: () ->\r\n        if @.story.get('is_closed') == true\r\n            @.percentage = \"100%\"\r\n        else\r\n            totalTasks = @.story.get('tasks').size\r\n            totalTasksCompleted = @.story.get('tasks').filter((it) -> it.get(\"is_closed\")).size\r\n            if totalTasks == 0\r\n                @.percentage = \"0%\"\r\n            else\r\n                @.percentage = \"#{totalTasksCompleted * 100 / totalTasks}%\"\r\n\r\nmodule.controller(\"StoryRowCtrl\", StoryRowController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/dashboard/story-row/story-row.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\n\r\nStoryRowDirective = () ->\r\n    return {\r\n        templateUrl:\"epics/dashboard/story-row/story-row.html\",\r\n        controller: \"StoryRowCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            story: '=',\r\n            column: '='\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgStoryRow\", StoryRowDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/epics.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass EpicsService\r\n    @.$inject = [\r\n        'tgProjectService',\r\n        'tgAttachmentsService'\r\n        'tgResources',\r\n        'tgXhrErrorService'\r\n    ]\r\n\r\n    constructor: (@projectService, @attachmentsService, @resources, @xhrError) ->\r\n        @.clear()\r\n\r\n        taiga.defineImmutableProperty @, 'epics', () => return @._epics\r\n\r\n    clear: () ->\r\n        @._loadingEpics = false\r\n        @._disablePagination = false\r\n        @._page = 1\r\n        @._epics = Immutable.List()\r\n\r\n    fetchEpics: (reset = false) ->\r\n        @._loadingEpics = true\r\n        @._disablePagination = true\r\n\r\n        return @resources.epics.list(@projectService.project.get('id'), @._page)\r\n            .then (result) =>\r\n                if reset\r\n                    @.clear()\r\n                    @._epics = result.list\r\n                else\r\n                    @._epics = @._epics.concat(result.list)\r\n\r\n                @._loadingEpics = false\r\n\r\n                @._disablePagination = !result.headers('x-pagination-next')\r\n            .catch (xhr) =>\r\n                @xhrError.response(xhr)\r\n\r\n    nextPage: () ->\r\n        @._page++\r\n\r\n        @.fetchEpics()\r\n\r\n    listRelatedUserStories: (epic) ->\r\n        return @resources.userstories.listInEpic(epic.get('id'))\r\n\r\n    createEpic: (epicData, attachments, projectId) ->\r\n        if projectId\r\n            epicData.project = projectId\r\n        else\r\n            epicData.project = @projectService.project.get('id')\r\n\r\n        return @resources.epics.post(epicData)\r\n            .then (epic) =>\r\n                if !attachments\r\n                    return epic\r\n                else\r\n                    promises = _.map attachments.toJS(), (attachment) =>\r\n                        @attachmentsService.upload(\r\n                            attachment.file, epic.get('id'), epic.get('project'), 'epic')\r\n\r\n                    Promise.all(promises).then(@.fetchEpics.bind(this, true))\r\n\r\n\r\n    reorderEpic: (epic, newIndex) ->\r\n        orderList = {}\r\n        @._epics.forEach (it) ->\r\n            orderList[it.get('id')] = it.get('epics_order')\r\n\r\n        withoutMoved = @.epics.filter (it) => it.get('id') != epic.get('id')\r\n        beforeDestination = withoutMoved.slice(0, newIndex)\r\n        afterDestination = withoutMoved.slice(newIndex)\r\n\r\n        previous = beforeDestination.last()\r\n        newOrder = if !previous then 0 else previous.get('epics_order') + 1\r\n\r\n        orderList[epic.get('id')] = newOrder\r\n\r\n        previousWithTheSameOrder = beforeDestination.filter (it) =>\r\n            it.get('epics_order') == previous.get('epics_order')\r\n\r\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) =>\r\n            [it.get('id'), it.get('epics_order')]\r\n        ).toJS()\r\n\r\n        afterDestination.forEach (it) -> orderList[it.get('id')] = it.get('epics_order') + 1\r\n\r\n        @._epics = @._epics.map (it) -> it.set('epics_order', orderList[it.get('id')])\r\n        @._epics = @._epics.sortBy (it) -> it.get('epics_order')\r\n\r\n        data = {\r\n            epics_order: newOrder,\r\n            version: epic.get('version')\r\n        }\r\n\r\n        return @resources.epics.reorder(epic.get('id'), data, setOrders).then (newEpic) =>\r\n            @._epics = @._epics.map (it) ->\r\n                if it.get('id') == newEpic.get('id')\r\n                    return newEpic\r\n\r\n                return it\r\n\r\n    reorderRelatedUserstory: (epic, epicUserstories, userstory, newIndex) ->\r\n        withoutMoved = epicUserstories.filter (it) => it.get('id') != userstory.get('id')\r\n        beforeDestination = withoutMoved.slice(0, newIndex)\r\n\r\n        previous = beforeDestination.last()\r\n        newOrder = if !previous then 0 else previous.get('epic_order') + 1\r\n\r\n        previousWithTheSameOrder = beforeDestination.filter (it) =>\r\n            it.get('epic_order') == previous.get('epic_order')\r\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) =>\r\n            [it.get('id'), it.get('epic_order')]\r\n        ).toJS()\r\n\r\n        data = {\r\n            order: newOrder\r\n        }\r\n        epicId = epic.get('id')\r\n        userstoryId = userstory.get('id')\r\n        return @resources.epics.reorderRelatedUserstory(epicId, userstoryId, data, setOrders)\r\n            .then () =>\r\n                return @.listRelatedUserStories(epic)\r\n\r\n    replaceEpic: (epic) ->\r\n        @._epics = @._epics.map (it) ->\r\n            if it.get('id') == epic.get('id')\r\n                return epic\r\n\r\n            return it\r\n\r\n    updateEpicStatus: (epic, statusId) ->\r\n        data = {\r\n            status: statusId,\r\n            version: epic.get('version')\r\n        }\r\n\r\n        return @resources.epics.patch(epic.get('id'), data)\r\n            .then(@.replaceEpic.bind(this))\r\n\r\n    updateEpicAssignedTo: (epic, userId) ->\r\n        data = {\r\n            assigned_to: userId,\r\n            version: epic.get('version')\r\n        }\r\n\r\n        return @resources.epics.patch(epic.get('id'), data)\r\n            .then(@.replaceEpic.bind(this))\r\n\r\nangular.module('taigaEpics').service('tgEpicsService', EpicsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstories-controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaEpics\")\r\n\r\nclass RelatedUserStoriesController\r\n    @.$inject = [\r\n        \"tgProjectService\",\r\n        \"tgEpicsService\"\r\n    ]\r\n\r\n    constructor: (@projectService, @epicsService) ->\r\n        @.sectionName = \"Epics\"\r\n        @.showCreateRelatedUserstoriesLightbox = false\r\n\r\n    showRelatedUserStoriesSection: () ->\r\n        return @projectService.hasPermission(\"view_epics\") or @.userstories?.length > 0\r\n\r\n    userCanSort: () ->\r\n        return @projectService.hasPermission(\"modify_epic\")\r\n\r\n    loadRelatedUserstories: () ->\r\n        @epicsService.listRelatedUserStories(@.epic)\r\n            .then (userstories) =>\r\n                @.userstories = userstories\r\n\r\n    reorderRelatedUserstory: (us, newIndex) ->\r\n        @epicsService.reorderRelatedUserstory(@.epic, @.userstories, us, newIndex)\r\n            .then (userstories) =>\r\n                @.userstories = userstories\r\n\r\nmodule.controller(\"RelatedUserStoriesCtrl\", RelatedUserStoriesController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstories-create/related-userstories-create.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaEpics\")\r\n\r\nclass RelatedUserstoriesCreateController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"tgResources\",\r\n        \"$tgConfirm\",\r\n        \"$tgAnalytics\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @rs, @confirm, @analytics) ->\r\n        @.projects = null\r\n        @.projectUserstories = Immutable.List()\r\n        @.loading = false\r\n\r\n    loadProjects: () ->\r\n        if @.projects == null\r\n            @.projects = @currentUserService.projects.get(\"unblocked\")\r\n\r\n    filterUss: (selectedProjectId, filterText) ->\r\n        promise = @rs.userstories.listInAllProjects({project: selectedProjectId, q: filterText}, true).then (data) =>\r\n            excludeIds = @.epicUserstories.map((us) -> us.get('id'))\r\n            filteredData = data.filter((us) -> excludeIds.indexOf(us.get('id')) == -1)\r\n            @.projectUserstories = filteredData\r\n        promise\r\n\r\n    saveRelatedUserStory: (selectedUserstoryId, onSavedRelatedUserstory) ->\r\n        # This method assumes the following methods are binded to the controller:\r\n        # - validateExistingUserstoryForm\r\n        # - setExistingUserstoryFormErrors\r\n        # - loadRelatedUserstories\r\n        return if not @.validateExistingUserstoryForm()\r\n\r\n        @.loading = true\r\n\r\n        onError = (data) =>\r\n            @.loading = false\r\n            @confirm.notify(\"error\")\r\n            @.setExistingUserstoryFormErrors(data)\r\n\r\n        onSuccess = () =>\r\n            @analytics.trackEvent(\"epic related user story\", \"create\", \"create related user story on epic\", 1)\r\n            @.loading = false\r\n            if onSavedRelatedUserstory\r\n                onSavedRelatedUserstory()\r\n            @.loadRelatedUserstories()\r\n\r\n        epicId = @.epic.get('id')\r\n        @rs.epics.addRelatedUserstory(epicId, selectedUserstoryId).then(onSuccess, onError)\r\n\r\n    bulkCreateRelatedUserStories: (selectedProjectId, userstoriesText, onCreatedRelatedUserstory) ->\r\n        # This method assumes the following methods are binded to the controller:\r\n        # - validateNewUserstoryForm\r\n        # - setNewUserstoryFormErrors\r\n        # - loadRelatedUserstories\r\n        return if not @.validateNewUserstoryForm()\r\n\r\n        @.loading = true\r\n\r\n        onError = (data) =>\r\n            @.loading = false\r\n            @confirm.notify(\"error\")\r\n            @.setNewUserstoryFormErrors(data)\r\n\r\n        onSuccess = () =>\r\n            @analytics.trackEvent(\"epic related user story\", \"create\", \"create related user story on epic\", 1)\r\n            @.loading = false\r\n            if onCreatedRelatedUserstory\r\n                onCreatedRelatedUserstory()\r\n            @.loadRelatedUserstories()\r\n\r\n        epicId = @.epic.get('id')\r\n        @rs.epics.bulkCreateRelatedUserStories(epicId, selectedProjectId, userstoriesText).then(onSuccess, onError)\r\n\r\n\r\nmodule.controller(\"RelatedUserstoriesCreateCtrl\", RelatedUserstoriesCreateController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstories-create/related-userstories-create.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nRelatedUserstoriesCreateDirective = (@lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        newUserstoryForm = el.find(\".new-user-story-form\").checksley()\r\n        existingUserstoryForm = el.find(\".existing-user-story-form\").checksley()\r\n\r\n        ctrl.validateNewUserstoryForm = =>\r\n            return newUserstoryForm.validate()\r\n\r\n        ctrl.setNewUserstoryFormErrors = (errors) =>\r\n            newUserstoryForm.setErrors(errors)\r\n\r\n        ctrl.validateExistingUserstoryForm = =>\r\n            return existingUserstoryForm.validate()\r\n\r\n        ctrl.setExistingUserstoryFormErrors = (errors) =>\r\n            existingUserstoryForm.setErrors(errors)\r\n\r\n        scope.showLightbox = (selectedProjectId) ->\r\n            ctrl.loadProjects()\r\n            scope.selectProject(selectedProjectId).then () =>\r\n                lightboxService.open(el.find(\".lightbox-create-related-user-stories\"))\r\n\r\n        scope.closeLightbox = () ->\r\n            scope.selectedUserstory = null\r\n            scope.searchUserstory = \"\"\r\n            scope.relatedUserstoriesText = \"\"\r\n            lightboxService.close(el.find(\".lightbox-create-related-user-stories\"))\r\n\r\n        scope.$watch 'vm.project', (project) ->\r\n            if project?\r\n              scope.selectedProject = project.get('id')\r\n\r\n        scope.selectProject = (selectedProjectId) ->\r\n            scope.selectedUserstory = null\r\n            scope.searchUserstory = \"\"\r\n            ctrl.filterUss(selectedProjectId, scope.searchUserstory)\r\n\r\n        scope.onUpdateSearchUserstory = debounceLeading 300, () ->\r\n            scope.selectedUserstory = null\r\n            ctrl.filterUss(scope.selectedProject, scope.searchUserstory)\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"epics/related-userstories/related-userstories-create/related-userstories-create.html\",\r\n        controller: \"RelatedUserstoriesCreateCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n              showCreateRelatedUserstoriesLightbox: \"=\"\r\n              project: \"=\"\r\n              epic: \"=\"\r\n              epicUserstories: \"=\"\r\n              loadRelatedUserstories:\"&\"\r\n        }\r\n\r\n    }\r\n\r\nRelatedUserstoriesCreateDirective.$inject = [\"lightboxService\",]\r\n\r\nmodule.directive(\"tgRelatedUserstoriesCreate\", RelatedUserstoriesCreateDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstories-sortable/related-userstories-sortable.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\n\r\nRelatedUserstoriesSortableDirective = ($parse, projectService) ->\r\n    link = (scope, el, attrs) ->\r\n        return if not projectService.hasPermission(\"modify_epic\")\r\n\r\n        callback = $parse(attrs.tgRelatedUserstoriesSortable)\r\n\r\n        drake = dragula([el[0]], {\r\n            copySortSource: false\r\n            copy: false\r\n            mirrorContainer: el[0]\r\n            moves: (item) ->\r\n                return $(item).is('tg-related-userstory-row')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            itemEl = $(item)\r\n            us = itemEl.scope().us\r\n            newIndex = itemEl.index()\r\n\r\n            scope.$apply () ->\r\n                callback(scope, {us: us, newIndex: newIndex})\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n        scope.$on \"$destroy\", ->\r\n            el.off()\r\n            drake.destroy()\r\n\r\n    return {\r\n        link: link\r\n    }\r\n\r\nRelatedUserstoriesSortableDirective.$inject = [\r\n    \"$parse\",\r\n    \"tgProjectService\"\r\n]\r\n\r\nmodule.directive(\"tgRelatedUserstoriesSortable\", RelatedUserstoriesSortableDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstories.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\n\r\nRelatedUserStoriesDirective = () ->\r\n    return {\r\n        templateUrl:\"epics/related-userstories/related-userstories.html\",\r\n        controller: \"RelatedUserStoriesCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            userstories: '=',\r\n            project: '='\r\n            epic: '='\r\n        }\r\n    }\r\n\r\nRelatedUserStoriesDirective.$inject = []\r\n\r\nmodule.directive(\"tgRelatedUserstories\", RelatedUserStoriesDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstory-row/related-userstory-row.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaEpics\")\r\n\r\nclass RelatedUserstoryRowController\r\n    @.$inject = [\r\n        \"tgAvatarService\",\r\n        \"$translate\",\r\n        \"$tgConfirm\",\r\n        \"tgResources\"\r\n    ]\r\n\r\n    constructor: (@avatarService, @translate, @confirm, @rs) ->\r\n\r\n    setAvatarData: () ->\r\n        member = @.userstory.get('assigned_to_extra_info')\r\n        @.avatar = @avatarService.getAvatar(member)\r\n\r\n    getAssignedToFullNameDisplay: () ->\r\n        if @.userstory.get('assigned_to')\r\n            return @.userstory.getIn(['assigned_to_extra_info', 'full_name_display'])\r\n\r\n        return @translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\")\r\n\r\n    onDeleteRelatedUserstory: () ->\r\n        title = @translate.instant(\"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.TITLE\")\r\n        message = @translate.instant(\r\n            \"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.MESSAGE\",\r\n            { epicSubject: @.epic.get('subject') }\r\n        )\r\n\r\n        return @confirm.ask(title, null, message)\r\n            .then (askResponse) =>\r\n                onError = () =>\r\n                    message = @translate.instant('EPIC.ERROR_UNLINK_RELATED_USERSTORY', {errorMessage: message})\r\n                    @confirm.notify(\"error\", null, message)\r\n                    askResponse.finish(false)\r\n\r\n                onSuccess = () =>\r\n                    @.loadRelatedUserstories()\r\n                    askResponse.finish()\r\n\r\n                epicId = @.epic.get('id')\r\n                userstoryId = @.userstory.get('id')\r\n                @rs.epics.deleteRelatedUserstory(epicId, userstoryId).then(onSuccess, onError)\r\n\r\nmodule.controller(\"RelatedUserstoryRowCtrl\", RelatedUserstoryRowController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: epics/related-userstories/related-userstory-row/related-userstory-row.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaEpics')\r\n\r\nRelatedUserstoryRowDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl.setAvatarData()\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"epics/related-userstories/related-userstory-row/related-userstory-row.html\",\r\n        controller: \"RelatedUserstoryRowCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            userstory: '='\r\n            epic: '='\r\n            project: '='\r\n            loadRelatedUserstories:\"&\"\r\n        }\r\n    }\r\n\r\nRelatedUserstoryRowDirective.$inject = []\r\n\r\nmodule.directive(\"tgRelatedUserstoryRow\", RelatedUserstoryRowDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: external-apps/external-app.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass ExternalAppController extends taiga.Controller\r\n    @.$inject = [\r\n        \"$routeParams\",\r\n        \"tgExternalAppsService\",\r\n        \"$window\",\r\n        \"tgCurrentUserService\",\r\n        \"$location\",\r\n        \"$tgNavUrls\",\r\n        \"tgXhrErrorService\",\r\n        \"tgLoader\"\r\n    ]\r\n\r\n    constructor: (@routeParams, @externalAppsService, @window, @currentUserService, @location,\r\n    @navUrls, @xhrError, @loader) ->\r\n        @loader.start(false)\r\n        @._applicationId = @routeParams.application\r\n        @._state = @routeParams.state\r\n        @._getApplicationToken()\r\n        @._user = @currentUserService.getUser()\r\n        @._application = null\r\n        nextUrl = encodeURIComponent(@location.url())\r\n        loginUrl = @navUrls.resolve(\"login\")\r\n        @.loginWithAnotherUserUrl = \"#{loginUrl}?next=#{nextUrl}\"\r\n\r\n        taiga.defineImmutableProperty @, \"user\", () => @._user\r\n        taiga.defineImmutableProperty @, \"application\", () => @._application\r\n\r\n    _redirect: (applicationToken) =>\r\n        nextUrl = applicationToken.get(\"next_url\")\r\n        @window.open(nextUrl, \"_self\")\r\n\r\n    _getApplicationToken: =>\r\n        return @externalAppsService.getApplicationToken(@._applicationId, @._state)\r\n            .then (data) =>\r\n                @._application = data.get(\"application\")\r\n                if data.get(\"auth_code\")\r\n                    @._redirect(data)\r\n                else\r\n                    @loader.pageLoaded()\r\n\r\n            .catch (xhr) =>\r\n                @loader.pageLoaded()\r\n                return @xhrError.response(xhr)\r\n\r\n    cancel: () ->\r\n        @window.history.back()\r\n\r\n    createApplicationToken:  =>\r\n        return @externalAppsService.authorizeApplicationToken(@._applicationId, @._state)\r\n            .then (data) =>\r\n                @._redirect(data)\r\n            .catch (xhr) =>\r\n                return @xhrError.response(xhr)\r\n\r\n\r\nangular.module(\"taigaExternalApps\").controller(\"ExternalApp\", ExternalAppController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: external-apps/external-app.service.coffee\r\n###\r\n\r\nclass ExternalAppsService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgResources\"\r\n    ]\r\n\r\n    constructor: (@rs) ->\r\n\r\n    getApplicationToken: (applicationId, state) ->\r\n        return @rs.externalapps.getApplicationToken(applicationId, state)\r\n\r\n    authorizeApplicationToken: (applicationId, state) ->\r\n        return @rs.externalapps.authorizeApplicationToken(applicationId, state)\r\n\r\nangular.module(\"taigaExternalApps\").service(\"tgExternalAppsService\", ExternalAppsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: feedback/feedback.service.coffee\r\n###\r\n\r\nclass FeedbackService extends taiga.Service\r\n    @.$inject = [\"tgLightboxFactory\"]\r\n\r\n    constructor: (@lightboxFactory) ->\r\n\r\n    sendFeedback: ->\r\n        @lightboxFactory.create(\"tg-lb-feedback\", {\r\n            \"class\": \"lightbox lightbox-feedback lightbox-generic-form\"\r\n        })\r\n\r\nangular.module(\"taigaFeedback\").service(\"tgFeedbackService\", FeedbackService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/activity/activity.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass ActivityService\r\n    @.$inject = [\r\n        'tgResources',\r\n        'tgXhrErrorService'\r\n    ]\r\n\r\n    constructor: (@rs, @xhrError) ->\r\n        @._contentType = null\r\n        @._objectId = null\r\n        @.clear()\r\n\r\n    clear: () ->\r\n        @.page = 1\r\n        @.loadingEntries = false\r\n        @.disablePagination = false\r\n        @.entries = Immutable.List()\r\n        @.count = null\r\n\r\n    fetchEntries: (reset = false) ->\r\n        if reset\r\n            @.page = 1\r\n        @.loadingEntries = true\r\n        @.disablePagination = true\r\n\r\n        return @rs.history.getHistory('activity', @._contentType, @._objectId, @.page)\r\n            .then (result) =>\r\n                if reset\r\n                    @.clear()\r\n                    @.entries = result.list\r\n                else\r\n                    @.entries = @.entries.concat(result.list)\r\n\r\n                @.loadingEntries = false\r\n                @.disablePagination = !result.headers('x-pagination-next')\r\n                @.count = result.headers('x-pagination-count')\r\n                \r\n                return @.entries\r\n            .catch (xhr) =>\r\n                @xhrError.response(@.entries)\r\n\r\n    nextPage: (historyType = 'comment') ->\r\n        @.page++\r\n        @.fetchEntries()\r\n\r\n    init: (contentType, objectId) ->\r\n        @._contentType = contentType\r\n        @._objectId = objectId\r\n        @.clear()\r\n\r\n\r\nangular.module('taigaHistory').service('tgActivityService', ActivityService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/comments/comment.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHistory\")\r\n\r\nclass CommentController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"tgCheckPermissionsService\",\r\n        \"tgLightboxFactory\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @permissionService, @lightboxFactory) ->\r\n        @.hiddenDeletedComment = true\r\n\r\n    showDeletedComment: () ->\r\n        @.hiddenDeletedComment = false\r\n\r\n    hideDeletedComment: () ->\r\n        @.hiddenDeletedComment = true\r\n\r\n    checkCancelComment: (event) ->\r\n        if event.keyCode == 27\r\n            @.onEditMode({commentId: @.comment.id})\r\n\r\n    canEditDeleteComment: () ->\r\n        if @currentUserService.getUser()\r\n            @.user = @currentUserService.getUser()\r\n            return @.user.get('id') == @.comment.user.pk || @permissionService.check('modify_project')\r\n\r\n    saveComment: (text, cb) ->\r\n        @.onEditComment({commentId: @.comment.id, commentData: text, callback: cb})\r\n\r\n    displayCommentHistory: () ->\r\n        @lightboxFactory.create('tg-lb-display-historic', {\r\n            \"class\": \"lightbox lightbox-display-historic\"\r\n            \"comment\": \"comment\"\r\n            \"name\": \"name\"\r\n            \"object\": \"object\"\r\n        }, {\r\n            \"comment\": @.comment\r\n            \"name\": @.name\r\n            \"object\": @.object\r\n        })\r\n\r\nmodule.controller(\"CommentCtrl\", CommentController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/comments/comment.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nCommentDirective = () ->\r\n\r\n    return {\r\n        scope: {\r\n            name: \"@\",\r\n            object: \"@\",\r\n            comment: \"<\",\r\n            type: \"<\",\r\n            loading: \"<\",\r\n            editing: \"<\",\r\n            deleting: \"<\",\r\n            objectId: \"<\",\r\n            editMode: \"<\",\r\n            onEditMode: \"&\",\r\n            onDeleteComment: \"&\",\r\n            onRestoreDeletedComment: \"&\",\r\n            onEditComment: \"&\"\r\n        },\r\n        templateUrl:\"history/comments/comment.html\",\r\n        bindToController: true,\r\n        controller: 'CommentCtrl',\r\n        controllerAs: \"vm\",\r\n    }\r\n\r\nmodule.directive(\"tgComment\", CommentDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/comments/comments.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHistory\")\r\n\r\nclass CommentsController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n\r\n    initializePermissions: () ->\r\n        @.canAddCommentPermission = 'comment_' + @.name\r\n\r\nmodule.controller(\"CommentsCtrl\", CommentsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/comments/comments.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nCommentsDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl.initializePermissions()\r\n\r\n    return {\r\n        scope: {\r\n            type: \"<\",\r\n            name: \"@\",\r\n            object: \"@\",\r\n            comments: \"<\",\r\n            onEditMode: \"&\",\r\n            onDeleteComment: \"&\",\r\n            onRestoreDeletedComment: \"&\",\r\n            onAddComment: \"&\",\r\n            onEditComment: \"&\",\r\n            editMode: \"<\",\r\n            loading: \"<\",\r\n            deleting: \"<\",\r\n            editing: \"<\",\r\n            projectId: \"=\"\r\n        },\r\n        templateUrl:\"history/comments/comments.html\",\r\n        bindToController: true,\r\n        controller: 'CommentsCtrl',\r\n        controllerAs: \"vm\"\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgComments\", CommentsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history-lightbox/comment-history-lightbox.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHistory\")\r\n\r\nclass LightboxDisplayHistoricController\r\n    @.$inject = [\r\n        \"$tgResources\",\r\n    ]\r\n\r\n    constructor: (@rs) ->\r\n\r\n    _loadHistoric: () ->\r\n        type = @.name\r\n        objectId = @.object\r\n        activityId = @.comment.id\r\n\r\n        @rs.history.getCommentHistory(type, objectId, activityId).then (data) =>\r\n            @.commentHistoryEntries = data\r\n\r\nmodule.controller(\"LightboxDisplayHistoricCtrl\", LightboxDisplayHistoricController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history-lightbox/comment-history-lightbox.directive.coffee\r\n###\r\n\r\nLightboxDisplayHistoricDirective = (lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl._loadHistoric()\r\n        lightboxService.open(el)\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            name: '=',\r\n            object: '=',\r\n            comment: '='\r\n        },\r\n        templateUrl:\"history/history-lightbox/comment-history-lightbox.html\",\r\n        controller: \"LightboxDisplayHistoricCtrl\",\r\n        controllerAs: \"vm\",\r\n        link: link\r\n    }\r\n\r\nLightboxDisplayHistoricDirective.$inject = [\r\n    \"lightboxService\"\r\n]\r\n\r\nangular.module('taigaHistory').directive(\"tgLbDisplayHistoric\", LightboxDisplayHistoricDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history-lightbox/history-entry.directive.coffee\r\n###\r\n\r\n\r\nHistoryEntryDirective = () ->\r\n    return {\r\n        scope: {\r\n            entry: \"<\"\r\n        },\r\n        templateUrl:\"history/history-lightbox/history-entry.html\",\r\n    }\r\n\r\nangular.module('taigaHistory').directive(\"tgHistoryEntry\", HistoryEntryDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history-tabs/history-tabs.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nHistoryTabsDirective = () ->\r\n    return {\r\n        templateUrl:\"history/history-tabs/history-tabs.html\",\r\n        scope: {\r\n            showCommentTab: \"&\",\r\n            showActivityTab: \"&\"\r\n            onActiveComments: \"&\",\r\n            onActiveActivities: \"&\",\r\n            onOrderComments: \"&\"\r\n            activeTab: \"<\",\r\n            commentsNum: \"<\",\r\n            activitiesNum: \"<\",\r\n            onReverse: \"<\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgHistoryTabs\", HistoryTabsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHistory\")\r\n\r\nclass HistorySectionController\r\n    @.$inject = [\r\n        \"$tgResources\",\r\n        \"$tgRepo\",\r\n        \"$tgStorage\",\r\n        \"tgProjectService\",\r\n        \"tgActivityService\"\r\n    ]\r\n\r\n    constructor: (@rs, @repo, @storage, @projectService, @activityService) ->\r\n        @.editing = null\r\n        @.deleting = null\r\n        @.editMode = {}\r\n        @.viewComments = true\r\n\r\n        @.reverse = @storage.get(\"orderComments\")\r\n\r\n        taiga.defineImmutableProperty @, 'disabledActivityPagination', () =>\r\n            return @activityService.disablePagination\r\n        taiga.defineImmutableProperty @, 'loadingActivity', () =>\r\n            return @activityService.loading\r\n\r\n    _loadHistory: () ->\r\n        @._loadComments()\r\n        @._loadActivity()\r\n\r\n    _loadActivity: () ->\r\n        @activityService.init(@.name, @.id)\r\n        @activityService.fetchEntries().then (response) =>\r\n            @.activitiesNum = @activityService.count\r\n            @.activities = response.toJS()\r\n\r\n    _loadComments: () ->\r\n        @rs.history.get(@.name, @.id).then (comments) =>\r\n            @.comments = _.filter(comments, (item) -> item.comment != \"\")\r\n            if @.reverse\r\n                @.comments - _.reverse(@.comments)\r\n            @.commentsNum = @.comments.length\r\n\r\n    nextActivityPage: () ->\r\n        @activityService.nextPage().then (response) =>\r\n            @.activities = response.toJS()\r\n\r\n    showHistorySection: () ->\r\n        return @.showCommentTab() or @.showActivityTab()\r\n\r\n    showCommentTab: () ->\r\n        return @.commentsNum > 0 or @projectService.hasPermission(\"comment_#{@.name}\")\r\n\r\n    showActivityTab: () ->\r\n        return @.activitiesNum > 0\r\n\r\n    toggleEditMode: (commentId) ->\r\n        @.editMode[commentId] = !@.editMode[commentId]\r\n\r\n    onActiveHistoryTab: (active) ->\r\n        @.viewComments = active\r\n\r\n    deleteComment: (commentId) ->\r\n        type = @.name\r\n        objectId = @.id\r\n        activityId = commentId\r\n        @.deleting = commentId\r\n        return @rs.history.deleteComment(type, objectId, activityId).then =>\r\n            @._loadComments()\r\n            @.deleting = null\r\n\r\n    editComment: (commentId, comment) ->\r\n        type = @.name\r\n        objectId = @.id\r\n        activityId = commentId\r\n        @.editing = commentId\r\n        return @rs.history.editComment(type, objectId, activityId, comment).then =>\r\n            @._loadComments()\r\n            @.toggleEditMode(commentId)\r\n            @.editing = null\r\n\r\n    restoreDeletedComment: (commentId) ->\r\n        type = @.name\r\n        objectId = @.id\r\n        activityId = commentId\r\n        @.editing = commentId\r\n        return @rs.history.undeleteComment(type, objectId, activityId).then =>\r\n            @._loadComments()\r\n            @.editing = null\r\n\r\n    addComment: () ->\r\n        @.editMode = {}\r\n        @.editing = null\r\n        @._loadComments()\r\n\r\n    onOrderComments: () ->\r\n        @.reverse = !@.reverse\r\n        @storage.set(\"orderComments\", @.reverse)\r\n        @._loadComments()\r\n\r\nmodule.controller(\"HistorySection\", HistorySectionController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nbindOnce = @.taiga.bindOnce\r\n\r\nHistorySectionDirective = () ->\r\n    link = (scope, el, attr, ctrl) ->\r\n        scope.$on \"object:updated\", -> ctrl._loadActivity()\r\n\r\n        scope.$watch 'vm.id', (value) ->\r\n            ctrl._loadHistory()\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"history/history.html\",\r\n        controller: \"HistorySection\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            type: \"=\",\r\n            name: \"@\",\r\n            id: \"=\",\r\n            projectId: \"=\"\r\n        }\r\n    }\r\n\r\nHistorySectionDirective.$inject = []\r\n\r\nmodule.directive(\"tgHistorySection\", HistorySectionDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history/history-diff.controller.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaHistory\")\r\n\r\nclass ActivitiesDiffController\r\n    @.$inject = [\r\n    ]\r\n\r\n    constructor: () ->\r\n\r\n    diffTags: () ->\r\n        if @.type == 'tags'\r\n            @.diffRemoveTags = _.difference(@.diff[0], @.diff[1]).toString()\r\n            @.diffAddTags = _.difference(@.diff[1], @.diff[0]).toString()\r\n\r\n\r\nmodule.controller(\"ActivitiesDiffCtrl\", ActivitiesDiffController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history/history-diff.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nHistoryDiffDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl.diffTags()\r\n\r\n    return {\r\n        scope: {\r\n            type: \"<\",\r\n            diff: \"<\"\r\n        },\r\n        templateUrl:\"history/history/history-diff.html\",\r\n        controller: \"ActivitiesDiffCtrl\",\r\n        controllerAs: 'vm',\r\n        bindToController: true,\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgHistoryDiff\", HistoryDiffDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: history/history/history.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaHistory')\r\n\r\nHistoryDirective = () ->\r\n    link = (scope, el, attrs) ->\r\n\r\n    return {\r\n        scope: {\r\n            activities: \"<\"\r\n        },\r\n        templateUrl:\"history/history/history.html\",\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgHistory\", HistoryDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/duties/duty.directive.coffee\r\n###\r\n\r\nDutyDirective = (navurls, $translate) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {}\r\n        scope.vm.duty = scope.duty\r\n        scope.vm.type = scope.type\r\n\r\n        scope.vm.getDutyType = () ->\r\n            if scope.vm.duty\r\n                if scope.vm.duty.get('_name') == \"epics\"\r\n                    return $translate.instant(\"COMMON.EPIC\")\r\n                if scope.vm.duty.get('_name') == \"userstories\"\r\n                    return $translate.instant(\"COMMON.USER_STORY\")\r\n                if scope.vm.duty.get('_name') == \"tasks\"\r\n                    return $translate.instant(\"COMMON.TASK\")\r\n                if scope.vm.duty.get('_name') == \"issues\"\r\n                    return $translate.instant(\"COMMON.ISSUE\")\r\n\r\n    return {\r\n        templateUrl: \"home/duties/duty.html\"\r\n        scope: {\r\n            \"duty\": \"=tgDuty\",\r\n            \"type\": \"@\"\r\n        }\r\n        link: link\r\n    }\r\n\r\nDutyDirective.$inject = [\r\n    \"$tgNavUrls\",\r\n    \"$translate\"\r\n]\r\n\r\nangular.module(\"taigaHome\").directive(\"tgDuty\", DutyDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/home.controller.coffee\r\n###\r\n\r\nclass HomeController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"$location\",\r\n        \"$tgNavUrls\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @location, @navUrls) ->\r\n        if not @currentUserService.getUser()\r\n            @location.path(@navUrls.resolve(\"discover\"))\r\n\r\n\r\nangular.module(\"taigaHome\").controller(\"Home\", HomeController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/home.service.coffee\r\n###\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass HomeService extends taiga.Service\r\n    @.$inject = [\r\n        \"$tgNavUrls\",\r\n        \"tgResources\",\r\n        \"tgProjectsService\"\r\n    ]\r\n\r\n    constructor: (@navurls, @rs, @projectsService) ->\r\n\r\n    _attachProjectInfoToWorkInProgress: (workInProgress, projectsById) ->\r\n        _attachProjectInfoToDuty = (duty, objType) =>\r\n            project = projectsById.get(String(duty.get('project')))\r\n\r\n            ctx = {\r\n                project: project.get('slug')\r\n                ref: duty.get('ref')\r\n            }\r\n\r\n            url = @navurls.resolve(\"project-#{objType}-detail\", ctx)\r\n\r\n            duty = duty.set('url', url)\r\n            duty = duty.set('project', project)\r\n            duty = duty.set(\"_name\", objType)\r\n\r\n            return duty\r\n\r\n        _getValidDutiesAndAttachProjectInfo = (duties, dutyType)->\r\n            # Exclude duties where I'm not member of the project\r\n            duties = duties.filter((duty) ->\r\n                return projectsById.get(String(duty.get('project'))))\r\n\r\n            duties = duties.map (duty) ->\r\n                return _attachProjectInfoToDuty(duty, dutyType)\r\n\r\n            return duties\r\n\r\n        assignedTo = workInProgress.get(\"assignedTo\")\r\n\r\n        if assignedTo.get(\"epics\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"epics\"), \"epics\")\r\n            assignedTo = assignedTo.set(\"epics\", _duties)\r\n\r\n        if assignedTo.get(\"userStories\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"userStories\"), \"userstories\")\r\n            assignedTo = assignedTo.set(\"userStories\", _duties)\r\n\r\n        if assignedTo.get(\"tasks\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"tasks\"), \"tasks\")\r\n            assignedTo = assignedTo.set(\"tasks\", _duties)\r\n\r\n        if assignedTo.get(\"issues\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"issues\"), \"issues\")\r\n            assignedTo = assignedTo.set(\"issues\", _duties)\r\n\r\n\r\n        watching = workInProgress.get(\"watching\")\r\n\r\n        if watching.get(\"epics\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"epics\"), \"epics\")\r\n            watching = watching.set(\"epics\", _duties)\r\n\r\n        if watching.get(\"userStories\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"userStories\"), \"userstories\")\r\n            watching = watching.set(\"userStories\", _duties)\r\n\r\n        if watching.get(\"tasks\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"tasks\"), \"tasks\")\r\n            watching = watching.set(\"tasks\", _duties)\r\n\r\n        if watching.get(\"issues\")\r\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"issues\"), \"issues\")\r\n            watching = watching.set(\"issues\", _duties)\r\n\r\n        workInProgress = workInProgress.set(\"assignedTo\", assignedTo)\r\n        workInProgress = workInProgress.set(\"watching\", watching)\r\n\r\n    getWorkInProgress: (userId) ->\r\n        projectsById = Immutable.Map()\r\n\r\n        projectsPromise = @projectsService.getProjectsByUserId(userId).then (projects) ->\r\n            projectsById = Immutable.fromJS(groupBy(projects.toJS(), (p) -> p.id))\r\n\r\n        assignedTo = Immutable.Map()\r\n\r\n        params_epics = {\r\n            status__is_closed: false\r\n            assigned_to: userId\r\n        }\r\n\r\n        params_uss = {\r\n            is_closed: false\r\n            assigned_users: userId\r\n        }\r\n\r\n        params_tasks = {\r\n            status__is_closed: false\r\n            assigned_to: userId\r\n        }\r\n\r\n        params_issues = {\r\n            status__is_closed: false\r\n            assigned_to: userId\r\n        }\r\n\r\n        assignedEpicsPromise = @rs.epics.listInAllProjects(params_epics).then (epics) ->\r\n            assignedTo = assignedTo.set(\"epics\", epics)\r\n\r\n        assignedUserStoriesPromise = @rs.userstories.listInAllProjects(params_uss).then (userstories) ->\r\n            assignedTo = assignedTo.set(\"userStories\", userstories)\r\n\r\n        assignedTasksPromise = @rs.tasks.listInAllProjects(params_tasks).then (tasks) ->\r\n            assignedTo = assignedTo.set(\"tasks\", tasks)\r\n\r\n        assignedIssuesPromise = @rs.issues.listInAllProjects(params_issues).then (issues) ->\r\n            assignedTo = assignedTo.set(\"issues\", issues)\r\n\r\n        params_epics = {\r\n            status__is_closed: false\r\n            watchers: userId\r\n        }\r\n\r\n        params_uss = {\r\n            is_closed: false\r\n            watchers: userId\r\n        }\r\n\r\n        params_tasks = {\r\n            status__is_closed: false\r\n            watchers: userId\r\n        }\r\n\r\n        params_issues = {\r\n            status__is_closed: false\r\n            watchers: userId\r\n        }\r\n\r\n        watching = Immutable.Map()\r\n\r\n        watchingEpicsPromise = @rs.epics.listInAllProjects(params_epics).then (epics) ->\r\n            watching = watching.set(\"epics\", epics)\r\n\r\n        watchingUserStoriesPromise = @rs.userstories.listInAllProjects(params_uss).then (userstories) ->\r\n            watching = watching.set(\"userStories\", userstories)\r\n\r\n        watchingTasksPromise = @rs.tasks.listInAllProjects(params_tasks).then (tasks) ->\r\n            watching = watching.set(\"tasks\", tasks)\r\n\r\n        watchingIssuesPromise = @rs.issues.listInAllProjects(params_issues).then (issues) ->\r\n            watching = watching.set(\"issues\", issues)\r\n\r\n        workInProgress = Immutable.Map()\r\n\r\n        Promise.all([\r\n            projectsPromise,\r\n            assignedEpicsPromise,\r\n            watchingEpicsPromise,\r\n            assignedUserStoriesPromise,\r\n            watchingUserStoriesPromise,\r\n            assignedTasksPromise,\r\n            watchingTasksPromise,\r\n            assignedIssuesPromise,\r\n            watchingIssuesPromise\r\n        ]).then =>\r\n            workInProgress = workInProgress.set(\"assignedTo\", assignedTo)\r\n            workInProgress = workInProgress.set(\"watching\", watching)\r\n\r\n            workInProgress = @._attachProjectInfoToWorkInProgress(workInProgress, projectsById)\r\n\r\n            return workInProgress\r\n\r\nangular.module(\"taigaHome\").service(\"tgHomeService\", HomeService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/projects/home-project-list.directive.coffee\r\n###\r\n\r\nHomeProjectListDirective = (currentUserService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {}\r\n\r\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\r\n\r\n    directive = {\r\n        templateUrl: \"home/projects/home-project-list.html\"\r\n        scope: {}\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nHomeProjectListDirective.$inject = [\r\n    \"tgCurrentUserService\"\r\n]\r\n\r\nangular.module(\"taigaHome\").directive(\"tgHomeProjectList\", HomeProjectListDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/working-on/working-on.controller.coffee\r\n###\r\n\r\nclass WorkingOnController\r\n    @.$inject = [\r\n        \"tgHomeService\"\r\n    ]\r\n\r\n    constructor: (@homeService) ->\r\n        @.assignedTo = Immutable.Map()\r\n        @.watching = Immutable.Map()\r\n\r\n    _setAssignedTo: (workInProgress) ->\r\n        epics = workInProgress.get(\"assignedTo\").get(\"epics\")\r\n        userStories = workInProgress.get(\"assignedTo\").get(\"userStories\")\r\n        tasks = workInProgress.get(\"assignedTo\").get(\"tasks\")\r\n        issues = workInProgress.get(\"assignedTo\").get(\"issues\")\r\n\r\n        @.assignedTo = userStories.concat(tasks).concat(issues).concat(epics)\r\n        if @.assignedTo.size > 0\r\n            @.assignedTo = @.assignedTo.sortBy((elem) -> elem.get(\"modified_date\")).reverse()\r\n\r\n    _setWatching: (workInProgress) ->\r\n        epics = workInProgress.get(\"watching\").get(\"epics\")\r\n        userStories = workInProgress.get(\"watching\").get(\"userStories\")\r\n        tasks = workInProgress.get(\"watching\").get(\"tasks\")\r\n        issues = workInProgress.get(\"watching\").get(\"issues\")\r\n\r\n        @.watching = userStories.concat(tasks).concat(issues).concat(epics)\r\n        if @.watching.size > 0\r\n            @.watching = @.watching.sortBy((elem) -> elem.get(\"modified_date\")).reverse()\r\n\r\n    getWorkInProgress: (userId) ->\r\n        return @homeService.getWorkInProgress(userId).then (workInProgress) =>\r\n            @._setAssignedTo(workInProgress)\r\n            @._setWatching(workInProgress)\r\n\r\nangular.module(\"taigaHome\").controller(\"WorkingOn\", WorkingOnController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: home/working-on/working-on.directive.coffee\r\n###\r\n\r\nWorkingOnDirective = (homeService, currentUserService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        user = currentUserService.getUser()\r\n        # If we are not logged in the user will be null\r\n        if user\r\n          userId = user.get(\"id\")\r\n          ctrl.getWorkInProgress(userId)\r\n\r\n    return {\r\n        controller: \"WorkingOn\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"home/working-on/working-on.html\",\r\n        scope: {},\r\n        link: link\r\n    }\r\n\r\nWorkingOnDirective.$inject = [\r\n    \"tgHomeService\",\r\n    \"tgCurrentUserService\"\r\n]\r\n\r\nangular.module(\"taigaHome\").directive(\"tgWorkingOn\", WorkingOnDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/invite-members-form/invite-members-form.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\n\r\nclass InviteMembersFormController\r\n    @.$inject = [\r\n        \"tgProjectService\",\r\n        \"$tgResources\",\r\n        \"lightboxService\",\r\n        \"$tgConfirm\",\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@projectService, @rs, @lightboxService, @confirm, @rootScope) ->\r\n        @.project = @projectService.project\r\n        @.roles = @projectService.project.get('roles')\r\n        @.rolesValues = {}\r\n        @.loading = false\r\n        @.defaultMaxInvites = 4\r\n\r\n    _areRolesValidated: () ->\r\n        Object.defineProperty @, 'areRolesValidated', {\r\n            get: () =>\r\n                roleIds = _.filter Object.values(@.rolesValues), (it) -> return it\r\n                return roleIds.length == @.contactsToInvite.size + @.emailsToInvite.size\r\n        }\r\n\r\n    _checkLimitMemberships: () ->\r\n        if @.project.get('max_memberships') == null\r\n            @.membersLimit = @.defaultMaxInvites\r\n        else\r\n            pendingMembersCount = Math.max(@.project.get('max_memberships') - @.project.get('total_memberships'), 0)\r\n            @.membersLimit = Math.min(pendingMembersCount, @.defaultMaxInvites)\r\n\r\n        @.showWarningMessage = @.membersLimit < @.defaultMaxInvites\r\n\r\n    sendInvites: () ->\r\n        @.setInvitedContacts = []\r\n        _.forEach(@.rolesValues, (key, value) =>\r\n            @.setInvitedContacts.push({\r\n                'role_id': key\r\n                'username': value\r\n            })\r\n        )\r\n        @.loading = true\r\n        @rs.memberships.bulkCreateMemberships(\r\n            @.project.get('id'),\r\n            @.setInvitedContacts,\r\n            @.inviteContactsMessage\r\n        )\r\n            .then (response) => # On success\r\n                @projectService.fetchProject().then =>\r\n                    @.loading = false\r\n                    @lightboxService.closeAll()\r\n                    @rootScope.$broadcast(\"membersform:new:success\")\r\n                    @confirm.notify('success')\r\n            .catch (response) => # On error\r\n                @.loading = false\r\n                if response.data._error_message\r\n                    @confirm.notify(\"error\", response.data._error_message)\r\n\r\n\r\nangular.module(\"taigaAdmin\").controller(\"InviteMembersFormCtrl\", InviteMembersFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/invite-members-form/invite-members-form.directive.coffee\r\n###\r\n\r\nInviteMembersFormDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        ctrl._areRolesValidated()\r\n        ctrl._checkLimitMemberships()\r\n\r\n    return {\r\n        scope: {},\r\n        templateUrl:\"invite-members/invite-members-form/invite-members-form.html\",\r\n        controller: \"InviteMembersFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            contactsToInvite: '<',\r\n            emailsToInvite: '=',\r\n            onDisplayContactList: '&',\r\n            onRemoveInvitedContact: '&',\r\n            onRemoveInvitedEmail: '&',\r\n            onSendInvites: '&'\r\n        },\r\n        link: link\r\n    }\r\n\r\nangular.module(\"taigaAdmin\").directive(\"tgInviteMembersForm\", InviteMembersFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/lightbox-add-members.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass AddMembersController\r\n    @.$inject = [\r\n        \"tgUserService\",\r\n        \"tgCurrentUserService\",\r\n        \"tgProjectService\",\r\n    ]\r\n\r\n    constructor: (@userService, @currentUserService, @projectService) ->\r\n        @.contactsToInvite = Immutable.List()\r\n        @.emailsToInvite = Immutable.List()\r\n        @.displayContactList = false\r\n\r\n    _getContacts: () ->\r\n        userId = @currentUserService.getUser().get(\"id\")\r\n        excludeProjectId = @projectService.project.get(\"id\")\r\n\r\n        @userService.getContacts(userId, excludeProjectId).then (contacts) =>\r\n            @.contacts = contacts\r\n\r\n    _filterContacts: (invited) ->\r\n        @.contacts = @.contacts.filter( (contact) =>\r\n            contact.get('id') != invited.get('id')\r\n        )\r\n\r\n    inviteSuggested: (contact) ->\r\n        @.contactsToInvite = @.contactsToInvite.push(contact)\r\n        @._filterContacts(contact)\r\n        @.displayContactList = true\r\n\r\n    removeContact: (invited) ->\r\n        @.contactsToInvite = @.contactsToInvite.filter( (contact) =>\r\n            return contact.get('id') != invited.id\r\n        )\r\n        invited = Immutable.fromJS(invited)\r\n        @.contacts = @.contacts.push(invited)\r\n        @.testEmptyContacts()\r\n\r\n    inviteEmail: (email) ->\r\n        emailData = Immutable.Map({'email': email})\r\n        @.emailsToInvite = @.emailsToInvite.push(emailData)\r\n        @.displayContactList = true\r\n\r\n    removeEmail: (invited) ->\r\n        @.emailsToInvite = @.emailsToInvite.filter( (email) =>\r\n            return email.get('email') != invited.email\r\n        )\r\n        @.testEmptyContacts()\r\n\r\n    testEmptyContacts: () ->\r\n        if @.emailsToInvite.size + @.contactsToInvite.size == 0\r\n            @.displayContactList = false\r\n\r\nangular.module(\"taigaAdmin\").controller(\"AddMembersCtrl\", AddMembersController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/lightbox-add-members.directive.coffee\r\n###\r\n\r\nLightboxAddMembersDirective = (lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        lightboxService.open(el)\r\n        ctrl._getContacts()\r\n\r\n    return {\r\n        scope: {},\r\n        templateUrl:\"invite-members/lightbox-add-members.html\",\r\n        controller: \"AddMembersCtrl\",\r\n        controllerAs: \"vm\",\r\n        link: link\r\n    }\r\n\r\nangular.module(\"taigaAdmin\").directive(\"tgLbAddMembers\", [\"lightboxService\", LightboxAddMembersDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/suggest-add-members/suggest-add-members.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass SuggestAddMembersController\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n        @.contactQuery = \"\"\r\n\r\n    isEmail: () ->\r\n        return taiga.isEmail(@.contactQuery)\r\n\r\n    filterContacts: () ->\r\n        @.filteredContacts = @.contacts.filter( (contact) =>\r\n            contact.get('full_name_display').toLowerCase().includes(@.contactQuery.toLowerCase()) || contact.get('username').toLowerCase().includes(@.contactQuery.toLowerCase());\r\n        ).slice(0,12)\r\n\r\n    setInvited: (contact) ->\r\n        @.onInviteSuggested({'contact': contact})\r\n\r\nangular.module(\"taigaAdmin\").controller(\"SuggestAddMembersCtrl\", SuggestAddMembersController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: invite-members/suggest-add-members/suggest-add-members.directive.coffee\r\n###\r\n\r\nSuggestAddMembersDirective = (lightboxService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.$watch \"vm.contacts\", (contacts) =>\r\n            if contacts\r\n                ctrl.filterContacts()\r\n\r\n    return {\r\n        scope: {},\r\n        templateUrl:\"invite-members/suggest-add-members/suggest-add-members.html\",\r\n        controller: \"SuggestAddMembersCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: {\r\n            contacts: '=',\r\n            onInviteSuggested: '&',\r\n            onInviteEmail: '&'\r\n        },\r\n        link: link\r\n    }\r\n\r\nangular.module(\"taigaAdmin\").directive(\"tgSuggestAddMembers\", [\"lightboxService\", SuggestAddMembersDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/dropdown-notifications/dropdown-notifications.directive.coffee\r\n###\r\n\r\ntimeout = @.taiga.timeout\r\n\r\nDropdownNotificationsDirective = ($rootScope, notificationsService, currentUserService) ->\r\n    link = ($scope, $el, $attrs, $ctrl) ->\r\n        $scope.notificationsList = []\r\n        $scope.loading = false\r\n\r\n        $scope.$on \"notifications:loaded\", (event, total) ->\r\n            $scope.loading = false\r\n            if $scope.total != undefined && total > $scope.total\r\n                $scope.newEvent = true\r\n                timeout 100, ->\r\n                    $scope.total = total\r\n                    $scope.$apply()\r\n                timeout 2000, ->\r\n                    $scope.newEvent = false\r\n            else\r\n                $scope.total = total\r\n\r\n        $scope.$on \"notifications:loading\", () ->\r\n            $scope.loading = true\r\n\r\n        $scope.setAllAsRead = () ->\r\n            notificationsService.setNotificationsAsRead().then ->\r\n                $rootScope.$emit(\"notifications:dismiss-all\")\r\n\r\n    directive = {\r\n        templateUrl: \"navigation-bar/dropdown-notifications/dropdown-notifications.html\"\r\n        scope: {\r\n            active: \"=\"\r\n        }\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nangular.module(\"taigaNavigationBar\")\r\n    .directive(\"tgDropdownNotifications\", [\"$rootScope\", \"tgNotificationsService\",\r\n    \"tgCurrentUserService\", DropdownNotificationsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/dropdown-project-list/dropdown-project-list.directive.coffee\r\n###\r\n\r\nDropdownProjectListDirective = (rootScope, currentUserService, projectsService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {}\r\n\r\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\r\n\r\n        scope.vm.newProject = ->\r\n            projectsService.newProject()\r\n\r\n        updateLinks = ->\r\n            el.find(\".dropdown-project-list ul li a\").data(\"fullUrl\", \"\")\r\n\r\n        rootScope.$on(\"dropdown-project-list:updated\", updateLinks)\r\n\r\n    directive = {\r\n        templateUrl: \"navigation-bar/dropdown-project-list/dropdown-project-list.html\"\r\n        scope: {\r\n            active: \"=\"\r\n        }\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nDropdownProjectListDirective.$inject = [\r\n    \"$rootScope\",\r\n    \"tgCurrentUserService\",\r\n    \"tgProjectsService\"\r\n]\r\n\r\nangular.module(\"taigaNavigationBar\").directive(\"tgDropdownProjectList\", DropdownProjectListDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/dropdown-user/dropdown-user.directive.coffee\r\n###\r\n\r\nDropdownUserDirective = (authService, configService, locationService,\r\n        navUrlsService, feedbackService, $rootScope) ->\r\n\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {}\r\n        scope.vm.isFeedbackEnabled = configService.get(\"feedbackEnabled\")\r\n        scope.vm.customSupportUrl = configService.get(\"supportUrl\")\r\n        taiga.defineImmutableProperty(scope.vm, \"user\", () -> authService.userData)\r\n\r\n        scope.vm.logout = ->\r\n            authService.logout()\r\n            locationService.url(navUrlsService.resolve(\"discover\"))\r\n            locationService.search({})\r\n\r\n        scope.vm.sendFeedback = ->\r\n            feedbackService.sendFeedback()\r\n\r\n        scope.vm.userSettingsPlugins = _.filter($rootScope.userSettingsPlugins, {userMenu: true})\r\n\r\n    directive = {\r\n        templateUrl: \"navigation-bar/dropdown-user/dropdown-user.html\"\r\n        scope: {}\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nDropdownUserDirective.$inject = [\r\n    \"$tgAuth\",\r\n    \"$tgConfig\",\r\n    \"$tgLocation\",\r\n    \"$tgNavUrls\",\r\n    \"tgFeedbackService\",\r\n    \"$rootScope\"\r\n]\r\n\r\nangular.module(\"taigaNavigationBar\").directive(\"tgDropdownUser\", DropdownUserDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/navigation-bar.directive.coffee\r\n###\r\n\r\nNavigationBarDirective = (currentUserService, navigationBarService, locationService, navUrlsService, config) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {}\r\n\r\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\r\n        taiga.defineImmutableProperty(scope.vm, \"isAuthenticated\", () -> currentUserService.isAuthenticated())\r\n        taiga.defineImmutableProperty(scope.vm, \"isEnabledHeader\", () -> navigationBarService.isEnabledHeader())\r\n\r\n        scope.vm.publicRegisterEnabled = config.get(\"publicRegisterEnabled\")\r\n        scope.vm.customSupportUrl = config.get(\"supportUrl\")\r\n\r\n        scope.vm.login = ->\r\n            nextUrl = encodeURIComponent(locationService.url())\r\n            locationService.url(navUrlsService.resolve(\"login\"))\r\n            locationService.search({next: nextUrl})\r\n\r\n        scope.$on \"$routeChangeSuccess\", () ->\r\n            scope.vm.active = null\r\n            switch locationService.path()\r\n                when \"/\"\r\n                    scope.vm.active = 'dashboard'\r\n                when \"/discover\"\r\n                    scope.vm.active = 'discover'\r\n                when \"/notifications\"\r\n                    scope.vm.active = 'notifications'\r\n                when \"/projects/\"\r\n                    scope.vm.active = 'projects'\r\n\r\n    directive = {\r\n        templateUrl: \"navigation-bar/navigation-bar.html\"\r\n        scope: {}\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nNavigationBarDirective.$inject = [\r\n    \"tgCurrentUserService\",\r\n    \"tgNavigationBarService\",\r\n    \"$tgLocation\",\r\n    \"$tgNavUrls\",\r\n    \"$tgConfig\"\r\n]\r\n\r\nangular.module(\"taigaNavigationBar\").directive(\"tgNavigationBar\", NavigationBarDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: navigation-bar/navigation-bar.service.coffee\r\n###\r\n\r\nclass NavigationBarService extends taiga.Service\r\n\r\n    constructor: ->\r\n        @.disableHeader()\r\n\r\n    enableHeader: ->\r\n        @.enabledHeader = true\r\n\r\n    disableHeader:  ->\r\n        @.enabledHeader = false\r\n\r\n    isEnabledHeader: ->\r\n        return @.enabledHeader\r\n\r\nangular.module(\"taigaNavigationBar\").service(\"tgNavigationBarService\", NavigationBarService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: notifications/notifications-list/notifications-list.directive.coffee\r\n###\r\n\r\nNotificationsListDirective = ->\r\n    return {\r\n        templateUrl: \"notifications/notifications-list/notifications-list.html\",\r\n        controller: \"Notifications\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            infiniteScrollContainer: \"@\",\r\n            infiniteScrollDistance: \"=\",\r\n            onlyUnread: \"=onlyUnread\"\r\n        }\r\n    }\r\n\r\nangular.module(\"taigaNotifications\").directive(\"tgNotificationsList\", NotificationsListDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: notifications/notifications.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nclass NotificationsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"$scope\",\r\n        \"tgNotificationsService\"\r\n        \"tgCurrentUserService\",\r\n        \"$tgEvents\",\r\n        \"$location\"\r\n        \"$window\"\r\n    ]\r\n\r\n    constructor: (@rootScope, @scope, @notificationsService, @currentUserService, @events,\r\n    @location, @window) ->\r\n        @.total = 0\r\n        @.user = @currentUserService.getUser()\r\n        @.scrollDisabled = false\r\n        @.initList()\r\n        @.loadNotifications()\r\n\r\n        @rootScope.$on \"notifications:dismiss\", (event) =>\r\n            if @.onlyUnread\r\n                @.reloadList()\r\n\r\n        @rootScope.$on \"notifications:new\", (event) =>\r\n            @.reloadList()\r\n\r\n        @rootScope.$on \"notifications:dismiss-all\", (event) =>\r\n            @.reloadList()\r\n\r\n    initList: ()->\r\n        @.notificationsList = Immutable.List()\r\n        @.list = @notificationsService.getNotificationsList(@.user.get(\"id\"), @.onlyUnread?)\r\n        @.loading = !@.list?\r\n\r\n    reloadList: ()->\r\n        @.initList()\r\n        @.loadNotifications()\r\n\r\n    loadNotifications: () ->\r\n        @.scrollDisabled = true\r\n        @.loading = true\r\n        @scope.$emit(\"notifications:loading\")\r\n        return @.list\r\n            .next()\r\n            .then (response) =>\r\n                @.notificationsList = @.notificationsList.concat(response.get(\"items\"))\r\n\r\n                if response.get(\"next\")\r\n                    @.scrollDisabled = false\r\n\r\n                @.total = response.get(\"total\")\r\n\r\n                @scope.$emit(\"notifications:loaded\", @.total)\r\n\r\n                @.loading = false\r\n                return @.notificationsList\r\n\r\n    setAsRead: (notification, url) ->\r\n        @notificationsService.setNotificationAsRead(notification.get(\"id\")).then =>\r\n            if @location.$$url == url\r\n                @window.location.reload()\r\n            else\r\n                @location.path(url)\r\n\r\n            @rootScope.$broadcast \"notifications:dismiss\"\r\n\r\n    setAllAsRead: () ->\r\n        @notificationsService.setNotificationsAsRead().then =>\r\n            @rootScope.$broadcast \"notifications:dismiss-all\"\r\n\r\n\r\nangular.module(\"taigaNotifications\").controller(\"Notifications\", NotificationsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-notification/user-notification/user-notification.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass NotificationsService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgResources\"\r\n        \"tgUserTimelinePaginationSequenceService\"\r\n        \"$translate\"\r\n        \"$tgNavUrls\"\r\n        \"$tgSections\"\r\n    ]\r\n\r\n    _notificationTypes = [\r\n        { # Assigned to you\r\n            check: (notification) -> return notification.get('event_type') == 1\r\n            key: 'EVENTS.ASSIGNED_YOU',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # Mentioned you in a object description\r\n            check: (notification) -> return notification.get('event_type') == 2\r\n            key: 'EVENTS.MENTIONED_YOU',\r\n            translate_params: ['username', 'obj_name'],\r\n        },\r\n        { # Added you as watcher\r\n            check: (notification) -> return notification.get('event_type') == 3\r\n            key: 'EVENTS.ADDED_YOU_AS_WATCHER',\r\n            translate_params: ['username', 'obj_name'],\r\n        },\r\n        { # Added you as member\r\n            check: (notification) -> return notification.get('event_type') == 4\r\n            key: 'EVENTS.ADDED_YOU_AS_MEMBER',\r\n            translate_params: ['username']\r\n        },\r\n        { # Commented\r\n            check: (notification) -> return notification.get('event_type') == 5\r\n            key: 'EVENTS.COMMENTED',\r\n            translate_params: ['username', 'obj_name'],\r\n        },\r\n        { # Mentioned you in a comment\r\n            check: (notification) -> return notification.get('event_type') == 6\r\n            key: 'EVENTS.MENTIONED_YOU_IN_COMMENT',\r\n            translate_params: ['username', 'obj_name'],\r\n        },\r\n    ]\r\n\r\n    _params = {\r\n        username: (notification) ->\r\n            user = notification.getIn(['data', 'user'])\r\n            if user.get('is_profile_visible')\r\n                title_attr = @translate.instant('COMMON.SEE_USER_PROFILE', {username: user.get('username')})\r\n                url = @navUrls.resolve('user-profile', {\r\n                    username: notification.getIn(['data', 'user', 'username'])\r\n                })\r\n                return @._getLink(notification, url, user.get('name'), 'user-link', title_attr)\r\n            else\r\n                return @._getUsernameSpan(user.get('name'))\r\n\r\n        project_name: (notification) ->\r\n            url = @navUrls.resolve('project', {\r\n                project: notification.getIn(['data', 'project', 'slug'])\r\n            })\r\n            return @._getLink(notification, url, notification.getIn([\"data\", \"project\", \"name\"]), 'project-link')\r\n\r\n        obj_name: (notification) ->\r\n            obj = @._getNotificationObject(notification)\r\n            url = @._getDetailObjUrl(notification, obj.get('content_type'))\r\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\r\n            return @._getLink(notification, url, text, 'object-link' )\r\n    }\r\n\r\n    constructor: (\r\n        @rs\r\n        @userTimelinePaginationSequenceService\r\n        @translate\r\n        @navUrls\r\n        @tgSections\r\n    ) ->\r\n\r\n    getNotificationsList: (userId, onlyUnread) ->\r\n        total = 0\r\n        config = {}\r\n        config.fetch = (page) =>\r\n            return @rs.users.getNotifications(userId, page, onlyUnread)\r\n                .then (response) ->\r\n                    return response\r\n\r\n        config.map = (obj) => @._addNotificationAttributes(obj)\r\n        return @userTimelinePaginationSequenceService.generate(config)\r\n\r\n    setNotificationAsRead: (notificationId) ->\r\n        return @rs.users.setNotificationAsRead(notificationId)\r\n\r\n    setNotificationsAsRead: () ->\r\n        return @rs.users.setNotificationsAsRead()\r\n\r\n    _getNotificationObject: (notification) ->\r\n        if notification.get('data').get('obj')\r\n            return notification.get('data').get('obj')\r\n\r\n    _getType: (notification) ->\r\n        return _.find _notificationTypes, (obj) ->\r\n            return obj.check(notification)\r\n\r\n    _addNotificationAttributes: (notification) ->\r\n        event_type = notification.get('event_type')\r\n        \r\n        type =  @._getType(notification)\r\n\r\n        title = @._getTitle(notification, event_type, type)\r\n        notification = notification.set('title_html', title)\r\n\r\n        projectSlug = notification.getIn(['data', 'project', 'slug'])\r\n        projectSectionPath = @tgSections.getPath(projectSlug)\r\n        projectUrl = @navUrls.resolve(\"project-#{projectSectionPath}\", { project: projectSlug })\r\n        notification = notification.set('projectUrl', projectUrl)\r\n\r\n        notification = notification.set('obj', @._getNotificationObject(notification))\r\n\r\n        return notification\r\n\r\n    _translateTitleParams: (param, notification, event) ->\r\n        return _params[param].call(this, notification, event)\r\n\r\n    _getDetailObjUrl: (notification, contentType) ->\r\n        urlMapping = {\r\n            \"issue\": \"project-issues-detail\",\r\n            \"task\": \"project-tasks-detail\",\r\n            \"userstory\": \"project-userstories-detail\",\r\n        }\r\n        url = @navUrls.resolve(urlMapping[contentType], {\r\n            project: notification.getIn(['data', 'project', 'slug']),\r\n            ref: notification.getIn(['data', 'obj', 'ref'])\r\n        })\r\n\r\n        return url\r\n\r\n    _getLink: (notification, url, text, css, title) ->\r\n        title = title || text\r\n\r\n        span = $('<span>')\r\n            .attr('ng-non-bindable', true)\r\n            .text(text)\r\n\r\n        return $('<a href=\"\">')\r\n            .attr('title', title)\r\n            .attr('class', css)\r\n            .attr('ng-click', \"vm.setAsRead(notification, \\\"#{url}\\\")\")\r\n            .append(span)\r\n            .prop('outerHTML')\r\n\r\n    _getUsernameSpan: (text) ->\r\n        title = title || text\r\n\r\n        return $('<span>')\r\n            .addClass('username')\r\n            .text(text)\r\n            .prop('outerHTML')\r\n\r\n    _getParams: (notification, event_type, notification_type) ->\r\n        params = {}\r\n\r\n        notification_type.translate_params.forEach (param) =>\r\n            params[param] = @._translateTitleParams(param, notification, event_type)\r\n        return params\r\n\r\n    _getTitle: (notification, event_type, notification_type) ->\r\n        params = @._getParams(notification, event_type, notification_type)\r\n\r\n        paramsKeys = {}\r\n        Object.keys(params).forEach (key) -> paramsKeys[key] = '{{' +key + '}}'\r\n\r\n        translation = @translate.instant(notification_type.key, paramsKeys)\r\n\r\n        Object.keys(params).forEach (key) ->\r\n            find = '{{' +key + '}}'\r\n            translation = translation.replace(new RegExp(find, 'g'), params[key])\r\n\r\n        return translation\r\n\r\nangular.module(\"taigaNotifications\").service(\"tgNotificationsService\", NotificationsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-bar/profile-bar.controller.coffee\r\n###\r\n\r\nclass ProfileBarController\r\n    @.$inject = [\r\n        \"tgUserService\"\r\n    ]\r\n\r\n    constructor: (@userService) ->\r\n        @.loadStats()\r\n\r\n    loadStats: () ->\r\n        return @userService.getStats(@.user.get(\"id\")).then (stats) =>\r\n            @.stats = stats\r\n\r\nangular.module(\"taigaProfile\").controller(\"ProfileBar\", ProfileBarController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-bar/profile-bar.directive.coffee\r\n###\r\n\r\nProfileBarDirective = () ->\r\n    return {\r\n        templateUrl: \"profile/profile-bar/profile-bar.html\",\r\n        controller: \"ProfileBar\",\r\n        controllerAs: \"vm\",\r\n        scope: {\r\n            user: \"=user\",\r\n            isCurrentUser: \"=iscurrentuser\"\r\n        },\r\n        bindToController: true\r\n    }\r\n\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileBar\", ProfileBarDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-contacts/profile-contacts.controller.coffee\r\n###\r\n\r\nclass ProfileContactsController\r\n    @.$inject = [\r\n        \"tgUserService\",\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@userService, @currentUserService) ->\r\n        @.currentUser = @currentUserService.getUser()\r\n\r\n        @.isCurrentUser = false\r\n\r\n        if @.currentUser && @.currentUser.get(\"id\") == @.user.get(\"id\")\r\n            @.isCurrentUser = true\r\n\r\n    loadContacts: () ->\r\n        @userService.getContacts(@.user.get(\"id\"))\r\n            .then (contacts) =>\r\n                @.contacts = contacts\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileContacts\", ProfileContactsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-contacts/profile-contacts.directive.coffee\r\n###\r\n\r\nProfileContactsDirective = () ->\r\n    link = (scope, elm, attrs, ctrl) ->\r\n        ctrl.loadContacts()\r\n\r\n    return {\r\n        templateUrl: \"profile/profile-contacts/profile-contacts.html\",\r\n        scope: {\r\n            user: \"=\"\r\n        },\r\n        controllerAs: \"vm\",\r\n        controller: \"ProfileContacts\",\r\n        link: link,\r\n        bindToController: true\r\n    }\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileContacts\", ProfileContactsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-favs/items/items.directive.coffee\r\n###\r\n\r\nFavItemDirective = ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.vm = {item: scope.item}\r\n\r\n    templateUrl = (el, attrs) ->\r\n        if attrs.itemType == \"project\"\r\n            return \"profile/profile-favs/items/project.html\"\r\n        else # if attr.itemType in [\"userstory\", \"task\", \"issue\"]\r\n            return \"profile/profile-favs/items/ticket.html\"\r\n\r\n    return {\r\n        scope: {\r\n            \"item\": \"=tgFavItem\"\r\n        }\r\n        link: link\r\n        templateUrl: templateUrl\r\n    }\r\n\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgFavItem\", FavItemDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-favs/profile-favs.controller.coffee\r\n###\r\n\r\ndebounceLeading = @.taiga.debounceLeading\r\n\r\nclass FavsBaseController\r\n    constructor: ->\r\n        @._init()\r\n\r\n        #@._getItems = null # Define in inheritance classes\r\n        #\r\n    _init: ->\r\n        @.enableFilterByAll = true\r\n        @.enableFilterByProjects = true\r\n        @.enableFilterByEpics = true\r\n        @.enableFilterByUserStories = true\r\n        @.enableFilterByTasks = true\r\n        @.enableFilterByIssues = true\r\n        @.enableFilterByTextQuery = true\r\n\r\n        @._resetList()\r\n        @.q = null\r\n        @.type = null\r\n\r\n    _resetList: ->\r\n        @.items = Immutable.List()\r\n        @.scrollDisabled = false\r\n        @._page = 1\r\n\r\n    _enableLoadingSpinner: ->\r\n        @.isLoading = true\r\n\r\n    _disableLoadingSpinner: ->\r\n        @.isLoading = false\r\n\r\n    _enableScroll : ->\r\n        @.scrollDisabled = false\r\n\r\n    _disableScroll : ->\r\n        @.scrollDisabled = true\r\n\r\n    _checkIfHasMorePages: (hasNext) ->\r\n        if hasNext\r\n            @._page += 1\r\n            @._enableScroll()\r\n        else\r\n            @._disableScroll()\r\n\r\n    _checkIfHasNoResults: ->\r\n        @.hasNoResults = @.items.size == 0\r\n\r\n    loadItems:  ->\r\n        @._enableLoadingSpinner()\r\n        @._disableScroll()\r\n\r\n        @._getItems(@.user.get(\"id\"), @._page, @.type, @.q)\r\n            .then (response) =>\r\n                @.items = @.items.concat(response.get(\"data\"))\r\n\r\n                @._checkIfHasMorePages(response.get(\"next\"))\r\n                @._checkIfHasNoResults()\r\n                @._disableLoadingSpinner()\r\n\r\n                return @.items\r\n            .catch =>\r\n                @._disableLoadingSpinner()\r\n\r\n                return @.items\r\n\r\n    ################################################\r\n    ## Filtre actions\r\n    ################################################\r\n    filterByTextQuery: debounceLeading 500, ->\r\n        @._resetList()\r\n        @.loadItems()\r\n\r\n    showAll: ->\r\n        if @.type isnt null\r\n            @.type = null\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n    showProjectsOnly: ->\r\n        if @.type isnt \"project\"\r\n            @.type = \"project\"\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n    showEpicsOnly: ->\r\n        if @.type isnt \"epic\"\r\n            @.type = \"epic\"\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n    showUserStoriesOnly: ->\r\n        if @.type isnt \"userstory\"\r\n            @.type = \"userstory\"\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n    showTasksOnly: ->\r\n        if @.type isnt \"task\"\r\n            @.type = \"task\"\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n    showIssuesOnly: ->\r\n        if @.type isnt \"issue\"\r\n            @.type = \"issue\"\r\n            @._resetList()\r\n            @.loadItems()\r\n\r\n\r\n####################################################\r\n## Liked\r\n####################################################\r\n\r\nclass ProfileLikedController extends FavsBaseController\r\n    @.$inject = [\r\n        \"tgUserService\",\r\n    ]\r\n\r\n    constructor: (@userService) ->\r\n        super()\r\n        @.tabName = 'likes'\r\n        @.enableFilterByAll = false\r\n        @.enableFilterByProjects = false\r\n        @.enableFilterByEpics = false\r\n        @.enableFilterByUserStories = false\r\n        @.enableFilterByTasks = false\r\n        @.enableFilterByIssues = false\r\n        @.enableFilterByTextQuery = true\r\n        @._getItems = @userService.getLiked\r\n\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileLiked\", ProfileLikedController)\r\n\r\n####################################################\r\n## Voted\r\n####################################################\r\n\r\nclass ProfileVotedController extends FavsBaseController\r\n    @.$inject = [\r\n        \"tgUserService\",\r\n    ]\r\n\r\n    constructor: (@userService) ->\r\n        super()\r\n        @.tabName = 'upvotes'\r\n        @.enableFilterByAll = true\r\n        @.enableFilterByProjects = false\r\n        @.enableFilterByEpics = true\r\n        @.enableFilterByUserStories = true\r\n        @.enableFilterByTasks = true\r\n        @.enableFilterByIssues = true\r\n        @.enableFilterByTextQuery = true\r\n        @._getItems = @userService.getVoted\r\n\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileVoted\", ProfileVotedController)\r\n\r\n\r\n\r\n####################################################\r\n## Watched\r\n####################################################\r\n\r\nclass ProfileWatchedController extends FavsBaseController\r\n    @.$inject = [\r\n        \"tgUserService\",\r\n    ]\r\n\r\n    constructor: (@userService) ->\r\n        super()\r\n        @.tabName = 'watchers'\r\n        @._getItems = @userService.getWatched\r\n\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileWatched\", ProfileWatchedController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-favs/profile-favs.directive.coffee\r\n###\r\n\r\nbase = {\r\n    scope: {},\r\n    bindToController: {\r\n        user: \"=\"\r\n        type: \"@\"\r\n        q: \"@\"\r\n        scrollDisabled: \"@\"\r\n        isLoading: \"@\"\r\n        hasNoResults: \"@\"\r\n    }\r\n    controller: null, # Define in directives\r\n    controllerAs: \"vm\",\r\n    templateUrl: \"profile/profile-favs/profile-favs.html\",\r\n}\r\n\r\n\r\n####################################################\r\n## Liked\r\n####################################################\r\n\r\nProfileLikedDirective = () ->\r\n    return _.extend({}, base, {\r\n        controller: \"ProfileLiked\"\r\n    })\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileLiked\", ProfileLikedDirective)\r\n\r\n\r\n####################################################\r\n## Voted\r\n####################################################\r\n\r\nProfileVotedDirective = () ->\r\n    return _.extend({}, base, {\r\n        controller: \"ProfileVoted\"\r\n    })\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileVoted\", ProfileVotedDirective)\r\n\r\n\r\n####################################################\r\n## Watched\r\n####################################################\r\n\r\nProfileWatchedDirective = () ->\r\n    return _.extend({}, base, {\r\n        controller: \"ProfileWatched\"\r\n    })\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileWatched\", ProfileWatchedDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-hints/profile-hints.controller.coffee\r\n###\r\n\r\nclass ProfileHints\r\n    HINTS: [\r\n        { #hint1\r\n            url: \"https://tree.taiga.io/support/admin/import-export-projects/\"\r\n        },\r\n        { #hint2\r\n            url: \"https://tree.taiga.io/support/admin/custom-fields/\"\r\n        },\r\n        { #hint3\r\n        },\r\n        { #hint4\r\n        }\r\n    ]\r\n    constructor: (@translate) ->\r\n        hintKey = Math.floor(Math.random() * @.HINTS.length) + 1\r\n\r\n        @.hint = @.HINTS[hintKey - 1]\r\n\r\n        @.hint.linkText = @.hint.linkText || 'HINTS.LINK'\r\n\r\n        @.hint.title = @translate.instant(\"HINTS.HINT#{hintKey}_TITLE\")\r\n\r\n        @.hint.text = @translate.instant(\"HINTS.HINT#{hintKey}_TEXT\")\r\n\r\nProfileHints.$inject = [\r\n    \"$translate\"\r\n]\r\n\r\nangular.module(\"taigaProfile\").controller(\"ProfileHints\", ProfileHints)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-hints/profile-hints.directive.coffee\r\n###\r\n\r\nProfileHints = ($translate) ->\r\n    return {\r\n        scope: {},\r\n        controller: \"ProfileHints\",\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"profile/profile-hints/profile-hints.html\"\r\n    }\r\n\r\nProfileHints.$inject = [\r\n    \"$translate\"\r\n]\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileHints\", ProfileHints)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-projects/profile-projects.controller.coffee\r\n###\r\n\r\nclass ProfileProjectsController\r\n    @.$inject = [\r\n        \"tgProjectsService\",\r\n        \"tgUserService\"\r\n    ]\r\n\r\n    constructor: (@projectsService, @userService) ->\r\n\r\n    loadProjects: () ->\r\n        @projectsService.getProjectsByUserId(@.user.get(\"id\"))\r\n            .then (projects) =>\r\n                return @userService.attachUserContactsToProjects(@.user.get(\"id\"), projects)\r\n            .then (projects) =>\r\n                @.projects = projects\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileProjects\", ProfileProjectsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-projects/profile-projects.directive.coffee\r\n###\r\n\r\nProfileProjectsDirective = () ->\r\n    link = (scope, elm, attr, ctrl) ->\r\n        ctrl.loadProjects()\r\n\r\n    return {\r\n        templateUrl: \"profile/profile-projects/profile-projects.html\",\r\n        scope: {\r\n            user: \"=\"\r\n        },\r\n        link: link\r\n        bindToController: true,\r\n        controllerAs: \"vm\",\r\n        controller: \"ProfileProjects\"\r\n    }\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgProfileProjects\", ProfileProjectsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-tab/profile-tab.directive.coffee\r\n###\r\n\r\nProfileTabDirective = () ->\r\n    link = (scope, element, attrs, ctrl, transclude) ->\r\n        scope.tab = {}\r\n\r\n        attrs.$observe \"tgProfileTab\", (name) ->\r\n            scope.tab.name = name\r\n\r\n        attrs.$observe \"tabTitle\", (title) ->\r\n            scope.tab.title = title\r\n\r\n        scope.tab.icon = attrs.tabIcon\r\n        scope.tab.active = !!attrs.tabActive\r\n\r\n        if scope.$eval(attrs.tabDisabled) != true\r\n            ctrl.addTab(scope.tab)\r\n\r\n    return {\r\n        templateUrl: \"profile/profile-tab/profile-tab.html\",\r\n        scope: {},\r\n        require: \"^tgProfileTabs\",\r\n        link: link,\r\n        transclude: true\r\n    }\r\n\r\nangular.module(\"taigaProfile\")\r\n    .directive(\"tgProfileTab\", ProfileTabDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-tabs/profile-tabs.controller.coffee\r\n###\r\n\r\nclass ProfileTabsController\r\n    constructor: () ->\r\n        @tabs = []\r\n\r\n    addTab: (tab) ->\r\n        @tabs.push(tab)\r\n\r\n    toggleTab: (tab) ->\r\n        _.map @tabs, (tab) -> tab.active = false\r\n\r\n        tab.active = true\r\n\r\nangular.module(\"taigaProfile\")\r\n    .controller(\"ProfileTabs\", ProfileTabsController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile-tabs/profile-tabs.directive.coffee\r\n###\r\n\r\nProfileTabsDirective = () ->\r\n    return {\r\n        scope: {}\r\n        controller: \"ProfileTabs\"\r\n        controllerAs: \"vm\"\r\n        templateUrl: \"profile/profile-tabs/profile-tabs.html\"\r\n        transclude: true\r\n    }\r\n\r\nangular.module(\"taigaProfile\")\r\n    .directive(\"tgProfileTabs\", ProfileTabsDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: profile/profile.controller.coffee\r\n###\r\n\r\nclass ProfileController\r\n    @.$inject = [\r\n        \"tgAppMetaService\",\r\n        \"tgCurrentUserService\",\r\n        \"$routeParams\",\r\n        \"tgUserService\",\r\n        \"tgXhrErrorService\",\r\n        \"$translate\"\r\n    ]\r\n\r\n    constructor: (@appMetaService, @currentUserService, @routeParams, @userService, @xhrError, @translate) ->\r\n        @.isCurrentUser = false\r\n\r\n        if @routeParams.slug\r\n            @userService\r\n                .getUserByUserName(@routeParams.slug)\r\n                .then (user) =>\r\n                    if !user.get('is_active')\r\n                        @xhrError.notFound()\r\n                    else\r\n                        @.user = user\r\n                        @.isCurrentUser = false\r\n                        @._setMeta(@.user)\r\n\r\n                        return user\r\n                .catch (xhr) =>\r\n                    return @xhrError.response(xhr)\r\n\r\n        else\r\n            @.user = @currentUserService.getUser()\r\n            @.isCurrentUser = true\r\n            @._setMeta(@.user)\r\n\r\n    _setMeta: (user) ->\r\n        ctx = {\r\n            userFullName: user.get(\"full_name_display\"),\r\n            userUsername: user.get(\"username\")\r\n        }\r\n\r\n        title = @translate.instant(\"USER.PROFILE.PAGE_TITLE\", ctx)\r\n\r\n        description = user.get(\"bio\")\r\n        @appMetaService.setAll(title, description)\r\n\r\nangular.module(\"taigaProfile\").controller(\"Profile\", ProfileController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/blocked-project-explanation.directive.coffee\r\n###\r\n\r\nBlockedProjectExplanationDirective = () ->\r\n    return {\r\n        templateUrl: \"projects/project/blocked-project-explanation.html\"\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgBlockedProjectExplanation\", BlockedProjectExplanationDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/contact-project-button/contact-project-button.controller.coffee\r\n###\r\n\r\nclass ContactProjectButtonController\r\n    @.$inject = ['tgLightboxFactory']\r\n\r\n    constructor: (@lightboxFactory)->\r\n\r\n    launchContactForm: () ->\r\n        @lightboxFactory.create(\r\n            'tg-lb-contact-project',\r\n            {\r\n                \"class\": \"lightbox lightbox-contact-project e2e-lightbox-contact-project\",\r\n                \"project\": \"project\"\r\n            },\r\n            {\r\n                \"project\": @.project\r\n            }\r\n        )\r\n\r\n\r\nangular.module(\"taigaProjects\").controller(\"ContactProjectButtonCtrl\", ContactProjectButtonController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/contact-project-button/contact-project-button.directive.coffee\r\n###\r\n\r\nContactProjectButtonDirective = ->\r\n    return {\r\n        scope: {}\r\n        controller: \"ContactProjectButtonCtrl\",\r\n        bindToController: {\r\n            project: '='\r\n            layout: '@'\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"projects/components/contact-project-button/contact-project-button.html\",\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgContactProjectButton\", ContactProjectButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/lb-contact-project/lb-contact-project.controller.coffee\r\n###\r\n\r\nclass ContactProjectLbController\r\n    @.$inject = [\r\n        \"lightboxService\",\r\n        \"tgResources\",\r\n        \"$tgConfirm\",\r\n    ]\r\n\r\n    constructor: (@lightboxService, @rs, @confirm) ->\r\n        @.contact = {}\r\n\r\n    contactProject: () ->\r\n        project = @.project.get('id')\r\n        message = @.contact.message\r\n\r\n        promise = @rs.projects.contactProject(project, message)\r\n        @.sendingFeedback = true\r\n        promise.then  =>\r\n            @lightboxService.closeAll()\r\n            @.sendingFeedback = false\r\n            @confirm.notify(\"success\")\r\n\r\nangular.module(\"taigaProjects\").controller(\"ContactProjectLbCtrl\", ContactProjectLbController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/lb-contact-project/lb-contact-project.directive.coffee\r\n###\r\n\r\nContactProjectLbDirective = (lightboxService) ->\r\n\r\n    @.inject = ['lightboxService']\r\n\r\n    link = (scope, el) ->\r\n        lightboxService.open(el)\r\n\r\n    return {\r\n        controller: \"ContactProjectLbCtrl\",\r\n        bindToController: {\r\n            project: '='\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"projects/components/lb-contact-project/lb-contact-project.html\",\r\n        link: link\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgLbContactProject\", [\"lightboxService\", ContactProjectLbDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/like-project-button/like-project-button.controller.coffee\r\n###\r\n\r\nclass LikeProjectButtonController\r\n    @.$inject = [\r\n        \"$tgConfirm\"\r\n        \"tgLikeProjectButtonService\"\r\n    ]\r\n\r\n    constructor: (@confirm, @likeButtonService)->\r\n        @.isMouseOver = false\r\n        @.loading = false\r\n\r\n    showTextWhenMouseIsOver: ->\r\n        @.isMouseOver = true\r\n\r\n    showTextWhenMouseIsLeave: ->\r\n        @.isMouseOver = false\r\n\r\n    toggleLike: ->\r\n        @.loading = true\r\n\r\n        if not @.project.get(\"is_fan\")\r\n            promise = @._like()\r\n        else\r\n            promise = @._unlike()\r\n\r\n        promise.finally () => @.loading = false\r\n\r\n        return promise\r\n\r\n    _like: ->\r\n        return @likeButtonService.like(@.project.get('id'))\r\n            .then =>\r\n                @.showTextWhenMouseIsLeave()\r\n            .catch =>\r\n                @confirm.notify(\"error\")\r\n\r\n    _unlike: ->\r\n        return @likeButtonService.unlike(@.project.get('id')).catch =>\r\n            @confirm.notify(\"error\")\r\n\r\nangular.module(\"taigaProjects\").controller(\"LikeProjectButton\", LikeProjectButtonController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/like-project-button/like-project-button.directive.coffee\r\n###\r\n\r\nLikeProjectButtonDirective = ->\r\n    return {\r\n        scope: {}\r\n        controller: \"LikeProjectButton\",\r\n        bindToController: {\r\n            project: '='\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"projects/components/like-project-button/like-project-button.html\",\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgLikeProjectButton\", LikeProjectButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/like-project-button/like-project-button.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass LikeProjectButtonService extends taiga.Service\r\n    @.$inject = [\"tgResources\", \"tgCurrentUserService\", \"tgProjectService\"]\r\n\r\n    constructor: (@rs, @currentUserService, @projectService) ->\r\n\r\n    _getProjectIndex: (projectId) ->\r\n        return @currentUserService.projects\r\n                .get('all')\r\n                .findIndex (project) -> project.get('id') == projectId\r\n\r\n    _updateProjects: (projectId, isFan) ->\r\n        projectIndex = @._getProjectIndex(projectId)\r\n\r\n        return if projectIndex == -1\r\n\r\n        projects = @currentUserService.projects\r\n            .get('all')\r\n            .update projectIndex, (project) ->\r\n                totalFans = project.get(\"total_fans\")\r\n\r\n                if isFan then totalFans++ else totalFans--\r\n\r\n                return project.merge({\r\n                    is_fan: isFan,\r\n                    total_fans: totalFans\r\n                })\r\n\r\n        @currentUserService.setProjects(projects)\r\n\r\n    _updateCurrentProject: (isFan) ->\r\n        totalFans = @projectService.project.get(\"total_fans\")\r\n\r\n        if isFan then totalFans++ else totalFans--\r\n\r\n        project = @projectService.project.merge({\r\n            is_fan: isFan,\r\n            total_fans: totalFans\r\n        })\r\n\r\n        @projectService.setProject(project)\r\n\r\n    like: (projectId) ->\r\n        return @rs.projects.likeProject(projectId).then =>\r\n            @._updateProjects(projectId, true)\r\n            @._updateCurrentProject(true)\r\n\r\n    unlike: (projectId) ->\r\n        return @rs.projects.unlikeProject(projectId).then =>\r\n            @._updateProjects(projectId, false)\r\n            @._updateCurrentProject(false)\r\n\r\nangular.module(\"taigaProjects\").service(\"tgLikeProjectButtonService\", LikeProjectButtonService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/sort-projects.directive.coffee\r\n###\r\n\r\nSortProjectsDirective = (currentUserService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        itemEl = null\r\n\r\n        drake = dragula([el[0]], {\r\n            copySortSource: false,\r\n            copy: false,\r\n            mirrorContainer: el[0],\r\n            moves: (item) -> return $(item).hasClass('list-itemtype-project')\r\n        })\r\n\r\n        drake.on 'dragend', (item) ->\r\n            itemEl = $(item)\r\n            project = itemEl.scope().project\r\n            index = itemEl.index()\r\n\r\n            sorted_project_ids = _.map(scope.projects.toJS(), (p) -> p.id)\r\n            sorted_project_ids = _.without(sorted_project_ids, project.get(\"id\"))\r\n            sorted_project_ids.splice(index, 0, project.get('id'))\r\n\r\n            sortData = []\r\n\r\n            for value, index in sorted_project_ids\r\n                sortData.push({\"project_id\": value, \"order\":index})\r\n\r\n            currentUserService.bulkUpdateProjectsOrder(sortData)\r\n\r\n        scroll = autoScroll(window, {\r\n            margin: 20,\r\n            pixels: 30,\r\n            scrollWhenOutside: true,\r\n            autoScroll: () ->\r\n                return this.down && drake.dragging\r\n        })\r\n\r\n        scope.$on \"$destroy\", ->\r\n            el.off()\r\n            drake.destroy()\r\n\r\n    directive = {\r\n        scope: {\r\n            projects: \"=tgSortProjects\"\r\n        },\r\n        link: link\r\n    }\r\n\r\n    return directive\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgSortProjects\", [\"tgCurrentUserService\", SortProjectsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/watch-project-button/watch-project-button.controller.coffee\r\n###\r\n\r\nclass WatchProjectButtonController\r\n    @.$inject = [\r\n        \"$tgConfirm\"\r\n        \"tgWatchProjectButtonService\"\r\n    ]\r\n\r\n    constructor: (@confirm, @watchButtonService)->\r\n        @.showWatchOptions = false\r\n        @.loading = false\r\n\r\n    toggleWatcherOptions: () ->\r\n        @.showWatchOptions = !@.showWatchOptions\r\n\r\n    closeWatcherOptions: () ->\r\n        @.showWatchOptions = false\r\n\r\n    watch: (notifyLevel) ->\r\n        return if notifyLevel == @.project.get('notify_level')\r\n\r\n        @.loading = true\r\n        @.closeWatcherOptions()\r\n\r\n        return @watchButtonService.watch(@.project.get('id'), notifyLevel)\r\n            .catch () => @confirm.notify(\"error\")\r\n            .finally () => @.loading = false\r\n\r\n    unwatch: ->\r\n        @.loading = true\r\n        @.closeWatcherOptions()\r\n\r\n        return @watchButtonService.unwatch(@.project.get('id'))\r\n            .catch () => @confirm.notify(\"error\")\r\n            .finally () => @.loading = false\r\n\r\nangular.module(\"taigaProjects\").controller(\"WatchProjectButton\", WatchProjectButtonController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/watch-project-button/watch-project-button.directive.coffee\r\n###\r\n\r\nWatchProjectButtonDirective = ->\r\n    return {\r\n        scope: {}\r\n        controller: \"WatchProjectButton\",\r\n        bindToController: {\r\n            project: \"=\"\r\n        }\r\n        controllerAs: \"vm\",\r\n        templateUrl: \"projects/components/watch-project-button/watch-project-button.html\",\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgWatchProjectButton\", WatchProjectButtonDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/components/watch-project-button/watch-project-button.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass WatchProjectButtonService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgResources\",\r\n        \"tgCurrentUserService\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@rs, @currentUserService, @projectService) ->\r\n\r\n    _getProjectIndex: (projectId) ->\r\n        return @currentUserService.projects\r\n                .get('all')\r\n                .findIndex (project) -> project.get('id') == projectId\r\n\r\n\r\n    _updateProjects: (projectId, notifyLevel, isWatcher) ->\r\n        projectIndex = @._getProjectIndex(projectId)\r\n\r\n        return if projectIndex == -1\r\n\r\n        projects = @currentUserService.projects\r\n            .get('all')\r\n            .update projectIndex, (project) =>\r\n                totalWatchers = project.get('total_watchers')\r\n\r\n\r\n                if !@projectService.project.get('is_watcher')  && isWatcher\r\n                    totalWatchers++\r\n                else if @projectService.project.get('is_watcher') && !isWatcher\r\n                    totalWatchers--\r\n\r\n                return project.merge({\r\n                    is_watcher: isWatcher,\r\n                    total_watchers: totalWatchers\r\n                    notify_level: notifyLevel\r\n                })\r\n\r\n        @currentUserService.setProjects(projects)\r\n\r\n    _updateCurrentProject: (notifyLevel, isWatcher) ->\r\n        totalWatchers = @projectService.project.get(\"total_watchers\")\r\n\r\n        if !@projectService.project.get('is_watcher')  && isWatcher\r\n            totalWatchers++\r\n        else if @projectService.project.get('is_watcher') && !isWatcher\r\n            totalWatchers--\r\n\r\n        project = @projectService.project.merge({\r\n            is_watcher: isWatcher,\r\n            notify_level: notifyLevel,\r\n            total_watchers: totalWatchers\r\n        })\r\n\r\n        @projectService.setProject(project)\r\n\r\n    watch: (projectId, notifyLevel) ->\r\n        return @rs.projects.watchProject(projectId, notifyLevel).then =>\r\n            @._updateProjects(projectId, notifyLevel, true)\r\n            @._updateCurrentProject(notifyLevel, true)\r\n\r\n    unwatch: (projectId) ->\r\n        return @rs.projects.unwatchProject(projectId).then =>\r\n            @._updateProjects(projectId, null, false)\r\n            @._updateCurrentProject(null, false)\r\n\r\nangular.module(\"taigaProjects\").service(\"tgWatchProjectButtonService\", WatchProjectButtonService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/asana-import/asana-import-project-form/asana-import-project-form.controller.coffee\r\n###\r\n\r\nclass AsanaImportProjectFormController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        @.projectForm = @.project.toJS()\r\n\r\n        @.platformName = \"Asana\"\r\n        @.projectForm.is_private = false\r\n        @.projectForm.keepExternalReference = false\r\n        @.projectForm.project_type = \"scrum\"\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\r\n\r\n    saveForm: () ->\r\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid\r\n\r\n    isDisabled: () ->\r\n        return !@.canCreateProject()\r\n\r\nangular.module('taigaProjects').controller('AsanaImportProjectFormCtrl', AsanaImportProjectFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/asana-import/asana-import-project-form/asana-import-project-form.directive.coffee\r\n###\r\n\r\nAsanaImportProjectFormDirective = () ->\r\n    return {\r\n        link: (scope, elm, attr, ctrl) ->\r\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\r\n\r\n        templateUrl:\"projects/create/asana-import/asana-import-project-form/asana-import-project-form.html\",\r\n        controller: \"AsanaImportProjectFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            members: '<',\r\n            project: '<',\r\n            onSaveProjectDetails: '&',\r\n            onCancelForm: '&',\r\n            fetchingUsers: '<'\r\n        }\r\n    }\r\n\r\nAsanaImportProjectFormDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgAsanaImportProjectForm\", AsanaImportProjectFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/asana-import/asana-import.controller.coffee\r\n###\r\n\r\nclass AsanaImportController\r\n    @.$inject = [\r\n        'tgAsanaImportService',\r\n        '$tgConfirm',\r\n        '$translate',\r\n        'tgImportProjectService',\r\n    ]\r\n\r\n    constructor: (@asanaImportService, @confirm, @translate, @importProjectService) ->\r\n        @.step = 'autorization-asana'\r\n        @.project = null\r\n        taiga.defineImmutableProperty @, 'projects', () => return @asanaImportService.projects\r\n        taiga.defineImmutableProperty @, 'members', () => return @asanaImportService.projectUsers\r\n\r\n    startProjectSelector: () ->\r\n        @.step = 'project-select-asana'\r\n        @asanaImportService.fetchProjects()\r\n\r\n    onSelectProject: (project) ->\r\n        @.step = 'project-form-asana'\r\n        @.project = project\r\n        @.fetchingUsers = true\r\n\r\n        @asanaImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\r\n\r\n    onSaveProjectDetails: (project) ->\r\n        @.project = project\r\n        @.step = 'project-members-asana'\r\n\r\n    onCancelMemberSelection: () ->\r\n        @.step = 'project-form-asana'        \r\n\r\n    startImport: (users) ->\r\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\r\n\r\n        loader.start()\r\n\r\n        promise = @asanaImportService.importProject(\r\n            @.project.get('name'),\r\n            @.project.get('description'),\r\n            @.project.get('id'),\r\n            users,\r\n            @.project.get('keepExternalReference'),\r\n            @.project.get('is_private')\r\n            @.project.get('project_type')\r\n        )\r\n\r\n        @importProjectService.importPromise(promise).then () => loader.stop()\r\n\r\n    submitUserSelection: (users) ->\r\n        @.startImport(users)\r\n        return null\r\n\r\nangular.module('taigaProjects').controller('AsanaImportCtrl', AsanaImportController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/asana-import/asana-import.directive.coffee\r\n###\r\n\r\nAsanaImportDirective = () ->\r\n    return {\r\n        link: (scope, elm, attrs, ctrl) ->\r\n            ctrl.startProjectSelector()\r\n        templateUrl:\"projects/create/asana-import/asana-import.html\",\r\n        controller: \"AsanaImportCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            onCancel: '&'\r\n        }\r\n    }\r\n\r\nAsanaImportDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgAsanaImport\", AsanaImportDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/asana-import/asana-import.service.coffee\r\n###\r\n\r\nclass AsanaImportService extends taiga.Service\r\n    @.$inject = [\r\n        'tgResources',\r\n        '$location'\r\n    ]\r\n\r\n    constructor: (@resources, @location) ->\r\n        @.projects = Immutable.List()\r\n        @.projectUsers = Immutable.List()\r\n        @.token = null\r\n\r\n    setToken: (token) ->\r\n        @.token = token\r\n\r\n    fetchProjects: () ->\r\n        @resources.asanaImporter.listProjects(@.token).then (projects) => @.projects = projects\r\n\r\n    fetchUsers: (projectId) ->\r\n        @resources.asanaImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\r\n\r\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\r\n        return @resources.asanaImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType)\r\n\r\n    getAuthUrl: () ->\r\n        return new Promise (resolve) =>\r\n            @resources.asanaImporter.getAuthUrl().then (response) =>\r\n                @.authUrl = response.data.url\r\n                resolve(@.authUrl)\r\n\r\n    authorize: (code) ->\r\n        return new Promise (resolve, reject) =>\r\n            @resources.asanaImporter.authorize(code).then ((response) =>\r\n                @.token = response.data.token\r\n                resolve(@.token)\r\n            ), (error) ->\r\n                reject(new Error(error.status))\r\n\r\nangular.module(\"taigaProjects\").service(\"tgAsanaImportService\", AsanaImportService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/create-project-form/create-project-form.controller.coffee\r\n###\r\n\r\nclass CreatetProjectFormController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"tgProjectsService\",\r\n        \"$projectUrl\",\r\n        \"$location\",\r\n        \"$tgNavUrls\",\r\n        \"$tgAnalytics\"\r\n   ]\r\n\r\n    constructor: (@currentUserService, @projectsService, @projectUrl, @location, @navUrls, @analytics) ->\r\n        @.projectForm = {\r\n            is_private: false\r\n        }\r\n\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n        if @.type == 'scrum'\r\n            @.projectForm.creation_template = 1\r\n        else\r\n            @.projectForm.creation_template = 2\r\n\r\n    submit: () ->\r\n        @.formSubmitLoading = true\r\n\r\n        @projectsService.create(@.projectForm).then (project) =>\r\n            @analytics.trackEvent(\"project\", \"create\", \"project creation\", {slug: project.get('slug'), id: project.get('id')})\r\n            @location.url(@projectUrl.get(project))\r\n            @currentUserService.loadProjects()\r\n\r\n    onCancelForm: () ->\r\n        @location.path(@navUrls.resolve(\"create-project\"))\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid\r\n\r\n    isDisabled: () ->\r\n        return @.formSubmitLoading || !@.canCreateProject()\r\n\r\nangular.module('taigaProjects').controller('CreateProjectFormCtrl', CreatetProjectFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/create-project-form/create-project-form.directive.coffee\r\n###\r\n\r\nCreateProjectFormDirective = () ->\r\n    return {\r\n        templateUrl:\"projects/create/create-project-form/create-project-form.html\",\r\n        controller: \"CreateProjectFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            type: '@'\r\n        }\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgCreateProjectForm\", CreateProjectFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/create-project-members-restrictions/create-project-members-restrictions.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaProject\")\r\n\r\ncreateProjectMembersRestrictionsDirective = () ->\r\n    return {\r\n        scope: {\r\n            isPrivate: '=',\r\n            limitMembersPrivateProject: '=',\r\n            limitMembersPublicProject: '='\r\n        },\r\n        templateUrl: \"projects/create/create-project-members-restrictions/create-project-members-restrictions.html\"\r\n    }\r\n\r\nmodule.directive('tgCreateProjectMembersRestrictions', [createProjectMembersRestrictionsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/create-project-restrictions/create-project-restrictions.directive.coffee\r\n###\r\n\r\nmodule = angular.module(\"taigaProject\")\r\n\r\ncreateProjectRestrictionsDirective = () ->\r\n    return {\r\n        scope: {\r\n            isPrivate: '=',\r\n            canCreatePrivateProjects: '=',\r\n            canCreatePublicProjects: '='\r\n        },\r\n        templateUrl: \"projects/create/create-project-restrictions/create-project-restrictions.html\"\r\n    }\r\n\r\nmodule.directive('tgCreateProjectRestrictions', [createProjectRestrictionsDirective])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/create-project.controller.coffee\r\n###\r\n\r\nclass CreateProjectController\r\n    @.$inject = [\r\n        \"tgAppMetaService\",\r\n        \"$translate\",\r\n        \"tgProjectService\",\r\n        \"$location\",\r\n        \"$tgAuth\"\r\n    ]\r\n\r\n    constructor: (@appMetaService, @translate, @projectService, @location, @authService) ->\r\n        taiga.defineImmutableProperty @, \"project\", () => return @projectService.project\r\n\r\n        @appMetaService.setfn @._setMeta.bind(this)\r\n\r\n        @authService.refresh()\r\n\r\n        @.displayScrumDesc = false\r\n        @.displayKanbanDesc = false\r\n\r\n    _setMeta: () ->\r\n        return null if !@.project\r\n\r\n        ctx = {projectName: @.project.get(\"name\")}\r\n\r\n        return {\r\n            title: @translate.instant(\"PROJECT.PAGE_TITLE\", ctx)\r\n            description: @.project.get(\"description\")\r\n        }\r\n\r\n    displayHelp: (type, $event) ->\r\n        $event.stopPropagation()\r\n        $event.preventDefault()\r\n\r\n        if type == 'scrum'\r\n            @.displayScrumDesc = !@.displayScrumDesc\r\n        if type == 'kanban'\r\n            @.displayKanbanDesc = !@.displayKanbanDesc\r\n\r\n\r\nangular.module(\"taigaProjects\").controller(\"CreateProjectCtrl\", CreateProjectController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/duplicate/duplicate-project.controller.coffee\r\n###\r\n\r\nclass DuplicateProjectController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\",\r\n        \"tgProjectsService\",\r\n        \"$tgLocation\",\r\n        \"$tgNavUrls\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @projectsService, @location, @navUrls) ->\r\n        @.user = @currentUserService.getUser()\r\n        @.members = Immutable.List()\r\n\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        taiga.defineImmutableProperty @, 'projects', () => @currentUserService.projects.get(\"all\")\r\n\r\n        @.projectForm = {\r\n            is_private: false\r\n        }\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n    refreshReferenceProject: (slug) ->\r\n        @projectsService.getProjectBySlug(slug).then (project) =>\r\n            @.referenceProject = project\r\n            @.members = project.get('members').filter (it) => return it.get('id') != @.user.get('id')\r\n            @.invitedMembers = @.members.map (it) -> return it.get('id')\r\n            @.checkUsersLimit()\r\n\r\n    toggleInvitedMember: (member) ->\r\n        if @.invitedMembers.includes(member)\r\n            @.invitedMembers = @.invitedMembers.filter (it) -> it != member\r\n        else\r\n            @.invitedMembers = @.invitedMembers.push(member)\r\n\r\n        @.checkUsersLimit()\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.invitedMembers.size + 1)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.invitedMembers.size + 1)\r\n\r\n    submit: () ->\r\n        projectId = @.referenceProject.get('id')\r\n        data = @.projectForm\r\n        data.users = @.invitedMembers\r\n\r\n        @.formSubmitLoading = true\r\n        @projectsService.duplicate(projectId, data).then (newProject) =>\r\n            @.formSubmitLoading = false\r\n            @location.path(@navUrls.resolve(\"project\", {project: newProject.data.slug}))\r\n            @currentUserService.loadProjects()\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid && @.limitMembersPrivateProject.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid && @.limitMembersPublicProject.valid\r\n\r\n    isDisabled: () ->\r\n        return @.formSubmitLoading || !@.canCreateProject()\r\n\r\n    onCancelForm: () ->\r\n        @location.path(@navUrls.resolve(\"create-project\"))\r\n\r\nangular.module(\"taigaProjects\").controller(\"DuplicateProjectCtrl\", DuplicateProjectController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/duplicate/duplicate-project.directive.coffee\r\n###\r\n\r\nDuplicateProjectDirective = () ->\r\n\r\n    link = (scope, el, attr, ctrl) ->\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"projects/create/duplicate/duplicate-project.html\",\r\n        controller: \"DuplicateProjectCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {}\r\n    }\r\n\r\nDuplicateProjectDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgDuplicateProject\", DuplicateProjectDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/github-import/github-import-project-form/github-import-project-form.controller.coffee\r\n###\r\n\r\nclass GithubImportProjectFormController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        @.projectForm = @.project.toJS()\r\n\r\n        @.platformName = \"Github\"\r\n        @.projectForm.is_private = false\r\n        @.projectForm.keepExternalReference = false\r\n        @.projectForm.project_type = \"kanban\"\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\r\n\r\n    saveForm: () ->\r\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid\r\n\r\n    isDisabled: () ->\r\n        return !@.canCreateProject()\r\n\r\n\r\nangular.module('taigaProjects').controller('GithubImportProjectFormCtrl', GithubImportProjectFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/github-import/github-import-project-form/github-import-project-form.directive.coffee\r\n###\r\n\r\nGithubImportProjectFormDirective = () ->\r\n    return {\r\n        link: (scope, elm, attr, ctrl) ->\r\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\r\n\r\n        templateUrl:\"projects/create/github-import/github-import-project-form/github-import-project-form.html\",\r\n        controller: \"GithubImportProjectFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            members: '<',\r\n            project: '<',\r\n            onSaveProjectDetails: '&',\r\n            onCancelForm: '&',\r\n            fetchingUsers: '<'\r\n        }\r\n    }\r\n\r\nGithubImportProjectFormDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgGithubImportProjectForm\", GithubImportProjectFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/github-import/github-import.controller.coffee\r\n###\r\n\r\nclass GithubImportController\r\n    @.$inject = [\r\n        'tgGithubImportService',\r\n        '$tgConfirm',\r\n        '$translate',\r\n        'tgImportProjectService',\r\n    ]\r\n\r\n    constructor: (@githubImportService, @confirm, @translate, @importProjectService) ->\r\n        @.step = 'autorization-github'\r\n        @.project = null\r\n\r\n        taiga.defineImmutableProperty @, 'projects', () => return @githubImportService.projects\r\n        taiga.defineImmutableProperty @, 'members', () => return @githubImportService.projectUsers\r\n\r\n    startProjectSelector: () ->\r\n        @.step = 'project-select-github'\r\n        @githubImportService.fetchProjects()\r\n\r\n    onSelectProject: (project) ->\r\n        @.step = 'project-form-github'\r\n        @.project = project\r\n        @.fetchingUsers = true\r\n\r\n        @githubImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\r\n\r\n    onSaveProjectDetails: (project) ->\r\n        @.project = project\r\n        @.step = 'project-members-github'\r\n\r\n    onCancelMemberSelection: () ->\r\n        @.step = 'project-form-github'\r\n\r\n    startImport: (users) ->\r\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\r\n\r\n        loader.start()\r\n\r\n        promise = @githubImportService.importProject(\r\n            @.project.get('name'),\r\n            @.project.get('description'),\r\n            @.project.get('id'),\r\n            users,\r\n            @.project.get('keepExternalReference'),\r\n            @.project.get('is_private')\r\n            @.project.get('project_type')\r\n        )\r\n\r\n        @importProjectService.importPromise(promise).then () => loader.stop()\r\n\r\n    submitUserSelection: (users) ->\r\n        @.startImport(users)\r\n        return null\r\n\r\nangular.module('taigaProjects').controller('GithubImportCtrl', GithubImportController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/github-import/github-import.directive.coffee\r\n###\r\n\r\nGithubImportDirective = () ->\r\n    return {\r\n        link: (scope, elm, attrs, ctrl) ->\r\n            ctrl.startProjectSelector()\r\n        templateUrl:\"projects/create/github-import/github-import.html\",\r\n        controller: \"GithubImportCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            onCancel: '&'\r\n        }\r\n    }\r\n\r\nGithubImportDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgGithubImport\", GithubImportDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/github-import/github-import.service.coffee\r\n###\r\n\r\nclass GithubImportService extends taiga.Service\r\n    @.$inject = [\r\n        'tgResources'\r\n    ]\r\n\r\n    constructor: (@resources, @location) ->\r\n        @.projects = Immutable.List()\r\n        @.projectUsers = Immutable.List()\r\n\r\n    setToken: (token) ->\r\n        @.token = token\r\n\r\n    fetchProjects: () ->\r\n        @resources.githubImporter.listProjects(@.token).then (projects) => @.projects = projects\r\n\r\n    fetchUsers: (projectId) ->\r\n        @resources.githubImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\r\n\r\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\r\n        return @resources.githubImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType)\r\n\r\n    getAuthUrl: (callbackUri) ->\r\n        return new Promise (resolve) =>\r\n            @resources.githubImporter.getAuthUrl(callbackUri).then (response) =>\r\n                @.authUrl = response.data.url\r\n                resolve(@.authUrl)\r\n\r\n    authorize: (code) ->\r\n        return new Promise (resolve, reject) =>\r\n            @resources.githubImporter.authorize(code).then ((response) =>\r\n                @.token = response.data.token\r\n                resolve(@.token)\r\n            ), (error) ->\r\n                reject(new Error(error.status))\r\n\r\nangular.module(\"taigaProjects\").service(\"tgGithubImportService\", GithubImportService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-project-members/import-project-members.controller.coffee\r\n###\r\n\r\nclass ImportProjectMembersController\r\n    @.$inject = [\r\n        'tgCurrentUserService',\r\n        'tgUserService'\r\n    ]\r\n\r\n    constructor: (@currentUserService, @userService) ->\r\n        @.selectImportUserLightbox = false\r\n        @.warningImportUsers = false\r\n        @.displayEmailSelector = true\r\n        @.cancelledUsers = Immutable.List()\r\n        @.selectedUsers = Immutable.List()\r\n        @.selectableUsers = Immutable.List()\r\n        @.userContacts = Immutable.List()\r\n\r\n    fetchUser: () ->\r\n        @.currentUser = @currentUserService.getUser()\r\n\r\n        @userService.getContacts(@.currentUser.get('id')).then (userContacts) =>\r\n            @.userContacts = userContacts\r\n            @.refreshSelectableUsers()\r\n\r\n    searchUser: (user) ->\r\n        @.selectImportUserLightbox = true\r\n        @.searchingUser = user\r\n\r\n    beforeSubmitUsers: () ->\r\n        if @.selectedUsers.size != @.members.size\r\n            @.warningImportUsers = true\r\n        else\r\n            @.submit()\r\n\r\n    confirmUser: (externalUser, taigaUser) ->\r\n        @.selectImportUserLightbox = false\r\n\r\n        user = Immutable.Map()\r\n        user = user.set('user', externalUser)\r\n        user = user.set('taigaUser', taigaUser)\r\n\r\n        @.selectedUsers = @.selectedUsers.push(user)\r\n\r\n        @.discardSuggestedUser(externalUser)\r\n\r\n        @.refreshSelectableUsers()\r\n\r\n    unselectUser: (user) ->\r\n        index = @.selectedUsers.findIndex (it) -> it.getIn(['user', 'id']) == user.get('id')\r\n\r\n        @.selectedUsers = @.selectedUsers.delete(index)\r\n        @.refreshSelectableUsers()\r\n\r\n    discardSuggestedUser: (member) ->\r\n        @.cancelledUsers = @.cancelledUsers.push(member.get('id'))\r\n\r\n    getSelectedMember: (member) ->\r\n        return @.selectedUsers.find (it) ->\r\n            return it.getIn(['user', 'id']) == member.get('id')\r\n\r\n    isMemberSelected: (member) ->\r\n        return !!@.getSelectedMember(member)\r\n\r\n    getUser: (user) ->\r\n        userSelected = @.getSelectedMember(user)\r\n\r\n        if userSelected\r\n            return userSelected.get('taigaUser')\r\n        else\r\n            return null\r\n\r\n    submit: () ->\r\n        @.warningImportUsers = false\r\n\r\n        users = Immutable.Map()\r\n\r\n        @.selectedUsers.map (it) ->\r\n            id = ''\r\n\r\n            if _.isString(it.get('taigaUser'))\r\n                id = it.get('taigaUser')\r\n            else\r\n                id = it.getIn(['taigaUser', 'id'])\r\n\r\n            users = users.set(it.getIn(['user', 'id']), id)\r\n\r\n        @.onSubmit({users: users})\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size + 1)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size + 1)\r\n\r\n    showSuggestedMatch: (member) ->\r\n        return member.get('user') && @.cancelledUsers.indexOf(member.get('id')) == -1 && !@.isMemberSelected(member)\r\n\r\n    getDistinctSelectedTaigaUsers: () ->\r\n        ids = []\r\n\r\n        users = @.selectedUsers.filter (it) ->\r\n            id = it.getIn(['taigaUser', 'id'])\r\n\r\n            if ids.indexOf(id) == -1\r\n                ids.push(id)\r\n                return true\r\n\r\n            return false\r\n\r\n        return users.filter (it) =>\r\n            return it.getIn(['taigaUser', 'id']) != @.currentUser.get('id')\r\n\r\n    refreshSelectableUsers: () ->\r\n        @.importMoreUsersDisabled = @.isImportMoreUsersDisabled()\r\n\r\n        if @.importMoreUsersDisabled\r\n            users = @.getDistinctSelectedTaigaUsers()\r\n\r\n            @.selectableUsers = users.map (it) -> return it.get('taigaUser')\r\n            @.displayEmailSelector = false\r\n        else\r\n            @.selectableUsers = @.userContacts\r\n            @.displayEmailSelector = true\r\n\r\n        @.selectableUsers = @.selectableUsers.push(@.currentUser)\r\n\r\n    isImportMoreUsersDisabled: () ->\r\n        users = @.getDistinctSelectedTaigaUsers()\r\n\r\n        # currentUser + newUser = +2\r\n        total = users.size + 2\r\n\r\n\r\n        if @.project.get('is_private')\r\n            return !@currentUserService.canAddMembersPrivateProject(total).valid\r\n        else\r\n            return !@currentUserService.canAddMembersPublicProject(total).valid\r\n\r\nangular.module('taigaProjects').controller('ImportProjectMembersCtrl', ImportProjectMembersController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-project-members/import-project-members.directive.coffee\r\n###\r\n\r\nImportProjectMembersDirective = () ->\r\n    return {\r\n        link: (scope, elm, attr, ctrl) ->\r\n            ctrl.fetchUser()\r\n\r\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\r\n\r\n        templateUrl:\"projects/create/import-project-members/import-project-members.html\",\r\n        controller: \"ImportProjectMembersCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            members: '<',\r\n            project: '<',\r\n            onSubmit: '&',\r\n            platform: '@',\r\n            logo: '@',\r\n            onCancel: '&'\r\n        }\r\n    }\r\n\r\nImportProjectMembersDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgImportProjectMembers\", ImportProjectMembersDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-project-selector/import-project-selector.controller.coffee\r\n###\r\n\r\nclass ImportProjectSelectorController\r\n    selectProject: (project) ->\r\n        @.onSelectProject({project: Immutable.fromJS(project)})\r\n\r\nangular.module('taigaProjects').controller('ImportProjectSelectorCtrl', ImportProjectSelectorController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-project-selector/import-project-selector.directive.coffee\r\n###\r\n\r\nImportProjectSelectorDirective = () ->\r\n    return {\r\n        templateUrl:\"projects/create/import-project-selector/import-project-selector.html\",\r\n        controller: \"ImportProjectSelectorCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            projects: '<',\r\n            onCancel: '&',\r\n            onSelectProject: '&',\r\n            logo: '@',\r\n            noProjectsMsg: '@',\r\n            search: '@'\r\n        }\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgImportProjectSelector\", ImportProjectSelectorDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-taiga/import-taiga.controller.coffee\r\n###\r\n\r\nclass ImportTaigaController\r\n    @.$inject = [\r\n        '$tgConfirm',\r\n        '$tgResources',\r\n        'tgImportProjectService',\r\n        '$translate',\r\n        '$tgAnalytics',\r\n    ]\r\n\r\n    constructor: (@confirm, @rs, @importProjectService, @translate, @analytics) ->\r\n\r\n    importTaiga: (files) ->\r\n        @analytics.trackEvent(\"import\", \"taiga\", \"Start import from taiga\", 1)\r\n\r\n        file = files[0]\r\n\r\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'),\r\n            @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\r\n\r\n        loader.start()\r\n\r\n        promise = @rs.projects.import(file, loader.update)\r\n        @importProjectService.importPromise(promise).finally () -> loader.stop()\r\n\r\n        return\r\n\r\nangular.module(\"taigaProjects\").controller(\"ImportTaigaCtrl\", ImportTaigaController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import-taiga/import-taiga.directive.coffee\r\n###\r\n\r\nImportTaigaDirective = () ->\r\n    return {\r\n        templateUrl:\"projects/create/import-taiga/import-taiga.html\",\r\n        controller: \"ImportTaigaCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {}\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgImportTaiga\", ImportTaigaDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import/import-project-error-lb.directive.coffee\r\n###\r\n\r\nLbImportErrorDirective = (lightboxService) ->\r\n    link = (scope, el, attrs) ->\r\n        lightboxService.open(el)\r\n\r\n        scope.close = () ->\r\n            lightboxService.close(el)\r\n            return\r\n\r\n    return {\r\n        templateUrl: \"projects/create/import/import-project-error-lb.html\",\r\n        link: link\r\n    }\r\n\r\nLbImportErrorDirective.$inject = [\"lightboxService\"]\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgLbImportError\", LbImportErrorDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import/import-project.controller.coffee\r\n###\r\n\r\nclass ImportProjectController\r\n    @.$inject = [\r\n        'tgTrelloImportService',\r\n        'tgJiraImportService',\r\n        'tgGithubImportService',\r\n        'tgAsanaImportService',\r\n        '$location',\r\n        '$window',\r\n        '$routeParams',\r\n        '$tgNavUrls',\r\n        '$tgConfig',\r\n        '$tgConfirm',\r\n        '$tgAnalytics',\r\n    ]\r\n\r\n    constructor: (@trelloService, @jiraService, @githubService, @asanaService,\r\n                  @location, @window, @routeParams, @tgNavUrls, @config, @confirm,\r\n                  @analytics) ->\r\n\r\n    start: ->\r\n        @.token = null\r\n        @.from = @routeParams.platform\r\n\r\n        locationSearch = @location.search()\r\n\r\n        if @.from\r\n            @analytics.trackEvent(\"import\", @.from, \"Start import from \"+@.from, 1)\r\n\r\n        if @.from == \"asana\"\r\n            asanaOauthToken = locationSearch.code\r\n            if locationSearch.code\r\n                asanaOauthToken = locationSearch.code\r\n\r\n                return @asanaService.authorize(asanaOauthToken).then ((token) =>\r\n                    @location.search({token: encodeURIComponent(JSON.stringify(token))})\r\n                ), @.cancelCurrentImport.bind(this)\r\n            else\r\n                @.token = JSON.parse(decodeURIComponent(locationSearch.token))\r\n                @asanaService.setToken(@.token)\r\n\r\n        if @.from  == 'trello'\r\n            if locationSearch.oauth_verifier\r\n                trelloOauthToken = locationSearch.oauth_verifier\r\n                return @trelloService.authorize(trelloOauthToken).then ((token) =>\r\n                    @location.search({token: token})\r\n                ), @.cancelCurrentImport.bind(this)\r\n            else if locationSearch.token\r\n                @.token = locationSearch.token\r\n                @trelloService.setToken(locationSearch.token)\r\n\r\n        if @.from == \"github\"\r\n            if locationSearch.code\r\n                githubOauthToken = locationSearch.code\r\n\r\n                return @githubService.authorize(githubOauthToken).then ((token) =>\r\n                    @location.search({token: token})\r\n                ), @.cancelCurrentImport.bind(this)\r\n            else if locationSearch.token\r\n                @.token = locationSearch.token\r\n                @githubService.setToken(locationSearch.token)\r\n\r\n        if @.from == \"jira\"\r\n            jiraOauthToken = locationSearch.oauth_token\r\n\r\n            if jiraOauthToken\r\n                jiraOauthVerifier = locationSearch.oauth_verifier\r\n                return @jiraService.authorize(jiraOauthVerifier).then ((data) =>\r\n                    @location.search({token: data.token, url: data.url})\r\n                ), @.cancelCurrentImport.bind(this)\r\n            else\r\n                @.token = locationSearch.token\r\n                @jiraService.setToken(locationSearch.token, locationSearch.url)\r\n\r\n    select: (from) ->\r\n        if from == \"trello\"\r\n            @trelloService.getAuthUrl().then (url) =>\r\n                @window.open(url, \"_self\")\r\n        else if from == \"jira\"\r\n            @jiraService.getAuthUrl(@.jiraUrl).then (url) =>\r\n                @window.open url, \"_self\"\r\n            , (err) =>\r\n                @confirm.notify('error', err)\r\n        else if from == \"github\"\r\n            callbackUri = @location.absUrl() + \"/github\"\r\n            @githubService.getAuthUrl(callbackUri).then (url) =>\r\n                @window.open(url, \"_self\")\r\n        else if from == \"asana\"\r\n            @asanaService.getAuthUrl().then (url) =>\r\n                @window.open(url, \"_self\")\r\n        else\r\n            @.from = from\r\n\r\n    unfoldOptions: (options) ->\r\n        @.unfoldedOptions = options\r\n\r\n    isActiveImporter: (importer) ->\r\n        if @config.get('importers').indexOf(importer) == -1\r\n            return false\r\n        return true\r\n\r\n    cancelCurrentImport: () ->\r\n        @location.url(@tgNavUrls.resolve('create-project-import'))\r\n\r\n    backToCreate: () ->\r\n        @location.url(@tgNavUrls.resolve('create-project'))\r\n\r\nangular.module(\"taigaProjects\").controller(\"ImportProjectCtrl\", ImportProjectController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import/import-project.directive.coffee\r\n###\r\n\r\nImportProjectDirective = () ->\r\n\r\n    link = (scope, el, attr, ctrl) ->\r\n        ctrl.start()\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"projects/create/import/import-project.html\",\r\n        controller: \"ImportProjectCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            onCancelImport: '&'\r\n        }\r\n    }\r\n\r\nImportProjectDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgImportProject\", ImportProjectDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/import/import-project.service.coffee\r\n###\r\n\r\nclass ImportProjectService extends taiga.Service\r\n    @.$inject = [\r\n        'tgCurrentUserService',\r\n        '$tgAuth',\r\n        'tgLightboxFactory',\r\n        '$translate',\r\n        '$tgConfirm',\r\n        '$location',\r\n        '$tgNavUrls'\r\n    ]\r\n\r\n    constructor: (@currentUserService, @tgAuth, @lightboxFactory, @translate, @confirm, @location, @tgNavUrls) ->\r\n\r\n    importPromise: (promise) ->\r\n        return promise.then(@.importSuccess.bind(this), @.importError.bind(this))\r\n\r\n    importSuccess: (result) ->\r\n        promise = @currentUserService.loadProjects()\r\n        promise.then () =>\r\n            if result.status == 202 # Async mode\r\n                title = @translate.instant('PROJECT.IMPORT.ASYNC_IN_PROGRESS_TITLE')\r\n                message = @translate.instant('PROJECT.IMPORT.ASYNC_IN_PROGRESS_MESSAGE')\r\n                @location.path(@tgNavUrls.resolve('home'))\r\n                @confirm.success(title, message)\r\n            else # result.status == 201 # Sync mode\r\n                ctx = {project: result.data.slug}\r\n                @location.path(@tgNavUrls.resolve('project-admin-project-profile-details', ctx))\r\n                msg = @translate.instant('PROJECT.IMPORT.SYNC_SUCCESS')\r\n                @confirm.notify('success', msg)\r\n        return promise\r\n\r\n    importError: (result) ->\r\n        promise = @tgAuth.refresh()\r\n        promise.then () =>\r\n            restrictionError = @.getRestrictionError(result)\r\n\r\n            if restrictionError\r\n                @lightboxFactory.create('tg-lb-import-error', {\r\n                    class: 'lightbox lightbox-import-error'\r\n                }, restrictionError)\r\n\r\n            else\r\n                errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR\")\r\n\r\n                if result.status == 429  # TOO MANY REQUESTS\r\n                    errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR_TOO_MANY_REQUEST\")\r\n                else if result.data?._error_message\r\n                    errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR_MESSAGE\", {error_message: result.data._error_message})\r\n\r\n                @confirm.notify(\"error\", errorMsg)\r\n        return promise\r\n\r\n    getRestrictionError: (result) ->\r\n        if result.headers\r\n            errorKey = ''\r\n\r\n            user = @currentUserService.getUser()\r\n            maxMemberships = null\r\n\r\n            if result.headers.isPrivate\r\n                privateError = !@currentUserService.canCreatePrivateProjects().valid\r\n\r\n                if user.get('max_memberships_private_projects') != null && result.headers.memberships >= user.get('max_memberships_private_projects')\r\n                    membersError = true\r\n                else\r\n                    membersError = false\r\n\r\n                if privateError && membersError\r\n                    errorKey = 'private-space-members'\r\n                    maxMemberships = user.get('max_memberships_private_projects')\r\n                else if privateError\r\n                    errorKey = 'private-space'\r\n                else if membersError\r\n                    errorKey = 'private-members'\r\n                    maxMemberships = user.get('max_memberships_private_projects')\r\n\r\n            else\r\n                publicError = !@currentUserService.canCreatePublicProjects().valid\r\n\r\n                if user.get('max_memberships_public_projects') != null && result.headers.memberships >= user.get('max_memberships_public_projects')\r\n                    membersError = true\r\n                else\r\n                    membersError = false\r\n\r\n                if publicError && membersError\r\n                    errorKey = 'public-space-members'\r\n                    maxMemberships = user.get('max_memberships_public_projects')\r\n                else if publicError\r\n                    errorKey = 'public-space'\r\n                else if membersError\r\n                    errorKey = 'public-members'\r\n                    maxMemberships = user.get('max_memberships_public_projects')\r\n\r\n            if !errorKey\r\n                return false\r\n\r\n            return {\r\n                key: errorKey,\r\n                values: {\r\n                    max_memberships: maxMemberships,\r\n                    members: result.headers.memberships\r\n                }\r\n            }\r\n        else\r\n            return false\r\n\r\nangular.module(\"taigaProjects\").service(\"tgImportProjectService\", ImportProjectService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/invite-members/invite-members.controller.coffee\r\n###\r\n\r\nclass InviteMembersController\r\n    @.$inject = []\r\n\r\n    isDisabled: (id) ->\r\n        return @.invitedMembers.indexOf(id) == -1\r\n\r\nangular.module(\"taigaProjects\").controller(\"InviteMembersCtrl\", InviteMembersController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/invite-members/invite-members.directive.coffee\r\n###\r\n\r\nInviteMembersDirective = () ->\r\n    link = (scope, el, attr, ctrl) ->\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"projects/create/invite-members/invite-members.html\",\r\n        controller: \"InviteMembersCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            invitedMembers: '<',\r\n            members: '<',\r\n            onToggleInvitedMember: '&'\r\n        }\r\n    }\r\n\r\nInviteMembersDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgInviteMembers\", InviteMembersDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/invite-members/single-member/single-member.directive.coffee\r\n###\r\n\r\nSingleMemberDirective = () ->\r\n    return {\r\n        templateUrl:\"projects/create/invite-members/single-member/single-member.html\",\r\n        scope: {\r\n            disabled: \"<\",\r\n            avatar: \"=\"\r\n        }\r\n    }\r\n\r\nSingleMemberDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgSingleMember\", SingleMemberDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/jira-import/jira-import-project-form/jira-import-project-form.controller.coffee\r\n###\r\n\r\nclass JiraImportProjectFormController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        @.projectForm = @.project.toJS()\r\n\r\n        @.projectForm.is_private = false\r\n        @.projectForm.keepExternalReference = false\r\n        if @.projectForm.importer_type == \"agile\"\r\n            @.projectForm.project_type = null\r\n        else\r\n            @.projectForm.project_type = \"scrum\"\r\n        @.projectForm.create_subissues = true\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\r\n\r\n    saveForm: () ->\r\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid\r\n\r\n    isDisabled: () ->\r\n        return !@.canCreateProject()\r\n\r\nangular.module('taigaProjects').controller('JiraImportProjectFormCtrl', JiraImportProjectFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/jira-import/jira-import-project-form/jira-import-project-form.directive.coffee\r\n###\r\n\r\nJiraImportProjectFormDirective = () ->\r\n    return {\r\n        link: (scope, elm, attr, ctrl) ->\r\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\r\n\r\n        templateUrl:\"projects/create/jira-import/jira-import-project-form/jira-import-project-form.html\",\r\n        controller: \"JiraImportProjectFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            members: '<',\r\n            project: '<',\r\n            onSaveProjectDetails: '&',\r\n            onCancelForm: '&',\r\n            fetchingUsers: '<'\r\n        }\r\n    }\r\n\r\nJiraImportProjectFormDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgJiraImportProjectForm\", JiraImportProjectFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/jira-import/jira-import.controller.coffee\r\n###\r\n\r\nclass JiraImportController\r\n    @.$inject = [\r\n        'tgJiraImportService',\r\n        '$tgConfirm',\r\n        '$translate',\r\n        'tgImportProjectService',\r\n    ]\r\n\r\n    constructor: (@jiraImportService, @confirm, @translate, @importProjectService) ->\r\n        @.step = 'autorization-jira'\r\n        @.project = null\r\n        taiga.defineImmutableProperty @, 'projects', () => return @jiraImportService.projects\r\n        taiga.defineImmutableProperty @, 'members', () => return @jiraImportService.projectUsers\r\n\r\n    startProjectSelector: () ->\r\n        @.step = 'project-select-jira'\r\n        @jiraImportService.fetchProjects()\r\n\r\n    onSelectProject: (project) ->\r\n        @.step = 'project-form-jira'\r\n        @.project = project\r\n        @.fetchingUsers = true\r\n\r\n        @jiraImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\r\n\r\n    onSaveProjectDetails: (project) ->\r\n        @.project = project\r\n        @.step = 'project-members-jira'\r\n\r\n    onCancelMemberSelection: () ->\r\n        @.step = 'project-form-jira'        \r\n\r\n    startImport: (users) ->\r\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\r\n\r\n        loader.start()\r\n\r\n        projectType = @.project.get('project_type')\r\n        if projectType == \"issues\" and @.project.get('create_subissues')\r\n            projectType = \"issues-with-subissues\"\r\n\r\n        promise = @jiraImportService.importProject(\r\n            @.project.get('name'),\r\n            @.project.get('description'),\r\n            @.project.get('id'),\r\n            users,\r\n            @.project.get('keepExternalReference'),\r\n            @.project.get('is_private'),\r\n            projectType,\r\n            @.project.get('importer_type'),\r\n        )\r\n\r\n        @importProjectService.importPromise(promise).then () => loader.stop()\r\n\r\n    submitUserSelection: (users) ->\r\n        @.startImport(users)\r\n        return null\r\n\r\nangular.module('taigaProjects').controller('JiraImportCtrl', JiraImportController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/jira-import/jira-import.directive.coffee\r\n###\r\n\r\nJiraImportDirective = () ->\r\n    return {\r\n        link: (scope, elm, attrs, ctrl) ->\r\n            ctrl.startProjectSelector()\r\n        templateUrl:\"projects/create/jira-import/jira-import.html\",\r\n        controller: \"JiraImportCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            onCancel: '&'\r\n        }\r\n    }\r\n\r\nJiraImportDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgJiraImport\", JiraImportDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/jira-import/jira-import.service.coffee\r\n###\r\n\r\nclass JiraImportService extends taiga.Service\r\n    @.$inject = [\r\n        'tgResources',\r\n        '$location'\r\n    ]\r\n\r\n    constructor: (@resources, @location) ->\r\n        @.projects = Immutable.List()\r\n        @.projectUsers = Immutable.List()\r\n\r\n    setToken: (token, url) ->\r\n        @.token = token\r\n        @.url = url\r\n\r\n    fetchProjects: () ->\r\n        @resources.jiraImporter.listProjects(@.url, @.token).then (projects) => @.projects = projects\r\n\r\n    fetchUsers: (projectId) ->\r\n        @resources.jiraImporter.listUsers(@.url, @.token, projectId).then (users) => @.projectUsers = users\r\n\r\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType) ->\r\n            @resources.jiraImporter.importProject(@.url, @.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType)\r\n\r\n    getAuthUrl: (url) ->\r\n        return new Promise (resolve, reject) =>\r\n            @resources.jiraImporter.getAuthUrl(url).then (response) =>\r\n                @.authUrl = response.data.url\r\n                resolve(@.authUrl)\r\n            , (err) =>\r\n                reject(err.data._error_message)\r\n\r\n    authorize: (oauth_verifier) ->\r\n        return new Promise (resolve, reject) =>\r\n            @resources.jiraImporter.authorize(oauth_verifier).then ((response) =>\r\n                @.token = response.data.token\r\n                @.url = response.data.url\r\n                resolve(response.data)\r\n            ), (error) ->\r\n                reject(new Error(error.status))\r\n\r\nangular.module(\"taigaProjects\").service(\"tgJiraImportService\", JiraImportService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/select-import-user-lightbox/select-import-user-lightbox.controller.coffee\r\n###\r\n\r\nclass SelectImportUserLightboxCtrl\r\n    @.$inject = []\r\n\r\n    constructor: () ->\r\n\r\n    start: () ->\r\n        @.mode = 'search'\r\n        @.invalid = false\r\n\r\n    assignUser: () ->\r\n        @.onSelectUser({user: @.user, taigaUser: @.userEmail})\r\n\r\n    selectUser: (taigaUser) ->\r\n        @.onSelectUser({user: @.user, taigaUser: Immutable.fromJS(taigaUser)})\r\n\r\nangular.module('taigaProjects').controller('SelectImportUserLightboxCtrl', SelectImportUserLightboxCtrl)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/select-import-user-lightbox/select-import-user-lightbox.directive.coffee\r\n###\r\n\r\nSelectImportUserLightboxDirective = (lightboxService, lightboxKeyboardNavigationService) ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        scope.$watch 'vm.visible', (visible) ->\r\n            if visible && !el.hasClass('open')\r\n                ctrl.start()\r\n                lightboxService.open(el, null, scope.vm.onClose).then ->\r\n                    el.find('input').focus()\r\n                    lightboxKeyboardNavigationService.init(el)\r\n            else if !visible && el.hasClass('open')\r\n                lightboxService.close(el).then () ->\r\n                    ctrl.userEmail = ''\r\n                    ctrl.usersSearch = ''\r\n\r\n    return {\r\n        controller: \"SelectImportUserLightboxCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            user: '<',\r\n            visible: '<',\r\n            onClose: '&',\r\n            onSelectUser: '&',\r\n            selectableUsers: '<',\r\n            isPrivate: '<',\r\n            limitMembersPrivateProject: '<',\r\n            limitMembersPublicProject: '<',\r\n            displayEmailSelector: '<'\r\n        },\r\n        templateUrl: 'projects/create/select-import-user-lightbox/select-import-user-lightbox.html'\r\n        link: link\r\n    }\r\n\r\nSelectImportUserLightboxDirective.$inject = ['lightboxService', 'lightboxKeyboardNavigationService']\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgSelectImportUserLightbox\", SelectImportUserLightboxDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/trello-import/trello-import-project-form/trello-import-project-form.controller.coffee\r\n###\r\n\r\nclass TrelloImportProjectFormController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\r\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\r\n\r\n        @.projectForm = @.project.toJS()\r\n\r\n        @.platformName = \"Trello\"\r\n        @.projectForm.is_private = false\r\n        @.projectForm.keepExternalReference = false\r\n\r\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\r\n            @.projectForm.is_private = true\r\n\r\n    checkUsersLimit: () ->\r\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\r\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\r\n\r\n    saveForm: () ->\r\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\r\n\r\n    canCreateProject: () ->\r\n        if @.projectForm.is_private\r\n            return @.canCreatePrivateProjects.valid\r\n        else\r\n            return @.canCreatePublicProjects.valid\r\n\r\n    isDisabled: () ->\r\n        return !@.canCreateProject()\r\n\r\nangular.module('taigaProjects').controller('TrelloImportProjectFormCtrl', TrelloImportProjectFormController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/trello-import/trello-import-project-form/trello-import-project-form.directive.coffee\r\n###\r\n\r\nTrelloImportProjectFormDirective = () ->\r\n    return {\r\n        link: (scope, elm, attr, ctrl) ->\r\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\r\n\r\n        templateUrl:\"projects/create/trello-import/trello-import-project-form/trello-import-project-form.html\",\r\n        controller: \"TrelloImportProjectFormCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            members: '<',\r\n            project: '<',\r\n            onSaveProjectDetails: '&',\r\n            onCancelForm: '&',\r\n            fetchingUsers: '<'\r\n        }\r\n    }\r\n\r\nTrelloImportProjectFormDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgTrelloImportProjectForm\", TrelloImportProjectFormDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/trello-import/trello-import.controller.coffee\r\n###\r\n\r\nclass TrelloImportController\r\n    @.$inject = [\r\n        'tgTrelloImportService',\r\n        '$tgConfirm',\r\n        '$translate',\r\n        'tgImportProjectService',\r\n    ]\r\n\r\n    constructor: (@trelloImportService, @confirm, @translate, @importProjectService) ->\r\n        @.project = null\r\n        taiga.defineImmutableProperty @, 'projects', () => return @trelloImportService.projects\r\n        taiga.defineImmutableProperty @, 'members', () => return @trelloImportService.projectUsers\r\n\r\n    startProjectSelector: () ->\r\n        @trelloImportService.fetchProjects().then () => @.step = 'project-select-trello'\r\n\r\n    onSelectProject: (project) ->\r\n        @.step = 'project-form-trello'\r\n        @.project = project\r\n        @.fetchingUsers = true\r\n\r\n        @trelloImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\r\n\r\n    onSaveProjectDetails: (project) ->\r\n        @.project = project\r\n        @.step = 'project-members-trello'\r\n\r\n    onCancelMemberSelection: () ->\r\n        @.step = 'project-form-trello'\r\n\r\n    startImport: (users) ->\r\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\r\n\r\n        loader.start()\r\n\r\n        promise = @trelloImportService.importProject(\r\n            @.project.get('name'),\r\n            @.project.get('description'),\r\n            @.project.get('id'),\r\n            users,\r\n            @.project.get('keepExternalReference'),\r\n            @.project.get('is_private')\r\n        )\r\n\r\n        @importProjectService.importPromise(promise).then () => loader.stop()\r\n\r\n    submitUserSelection: (users) ->\r\n        @.startImport(users)\r\n\r\n        return null\r\n\r\nangular.module('taigaProjects').controller('TrelloImportCtrl', TrelloImportController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/trello-import/trello-import.directive.coffee\r\n###\r\n\r\nTrelloImportDirective = () ->\r\n    return {\r\n        link: (scope, elm, attrs, ctrl) ->\r\n            ctrl.startProjectSelector()\r\n        templateUrl:\"projects/create/trello-import/trello-import.html\",\r\n        controller: \"TrelloImportCtrl\",\r\n        controllerAs: \"vm\",\r\n        bindToController: true,\r\n        scope: {\r\n            onCancel: '&'\r\n        }\r\n    }\r\n\r\nTrelloImportDirective.$inject = []\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgTrelloImport\", TrelloImportDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/trello-import/trello-import.service.coffee\r\n###\r\n\r\nclass TrelloImportService extends taiga.Service\r\n    @.$inject = [\r\n        'tgResources'\r\n    ]\r\n\r\n    constructor: (@resources) ->\r\n        @.projects = Immutable.List()\r\n        @.projectUsers = Immutable.List()\r\n        @.token = null\r\n\r\n    setToken: (token) ->\r\n        @.token = token\r\n\r\n    fetchProjects: () ->\r\n        @resources.trelloImporter.listProjects(@.token).then (projects) => @.projects = projects\r\n\r\n    fetchUsers: (projectId) ->\r\n        @resources.trelloImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\r\n\r\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate) ->\r\n        return @resources.trelloImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate)\r\n\r\n    getAuthUrl: () ->\r\n        return new Promise (resolve) =>\r\n            @resources.trelloImporter.getAuthUrl().then (response) =>\r\n                @.authUrl = response.data.url\r\n                resolve(@.authUrl)\r\n\r\n    authorize: (verifyCode) ->\r\n        return new Promise (resolve, reject) =>\r\n            @resources.trelloImporter.authorize(verifyCode).then ((response) =>\r\n                @.token = response.data.token\r\n                resolve(@.token)\r\n            ), (error) ->\r\n                reject(new Error(error.status))\r\n\r\nangular.module(\"taigaProjects\").service(\"tgTrelloImportService\", TrelloImportService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/create/warning-user-import-lightbox/warning-user-import-lightbox.directive.coffee\r\n###\r\n\r\nWarningUserImportDirective = (lightboxService, lightboxKeyboardNavigationService) ->\r\n    return {\r\n        link: (scope, el, attr) ->\r\n            scope.$watch 'visible', (visible) ->\r\n                if visible && !el.hasClass('open')\r\n                    lightboxService.open(el, scope.onClose).then ->\r\n                        el.find('input').focus()\r\n                        lightboxKeyboardNavigationService.init(el)\r\n                else if !visible && el.hasClass('open')\r\n                    lightboxService.close(el)\r\n\r\n        templateUrl:\"projects/create/warning-user-import-lightbox/warning-user-import-lightbox.html\",\r\n        scope: {\r\n            visible: '<',\r\n            onClose: '&',\r\n            onConfirm: '&'\r\n        }\r\n    }\r\n\r\nWarningUserImportDirective.$inject = ['lightboxService', 'lightboxKeyboardNavigationService']\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgWarningUserImportLightbox\", WarningUserImportDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/listing/projects-listing.controller.coffee\r\n###\r\n\r\nclass ProjectsListingController\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService) ->\r\n        taiga.defineImmutableProperty(@, \"projects\", () => @currentUserService.projects.get(\"all\"))\r\n\r\nangular.module(\"taigaProjects\").controller(\"ProjectsListing\", ProjectsListingController)\r\n","###\r\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: project-router.controller.coffee\r\n###\r\n\r\nclass ProjectRouterController\r\n    @.$inject = [\r\n        \"$routeParams\",\r\n        \"$location\"\r\n        \"tgProjectService\"\r\n        \"$tgResources\"\r\n        \"$tgSections\"\r\n    ]\r\n\r\n    constructor: (@routeParams, @location, @projectService, @rs, @tgSections) ->\r\n        @getProjectHomepage()\r\n            .then (section) =>\r\n                if section\r\n                    @location.url(\"project/#{@routeParams.pslug}/#{section}\")\r\n                else\r\n                    @gotoDefaultProjectHomepage()\r\n            .then null, ->\r\n                @gotoDefaultProjectHomepage()\r\n\r\n    gotoDefaultProjectHomepage: () ->\r\n        @location.url(\"project/#{@routeParams.pslug}/timeline\")\r\n\r\n    getProjectHomepage: () ->\r\n        project = @projectService.project.toJS()\r\n\r\n        @rs.userProjectSettings.list({project: project.id}).then (userProjectSettings) =>\r\n            settings = _.find(userProjectSettings, {\"project\": project.id})\r\n            return if !settings\r\n\r\n            return @tgSections.getPath(project.slug, settings.homepage)\r\n\r\nangular.module(\"taigaProjects\").controller(\"ProjectRouter\", ProjectRouterController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/project/project.controller.coffee\r\n###\r\n\r\nclass ProjectController\r\n    @.$inject = [\r\n        \"$routeParams\",\r\n        \"tgAppMetaService\",\r\n        \"$tgAuth\",\r\n        \"$translate\",\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@routeParams, @appMetaService, @auth, @translate, @projectService) ->\r\n        @.user = @auth.userData\r\n\r\n        taiga.defineImmutableProperty @, \"project\", () => return @projectService.project\r\n        taiga.defineImmutableProperty @, \"members\", () => return @projectService.activeMembers\r\n\r\n        @appMetaService.setfn @._setMeta.bind(this)\r\n\r\n    _setMeta: ()->\r\n        return null if !@.project\r\n\r\n        ctx = {projectName: @.project.get(\"name\")}\r\n\r\n        return {\r\n            title: @translate.instant(\"PROJECT.PAGE_TITLE\", ctx)\r\n            description: @.project.get(\"description\")\r\n        }\r\n\r\nangular.module(\"taigaProjects\").controller(\"Project\", ProjectController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/projects.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\ngroupBy = @.taiga.groupBy\r\n\r\n\r\nclass ProjectsService extends taiga.Service\r\n    @.$inject = [\"tgResources\", \"$projectUrl\"]\r\n\r\n    constructor: (@rs, @projectUrl) ->\r\n\r\n    create: (data) ->\r\n        return @rs.projects.create(data)\r\n\r\n    duplicate: (projectId, data) ->\r\n        return @rs.projects.duplicate(projectId, data)\r\n\r\n    getProjectBySlug: (projectSlug) ->\r\n        return @rs.projects.getProjectBySlug(projectSlug)\r\n            .then (project) =>\r\n                return @._decorate(project)\r\n\r\n    getProjectStats: (projectId) ->\r\n        return @rs.projects.getProjectStats(projectId)\r\n\r\n    getProjectsByUserId: (userId, paginate) ->\r\n        return @rs.projects.getProjectsByUserId(userId, paginate)\r\n            .then (projects) =>\r\n                return projects.map @._decorate.bind(@)\r\n\r\n    _decorate: (project) ->\r\n        url = @projectUrl.get(project.toJS())\r\n\r\n        project = project.set(\"url\", url)\r\n\r\n        return project\r\n\r\n    bulkUpdateProjectsOrder: (sortData) ->\r\n        return @rs.projects.bulkUpdateOrder(sortData)\r\n\r\n    transferValidateToken: (projectId, token) ->\r\n        return @rs.projects.transferValidateToken(projectId, token)\r\n\r\n    transferAccept: (projectId, token, reason) ->\r\n        return @rs.projects.transferAccept(projectId, token, reason)\r\n\r\n    transferReject: (projectId, token, reason) ->\r\n        return @rs.projects.transferReject(projectId, token, reason)\r\n\r\n\r\nangular.module(\"taigaProjects\").service(\"tgProjectsService\", ProjectsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/transfer/cant-own-project-explanation.directive.coffee\r\n###\r\n\r\nCantOwnProjectExplanationDirective = () ->\r\n    return {\r\n        templateUrl: \"projects/transfer/cant-own-project-explanation.html\"\r\n    }\r\n\r\nangular.module(\"taigaProjects\").directive(\"tgCantOwnProjectExplanation\", CantOwnProjectExplanationDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/transfer/transfer-project.controller.coffee\r\n###\r\n\r\nmodule = angular.module('taigaProjects')\r\n\r\nclass TransferProject\r\n    @.$inject = [\r\n        \"$routeParams\",\r\n        \"tgProjectsService\"\r\n        \"$location\",\r\n        \"$tgAuth\",\r\n        \"tgCurrentUserService\",\r\n        \"$tgNavUrls\",\r\n        \"$translate\",\r\n        \"$tgConfirm\",\r\n        \"tgErrorHandlingService\"\r\n    ]\r\n\r\n    constructor: (@routeParams, @projectService, @location, @authService, @currentUserService, @navUrls, @translate, @confirmService, @errorHandlingService) ->\r\n\r\n    initialize: () ->\r\n        @.projectId = @.project.get(\"id\")\r\n        @.token = @routeParams.token\r\n        @.showAddComment = false\r\n        return @._refreshUserData()\r\n\r\n    _validateToken: () ->\r\n        return @projectService.transferValidateToken(@.projectId, @.token).then null, (data, status) =>\r\n            @errorHandlingService.notfound()\r\n\r\n    _refreshUserData: () ->\r\n        return @authService.refresh().then () =>\r\n            @._validateToken()\r\n            @._setProjectData()\r\n            @._checkOwnerData()\r\n\r\n    _setProjectData: () ->\r\n        @.canBeOwnedByUser = @currentUserService.canOwnProject(@.project)\r\n\r\n    _checkOwnerData: () ->\r\n        currentUser = @currentUserService.getUser()\r\n        if(@.project.get('is_private'))\r\n            @.ownerMessage = 'ADMIN.PROJECT_TRANSFER.OWNER_MESSAGE.PRIVATE'\r\n            @.maxProjects = currentUser.get('max_private_projects')\r\n            if @.maxProjects == null\r\n                @.maxProjects = @translate.instant('ADMIN.PROJECT_TRANSFER.UNLIMITED_PROJECTS')\r\n            @.currentProjects = currentUser.get('total_private_projects')\r\n            maxMemberships = currentUser.get('max_memberships_private_projects')\r\n\r\n        else\r\n            @.ownerMessage = 'ADMIN.PROJECT_TRANSFER.OWNER_MESSAGE.PUBLIC'\r\n            @.maxProjects = currentUser.get('max_public_projects')\r\n            if @.maxProjects == null\r\n                @.maxProjects = @translate.instant('ADMIN.PROJECT_TRANSFER.UNLIMITED_PROJECTS')\r\n            @.currentProjects = currentUser.get('total_public_projects')\r\n            maxMemberships = currentUser.get('max_memberships_public_projects')\r\n\r\n        @.validNumberOfMemberships = maxMemberships == null || @.project.get('total_memberships') <= maxMemberships\r\n\r\n    transferAccept: (token, reason) ->\r\n        @.loadingAccept = true\r\n        return @projectService.transferAccept(@.project.get(\"id\"), token, reason).then () =>\r\n            newUrl = @navUrls.resolve(\"project-admin-project-profile-details\", {\r\n                project: @.project.get(\"slug\")\r\n            })\r\n            @.loadingAccept = false\r\n            @location.path(newUrl)\r\n\r\n            @confirmService.notify(\"success\", @translate.instant(\"ADMIN.PROJECT_TRANSFER.ACCEPTED_PROJECT_OWNERNSHIP\"), '', 5000)\r\n            return\r\n\r\n    transferReject: (token, reason) ->\r\n        @.loadingReject = true\r\n        return @projectService.transferReject(@.project.get(\"id\"), token, reason).then () =>\r\n            newUrl = @navUrls.resolve(\"home\", {\r\n                project: @project.get(\"slug\")\r\n            })\r\n            @.loadingReject = false\r\n            @location.path(newUrl)\r\n            @confirmService.notify(\"success\", @translate.instant(\"ADMIN.PROJECT_TRANSFER.REJECTED_PROJECT_OWNERNSHIP\"), '', 5000)\r\n\r\n            return\r\n\r\n    addComment: () ->\r\n        @.showAddComment = true\r\n\r\n    hideComment: () ->\r\n        @.showAddComment = false\r\n        @.reason = ''\r\n\r\n\r\nmodule.controller(\"TransferProjectController\", TransferProject)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: projects/transfer/transfer-project.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaProjects')\r\n\r\nTransferProjectDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n      ctrl.initialize()\r\n\r\n    return {\r\n        link: link,\r\n        scope: {},\r\n        bindToController: {\r\n            project: \"=\"\r\n        },\r\n        templateUrl: \"projects/transfer/transfer-project.html\",\r\n        controller: 'TransferProjectController',\r\n        controllerAs: 'vm'\r\n    }\r\n\r\nmodule.directive('tgTransferProject', TransferProjectDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/attachments-resource.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\nResource = (urlsService, http, config, $rootScope, $q, storage) ->\r\n    service = {}\r\n\r\n    service.list = (type, objectId, projectId) ->\r\n        urlname = \"attachments/#{type}\"\r\n\r\n        params = {object_id: objectId, project: projectId}\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        url = urlsService.resolve(urlname)\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) -> Immutable.fromJS(result.data)\r\n\r\n    service.delete = (type, id) ->\r\n        urlname = \"attachments/#{type}\"\r\n\r\n        url = urlsService.resolve(urlname) + \"/#{id}\"\r\n\r\n        return http.delete(url)\r\n\r\n    service.patch = (type, id, patch) ->\r\n        urlname = \"attachments/#{type}\"\r\n\r\n        url = urlsService.resolve(urlname) + \"/#{id}\"\r\n\r\n        return http.patch(url, patch)\r\n\r\n    service.create = (type, projectId, objectId, file, from_comment) ->\r\n        urlname = \"attachments/#{type}\"\r\n\r\n        url = urlsService.resolve(urlname)\r\n\r\n        defered = $q.defer()\r\n\r\n        if file is undefined\r\n            defered.reject(null)\r\n            return defered.promise\r\n\r\n        maxFileSize = config.get(\"maxUploadFileSize\", null)\r\n\r\n        if maxFileSize and file.size > maxFileSize\r\n            response = {\r\n                status: 413,\r\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\r\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\r\n            }\r\n            defered.reject(response)\r\n            return defered.promise\r\n\r\n        uploadProgress = (evt) =>\r\n            $rootScope.$apply =>\r\n                file.status = \"in-progress\"\r\n                file.size = sizeFormat(evt.total)\r\n                file.progressMessage = \"upload #{sizeFormat(evt.loaded)} of #{sizeFormat(evt.total)}\"\r\n                file.progressPercent = \"#{Math.round((evt.loaded / evt.total) * 100)}%\"\r\n\r\n        uploadComplete = (evt) =>\r\n            $rootScope.$apply ->\r\n                file.status = \"done\"\r\n\r\n                status = evt.target.status\r\n                try\r\n                    attachment = JSON.parse(evt.target.responseText)\r\n                catch\r\n                    attachment = {}\r\n\r\n                if status >= 200 and status < 400\r\n                    attachment = Immutable.fromJS(attachment)\r\n                    defered.resolve(attachment)\r\n                else\r\n                    response = {\r\n                        status: status,\r\n                        data: {_error_message: data['attached_file']?[0]}\r\n                    }\r\n                    defered.reject(response)\r\n\r\n        uploadFailed = (evt) =>\r\n            $rootScope.$apply ->\r\n                file.status = \"error\"\r\n                defered.reject(\"fail\")\r\n\r\n        data = new FormData()\r\n        data.append(\"project\", projectId)\r\n        data.append(\"object_id\", objectId)\r\n        data.append(\"attached_file\", file)\r\n        data.append(\"from_comment\", from_comment)\r\n\r\n        xhr = new XMLHttpRequest()\r\n        xhr.upload.addEventListener(\"progress\", uploadProgress, false)\r\n        xhr.addEventListener(\"load\", uploadComplete, false)\r\n        xhr.addEventListener(\"error\", uploadFailed, false)\r\n\r\n        token = storage.get('token')\r\n\r\n        xhr.open(\"POST\", url)\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer #{token}\")\r\n        xhr.setRequestHeader('Accept', 'application/json')\r\n        xhr.send(data)\r\n\r\n        return defered.promise\r\n\r\n    return () ->\r\n        return {\"attachments\": service}\r\n\r\nResource.$inject = [\r\n    \"$tgUrls\",\r\n    \"$tgHttp\",\r\n    \"$tgConfig\",\r\n    \"$rootScope\",\r\n    \"$q\",\r\n    \"$tgStorage\"\r\n]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgAttachmentsResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/epics-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.listInAllProjects = (params) ->\r\n        url = urlsService.resolve(\"epics\")\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.list = (projectId, page=0) ->\r\n        url = urlsService.resolve(\"epics\")\r\n\r\n        params = {project: projectId, page: page}\r\n\r\n        return http.get(url, params)\r\n            .then (result) ->\r\n                return {\r\n                    list: Immutable.fromJS(result.data)\r\n                    headers: result.headers\r\n                }\r\n\r\n    service.patch = (id, patch) ->\r\n        url = urlsService.resolve(\"epics\") + \"/#{id}\"\r\n\r\n        return http.patch(url, patch)\r\n            .then (result) -> Immutable.fromJS(result.data)\r\n\r\n    service.post = (params) ->\r\n        url = urlsService.resolve(\"epics\")\r\n\r\n        return http.post(url, params)\r\n            .then (result) -> Immutable.fromJS(result.data)\r\n\r\n    service.reorder = (id, data, setOrders) ->\r\n        url = urlsService.resolve(\"epics\") + \"/#{id}\"\r\n\r\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\r\n\r\n        return http.patch(url, data, null, options)\r\n            .then (result) -> Immutable.fromJS(result.data)\r\n\r\n    service.addRelatedUserstory = (epicId, userstoryId) ->\r\n        url = urlsService.resolve(\"epic-related-userstories\", epicId)\r\n\r\n        params = {\r\n            user_story: userstoryId\r\n            epic: epicId\r\n        }\r\n\r\n        return http.post(url, params)\r\n\r\n    service.reorderRelatedUserstory = (epicId, userstoryId, data, setOrders) ->\r\n        url = urlsService.resolve(\"epic-related-userstories\", epicId) + \"/#{userstoryId}\"\r\n\r\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\r\n\r\n        return http.patch(url, data, null, options)\r\n\r\n    service.bulkCreateRelatedUserStories = (epicId, projectId, bulk_userstories) ->\r\n        url = urlsService.resolve(\"epic-related-userstories-bulk-create\", epicId)\r\n\r\n        params = {\r\n            bulk_userstories: bulk_userstories,\r\n            project_id: projectId\r\n        }\r\n\r\n        return http.post(url, params)\r\n\r\n    service.deleteRelatedUserstory = (epicId, userstoryId) ->\r\n        url = urlsService.resolve(\"epic-related-userstories\", epicId) + \"/#{userstoryId}\"\r\n\r\n        return http.delete(url)\r\n\r\n    return () ->\r\n        return {\"epics\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgEpicsResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/external-apps-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getApplicationToken = (applicationId, state) ->\r\n        url = urlsService.resolve(\"applications\")\r\n        url = \"#{url}/#{applicationId}/token?state=#{state}\"\r\n        return http.get(url).then (result) ->\r\n            Immutable.fromJS(result.data)\r\n\r\n    service.authorizeApplicationToken = (applicationId, state) ->\r\n        url = urlsService.resolve(\"application-tokens\")\r\n        url = \"#{url}/authorize\"\r\n        data = {\r\n            \"state\": state\r\n            \"application\": applicationId\r\n        }\r\n\r\n        return http.post(url, data).then (result) ->\r\n            Immutable.fromJS(result.data)\r\n\r\n    return () ->\r\n        return {\"externalapps\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgExternalAppsResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/history-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getHistory = (historyType, contentType, objectId, page) ->\r\n        url = urlsService.resolve(\"history/#{contentType}\", )\r\n        return http.get(\"#{url}/#{objectId}\", {page: page, type: historyType})\r\n            .then (result) ->\r\n                return {\r\n                    list: Immutable.fromJS(result.data)\r\n                    headers: result.headers\r\n                }\r\n\r\n    return () ->\r\n        return {\"history\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgHistory\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/importers-resource.service.coffee\r\n###\r\n\r\n\r\ntaiga = @.taiga\r\n\r\nTrelloResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getAuthUrl = (url) ->\r\n        url = urlsService.resolve(\"importers-trello-auth-url\")\r\n        return http.get(url)\r\n\r\n    service.authorize = (verifyCode) ->\r\n        url = urlsService.resolve(\"importers-trello-authorize\")\r\n        return http.post(url, {code: verifyCode})\r\n\r\n    service.listProjects = (token) ->\r\n        url = urlsService.resolve(\"importers-trello-list-projects\")\r\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.listUsers = (token, projectId) ->\r\n        url = urlsService.resolve(\"importers-trello-list-users\")\r\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate) ->\r\n        url = urlsService.resolve(\"importers-trello-import-project\")\r\n        data = {\r\n            token: token,\r\n            name: name,\r\n            description: description,\r\n            project: projectId,\r\n            users_bindings: userBindings.toJS(),\r\n            keep_external_reference: keepExternalReference,\r\n            is_private: isPrivate,\r\n            template: \"kanban\",\r\n        }\r\n        return http.post(url, data)\r\n\r\n    return () ->\r\n        return {\"trelloImporter\": service}\r\n\r\nTrelloResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nJiraResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getAuthUrl = (jira_url) ->\r\n        url = urlsService.resolve(\"importers-jira-auth-url\") + \"?url=\" + jira_url\r\n        return http.get(url)\r\n\r\n    service.authorize = (oauth_verifier) ->\r\n        url = urlsService.resolve(\"importers-jira-authorize\")\r\n        return http.post(url, {oauth_verifier: oauth_verifier})\r\n\r\n    service.listProjects = (jira_url, token) ->\r\n        url = urlsService.resolve(\"importers-jira-list-projects\")\r\n        return http.post(url, {url: jira_url, token: token}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.listUsers = (jira_url, token, projectId) ->\r\n        url = urlsService.resolve(\"importers-jira-list-users\")\r\n        return http.post(url, {url: jira_url, token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.importProject = (jira_url, token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType) ->\r\n        url = urlsService.resolve(\"importers-jira-import-project\")\r\n        projectTemplate = \"kanban\"\r\n        if projectType != \"kanban\"\r\n            projectTemplate = \"scrum\"\r\n\r\n        data = {\r\n            url: jira_url,\r\n            token: token,\r\n            name: name,\r\n            description: description,\r\n            project: projectId,\r\n            users_bindings: userBindings.toJS(),\r\n            keep_external_reference: keepExternalReference,\r\n            is_private: isPrivate,\r\n            project_type: projectType,\r\n            importer_type: importerType,\r\n            template: projectTemplate,\r\n        }\r\n        return http.post(url, data)\r\n\r\n    return () ->\r\n        return {\"jiraImporter\": service}\r\n\r\nJiraResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nGithubResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getAuthUrl = (callbackUri) ->\r\n        url = urlsService.resolve(\"importers-github-auth-url\") + \"?uri=\" + callbackUri\r\n        return http.get(url)\r\n\r\n    service.authorize = (code) ->\r\n        url = urlsService.resolve(\"importers-github-authorize\")\r\n        return http.post(url, {code: code})\r\n\r\n    service.listProjects = (token) ->\r\n        url = urlsService.resolve(\"importers-github-list-projects\")\r\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.listUsers = (token, projectId) ->\r\n        url = urlsService.resolve(\"importers-github-list-users\")\r\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\r\n        url = urlsService.resolve(\"importers-github-import-project\")\r\n\r\n        data = {\r\n            token: token,\r\n            name: name,\r\n            description: description,\r\n            project: projectId,\r\n            users_bindings: userBindings.toJS(),\r\n            keep_external_reference: keepExternalReference,\r\n            is_private: isPrivate,\r\n            template: projectType,\r\n        }\r\n        return http.post(url, data)\r\n\r\n    return () ->\r\n        return {\"githubImporter\": service}\r\n\r\nGithubResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nAsanaResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.getAuthUrl = () ->\r\n        url = urlsService.resolve(\"importers-asana-auth-url\")\r\n        return http.get(url)\r\n\r\n    service.authorize = (code) ->\r\n        url = urlsService.resolve(\"importers-asana-authorize\")\r\n        return http.post(url, {code: code})\r\n\r\n    service.listProjects = (token) ->\r\n        url = urlsService.resolve(\"importers-asana-list-projects\")\r\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.listUsers = (token, projectId) ->\r\n        url = urlsService.resolve(\"importers-asana-list-users\")\r\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\r\n\r\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\r\n        url = urlsService.resolve(\"importers-asana-import-project\")\r\n\r\n        data = {\r\n            token: token,\r\n            name: name,\r\n            description: description,\r\n            project: projectId,\r\n            users_bindings: userBindings.toJS(),\r\n            keep_external_reference: keepExternalReference,\r\n            is_private: isPrivate,\r\n            template: projectType,\r\n        }\r\n        return http.post(url, data)\r\n\r\n    return () ->\r\n        return {\"asanaImporter\": service}\r\n\r\nAsanaResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgTrelloImportResource\", TrelloResource)\r\nmodule.factory(\"tgJiraImportResource\", JiraResource)\r\nmodule.factory(\"tgGithubImportResource\", GithubResource)\r\nmodule.factory(\"tgAsanaImportResource\", AsanaResource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/issues-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.listInAllProjects = (params) ->\r\n        url = urlsService.resolve(\"issues\")\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    return () ->\r\n        return {\"issues\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgIssuesResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/projects-resource.service.coffee\r\n###\r\n\r\npagination = () ->\r\n\r\nResource = (urlsService, http, paginateResponseService) ->\r\n    service = {}\r\n\r\n    service.create = (data) ->\r\n        url = urlsService.resolve('projects')\r\n\r\n        return http.post(url, JSON.stringify(data))\r\n            .then (result) => return Immutable.fromJS(result.data)\r\n\r\n    service.duplicate = (projectId, data) ->\r\n\r\n        url = urlsService.resolve(\"projects\")\r\n        url = \"#{url}/#{projectId}/duplicate\"\r\n\r\n        members = data.users.map (member) => {\"id\": member}\r\n\r\n        params = {\r\n            \"name\": data.name,\r\n            \"description\": data.description,\r\n            \"is_private\": data.is_private,\r\n            \"users\": members\r\n        }\r\n\r\n        return http.post(url, params)\r\n\r\n    service.getProjects = (params = {}, pagination = true) ->\r\n        url = urlsService.resolve(\"projects\")\r\n\r\n        httpOptions = {}\r\n\r\n        if !pagination\r\n            httpOptions = {\r\n                headers: {\r\n                    \"x-lazy-pagination\": true\r\n                }\r\n            }\r\n\r\n        return http.get(url, params, httpOptions)\r\n\r\n    service.getProjectBySlug = (projectSlug) ->\r\n        url = urlsService.resolve(\"projects\")\r\n\r\n        url = \"#{url}/by_slug?slug=#{projectSlug}\"\r\n\r\n        return http.get(url)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.getProjectsByUserId = (userId, paginate=false) ->\r\n        url = urlsService.resolve(\"projects\")\r\n        httpOptions = {}\r\n\r\n        if !paginate\r\n            httpOptions.headers = {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n\r\n        params = {\"member\": userId, \"order_by\": \"user_order\"}\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.getProjectStats = (projectId) ->\r\n        url = urlsService.resolve(\"projects\")\r\n        url = \"#{url}/#{projectId}\"\r\n\r\n        return http.get(url)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.bulkUpdateOrder = (bulkData) ->\r\n        url = urlsService.resolve(\"bulk-update-projects-order\")\r\n        return http.post(url, bulkData)\r\n\r\n    service.getTimeline = (projectId, page) ->\r\n        params = {\r\n            page: page,\r\n            only_relevant: true\r\n        }\r\n\r\n        url = urlsService.resolve(\"timeline-project\")\r\n        url = \"#{url}/#{projectId}\"\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.likeProject = (projectId) ->\r\n        url = urlsService.resolve(\"project-like\", projectId)\r\n        return http.post(url)\r\n\r\n    service.unlikeProject = (projectId) ->\r\n        url = urlsService.resolve(\"project-unlike\", projectId)\r\n        return http.post(url)\r\n\r\n    service.watchProject = (projectId, notifyLevel) ->\r\n        data = {\r\n            notify_level: notifyLevel\r\n            live_notify_level: notifyLevel\r\n        }\r\n        url = urlsService.resolve(\"project-watch\", projectId)\r\n        return http.post(url, data)\r\n\r\n    service.unwatchProject = (projectId) ->\r\n        url = urlsService.resolve(\"project-unwatch\", projectId)\r\n        return http.post(url)\r\n\r\n    service.contactProject = (projectId, message) ->\r\n        params = {\r\n            project: projectId,\r\n            comment: message\r\n        }\r\n\r\n        url = urlsService.resolve(\"project-contact\")\r\n        return http.post(url, params)\r\n\r\n    service.transferValidateToken = (projectId, token) ->\r\n        data = {\r\n            token: token\r\n        }\r\n        url = urlsService.resolve(\"project-transfer-validate-token\", projectId)\r\n        return http.post(url, data)\r\n\r\n    service.transferAccept = (projectId, token, reason) ->\r\n        data = {\r\n            token: token\r\n            reason: reason\r\n        }\r\n        url = urlsService.resolve(\"project-transfer-accept\", projectId)\r\n        return http.post(url, data)\r\n\r\n    service.transferReject = (projectId, token, reason) ->\r\n        data = {\r\n            token: token\r\n            reason: reason\r\n        }\r\n        url = urlsService.resolve(\"project-transfer-reject\", projectId)\r\n        return http.post(url, data)\r\n\r\n    service.transferRequest = (projectId) ->\r\n        url = urlsService.resolve(\"project-transfer-request\", projectId)\r\n        return http.post(url)\r\n\r\n    service.transferStart = (projectId, userId, reason) ->\r\n        data = {\r\n            user: userId,\r\n            reason: reason\r\n        }\r\n\r\n        url = urlsService.resolve(\"project-transfer-start\", projectId)\r\n        return http.post(url, data)\r\n\r\n    return () ->\r\n        return {\"projects\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\", \"tgPaginateResponseService\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgProjectsResources\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/resources.coffee\r\n###\r\n\r\nservices = [\r\n    \"tgProjectsResources\",\r\n    \"tgUserResources\",\r\n    \"tgUsersResources\",\r\n    \"tgUserstoriesResource\",\r\n    \"tgTasksResource\",\r\n    \"tgIssuesResource\",\r\n    \"tgExternalAppsResource\",\r\n    \"tgAttachmentsResource\",\r\n    \"tgStatsResource\",\r\n    \"tgHistory\",\r\n    \"tgEpicsResource\",\r\n    \"tgTrelloImportResource\",\r\n    \"tgJiraImportResource\",\r\n    \"tgGithubImportResource\",\r\n    \"tgAsanaImportResource\"\r\n]\r\n\r\nResources = ($injector) ->\r\n    for serviceName in services\r\n        serviceFn = $injector.get(serviceName)\r\n\r\n        service = $injector.invoke(serviceFn)\r\n\r\n        for serviceProperty in Object.keys(service)\r\n            if @[serviceProperty]\r\n                console.warn(\"repeated resource \" + serviceProperty)\r\n\r\n            @[serviceProperty] = service[serviceProperty]\r\n\r\n    return @\r\n\r\n\r\nResources.$inject = [\"$injector\"]\r\n\r\nangular.module(\"taigaResources2\").service(\"tgResources\", Resources)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/stats-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.discover = (applicationId, state) ->\r\n        url = urlsService.resolve(\"stats-discover\")\r\n        return http.get(url).then (result) ->\r\n            Immutable.fromJS(result.data)\r\n\r\n    return () ->\r\n        return {\"stats\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgStatsResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/tasks-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.listInAllProjects = (params) ->\r\n        url = urlsService.resolve(\"tasks\")\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    return () ->\r\n        return {\"tasks\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgTasksResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/user-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http, paginateResponseService) ->\r\n    service = {}\r\n\r\n    service.getUserStorage = (key) ->\r\n        url = urlsService.resolve(\"user-storage\")\r\n\r\n        if key\r\n            url += '/' + key\r\n\r\n        httpOptions = {}\r\n\r\n        return http.get(url, {}).then (response) ->\r\n            return response.data.value\r\n\r\n    service.setUserStorage = (key, value) ->\r\n        url = urlsService.resolve(\"user-storage\") + '/' + key\r\n\r\n        params = {\r\n            key: key,\r\n            value: value\r\n        }\r\n\r\n        return http.put(url, params)\r\n\r\n    service.createUserStorage = (key, value) ->\r\n        url = urlsService.resolve(\"user-storage\")\r\n\r\n        params = {\r\n            key: key,\r\n            value: value\r\n        }\r\n\r\n        return http.post(url, params)\r\n\r\n    return () ->\r\n        return {\"user\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgUserResources\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/users-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http, paginateResponseService) ->\r\n    service = {}\r\n\r\n    service.getUserByUsername = (username) ->\r\n        url = urlsService.resolve(\"by_username\")\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        params = {\r\n            username: username\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.getStats = (userId) ->\r\n        url = urlsService.resolve(\"user-stats\", userId)\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        return http.get(url, {}, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.getContacts = (userId, excludeProjectId) ->\r\n        url = urlsService.resolve(\"user-contacts\", userId)\r\n\r\n        params = {}\r\n        params.exclude_project = excludeProjectId if excludeProjectId?\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.getLiked = (userId, page, type, q) ->\r\n        url = urlsService.resolve(\"user-liked\", userId)\r\n\r\n        params = {}\r\n        params.page = page if page?\r\n        params.type = type if type?\r\n        params.q = q if q?\r\n\r\n        params.only_relevant = true\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.getVoted = (userId, page, type, q) ->\r\n        url = urlsService.resolve(\"user-voted\", userId)\r\n\r\n        params = {}\r\n        params.page = page if page?\r\n        params.type = type if type?\r\n        params.q = q if q?\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.getWatched = (userId, page, type, q) ->\r\n        url = urlsService.resolve(\"user-watched\", userId)\r\n\r\n        params = {}\r\n        params.page = page if page?\r\n        params.type = type if type?\r\n        params.q = q if q?\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.getProfileTimeline = (userId, page) ->\r\n        params = {\r\n            page: page\r\n        }\r\n\r\n        url = urlsService.resolve(\"timeline-profile\")\r\n        url = \"#{url}/#{userId}\"\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.getUserTimeline = (userId, page) ->\r\n        params = {\r\n            page: page,\r\n            only_relevant: true\r\n        }\r\n\r\n        url = urlsService.resolve(\"timeline-user\")\r\n        url = \"#{url}/#{userId}\"\r\n\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            return paginateResponseService(result)\r\n\r\n    service.getNotifications = (userId, page, onlyUnread) ->\r\n        params = {\r\n            page: page\r\n        }\r\n        if onlyUnread\r\n            params['only_unread'] = true\r\n\r\n        url = urlsService.resolve(\"notifications\")\r\n\r\n        return http.get(url, params, {\r\n            headers: {\r\n                'x-lazy-pagination': true\r\n            }\r\n        }).then (result) ->\r\n            result = Immutable.fromJS(result)\r\n            paginateResponse = Immutable.Map({\r\n                \"data\": result.get(\"data\").get(\"objects\"),\r\n                \"next\": !!result.get(\"headers\")(\"x-pagination-next\"),\r\n                \"prev\": !!result.get(\"headers\")(\"x-pagination-prev\"),\r\n                \"current\": result.get(\"headers\")(\"x-pagination-current\"),\r\n                \"count\": result.get(\"headers\")(\"x-pagination-count\"),\r\n                \"total\": result.get(\"data\").get(\"total\")\r\n            })\r\n            return paginateResponse\r\n\r\n    service.setNotificationAsRead = (notificationId) ->\r\n        url = \"#{urlsService.resolve(\"notifications\")}/#{notificationId}/set-as-read\"\r\n        return http.patch(url).then (result) ->\r\n            return result\r\n\r\n    service.setNotificationsAsRead = () ->\r\n        url = \"#{urlsService.resolve(\"notifications\")}/set-as-read\"\r\n        return http.post(url).then (result) ->\r\n            return result\r\n\r\n    return () ->\r\n        return {\"users\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\", \"tgPaginateResponseService\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgUsersResources\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: resources/userstories-resource.service.coffee\r\n###\r\n\r\nResource = (urlsService, http) ->\r\n    service = {}\r\n\r\n    service.listInAllProjects = (params, pagination=false) ->\r\n        url = urlsService.resolve(\"userstories\")\r\n\r\n        if !pagination\r\n            httpOptions = {\r\n                headers: {\r\n                    \"x-disable-pagination\": \"1\"\r\n                }\r\n            }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.listAllInProject = (projectId) ->\r\n        url = urlsService.resolve(\"userstories\")\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        params = {\r\n            project: projectId\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    service.listInEpic = (epicIid) ->\r\n        url = urlsService.resolve(\"userstories\")\r\n\r\n        httpOptions = {\r\n            headers: {\r\n                \"x-disable-pagination\": \"1\"\r\n            }\r\n        }\r\n\r\n        params = {\r\n            epic: epicIid,\r\n            order_by: 'epic_order',\r\n            include_tasks: true\r\n        }\r\n\r\n        return http.get(url, params, httpOptions)\r\n            .then (result) ->\r\n                return Immutable.fromJS(result.data)\r\n\r\n    return () ->\r\n        return {\"userstories\": service}\r\n\r\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\r\n\r\nmodule = angular.module(\"taigaResources2\")\r\nmodule.factory(\"tgUserstoriesResource\", Resource)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/app-meta.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ntruncate = taiga.truncate\r\n\r\n\r\nclass AppMetaService\r\n    @.$inject = [\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@rootScope) ->\r\n\r\n    _set: (key, value) ->\r\n        return if not key\r\n\r\n        if key == \"title\"\r\n            meta = $(\"head title\")\r\n\r\n            if meta.length == 0\r\n                meta = $(\"<title></title>\")\r\n                $(\"head\").append(meta)\r\n\r\n            meta.text(value or \"\")\r\n        else if key.indexOf(\"og:\") == 0\r\n            meta = $(\"head meta[property='#{key}']\")\r\n\r\n            if meta.length == 0\r\n                meta = $(\"<meta property='#{key}'/>\")\r\n                $(\"head\").append(meta)\r\n\r\n            meta.attr(\"content\", value or \"\")\r\n        else\r\n            meta = $(\"head meta[name='#{key}']\")\r\n\r\n            if meta.length == 0\r\n                meta = $(\"<meta name='#{key}'/>\")\r\n                $(\"head\").append(meta)\r\n\r\n            meta.attr(\"content\", value or \"\")\r\n\r\n    setTitle: (title) ->\r\n        @._set('title', title)\r\n\r\n    setDescription: (description) ->\r\n        @._set(\"description\", truncate(description, 250))\r\n\r\n    setTwitterMetas: (title, description) ->\r\n        @._set(\"twitter:card\", \"summary\")\r\n        @._set(\"twitter:site\", \"@taigaio\")\r\n        @._set(\"twitter:title\", title)\r\n        @._set(\"twitter:description\", truncate(description, 300))\r\n        @._set(\"twitter:image\", \"#{window.location.origin}/#{window._version}/images/logo-color.png\")\r\n\r\n    setOpenGraphMetas: (title, description) ->\r\n        @._set(\"og:type\", \"object\")\r\n        @._set(\"og:site_name\", \"Taiga - Love your projects\")\r\n        @._set(\"og:title\", title)\r\n        @._set(\"og:description\", truncate(description, 300))\r\n        @._set(\"og:image\", \"#{window.location.origin}/#{window._version}/images/logo-color.png\")\r\n        @._set(\"og:url\", window.location.href)\r\n\r\n    setAll: (title, description) ->\r\n        @.setTitle(title)\r\n        @.setDescription(description)\r\n        @.setTwitterMetas(title, description)\r\n        @.setOpenGraphMetas(title, description)\r\n\r\n    addMobileViewport: () ->\r\n        $(\"head\").append(\r\n            \"<meta name=\\\"viewport\\\"\r\n                   content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\\\">\"\r\n        )\r\n\r\n    removeMobileViewport: () ->\r\n        $(\"head meta[name=\\\"viewport\\\"]\").remove()\r\n\r\n    setfn: (fn) ->\r\n        @._listener() if @.listener\r\n\r\n        @._listener = @rootScope.$watchCollection fn, (metas) =>\r\n            if metas\r\n                @.setAll(metas.title, metas.description)\r\n                @._listener()\r\n\r\nangular.module(\"taigaCommon\").service(\"tgAppMetaService\", AppMetaService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/attachments.service.coffee\r\n###\r\n\r\nsizeFormat = @.taiga.sizeFormat\r\n\r\nclass AttachmentsService\r\n    @.$inject = [\r\n        \"$tgConfirm\",\r\n        \"$tgConfig\",\r\n        \"$translate\",\r\n        \"tgResources\"\r\n    ]\r\n\r\n    constructor: (@confirm, @config, @translate, @rs) ->\r\n        @.maxFileSize = @.getMaxFileSize()\r\n\r\n        if @.maxFileSize\r\n            @.maxFileSizeFormated = sizeFormat(@.maxFileSize)\r\n\r\n    sizeError: (file) ->\r\n        message = @translate.instant(\"ATTACHMENT.ERROR_MAX_SIZE_EXCEEDED\", {\r\n            fileName: file.name,\r\n            fileSize: sizeFormat(file.size),\r\n            maxFileSize: @.maxFileSizeFormated\r\n        })\r\n\r\n        @confirm.notify(\"error\", message)\r\n\r\n    validate: (file) ->\r\n        if @.maxFileSize && file.size > @.maxFileSize\r\n            @.sizeError(file)\r\n\r\n            return false\r\n\r\n        return true\r\n\r\n    getMaxFileSize: () ->\r\n        return @config.get(\"maxUploadFileSize\", null)\r\n\r\n    list: (type, objId, projectId) ->\r\n        return @rs.attachments.list(type, objId, projectId).then (attachments) =>\r\n            return attachments.sortBy (attachment) => attachment.get('order')\r\n\r\n    delete: (type, id) ->\r\n        return @rs.attachments.delete(type, id)\r\n\r\n    saveError: (file, data) ->\r\n        message = \"\"\r\n\r\n        if file\r\n            message = @translate.instant(\"ATTACHMENT.ERROR_UPLOAD_ATTACHMENT\", {\r\n                        fileName: file.name, errorMessage: data.data._error_message\r\n                      })\r\n\r\n        @confirm.notify(\"error\", message)\r\n\r\n    upload: (file, objId, projectId, type, from_comment = false) ->\r\n        promise = @rs.attachments.create(type, projectId, objId, file, from_comment)\r\n\r\n        promise.then null, @.saveError.bind(this, file)\r\n\r\n        return promise\r\n\r\n    patch: (id, type, patch) ->\r\n        promise = @rs.attachments.patch(type, id, patch)\r\n\r\n        promise.then null, @.saveError.bind(this, null)\r\n\r\n        return promise\r\n\r\nangular.module(\"taigaCommon\").service(\"tgAttachmentsService\", AttachmentsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/avatar.service.coffee\r\n###\r\n\r\nclass AvatarService\r\n    constructor: (@config) ->\r\n        IMAGES = [\r\n            \"/#{window._version}/images/user-avatars/user-avatar-01.png\"\r\n            \"/#{window._version}/images/user-avatars/user-avatar-02.png\"\r\n            \"/#{window._version}/images/user-avatars/user-avatar-03.png\"\r\n            \"/#{window._version}/images/user-avatars/user-avatar-04.png\"\r\n            \"/#{window._version}/images/user-avatars/user-avatar-05.png\"\r\n        ]\r\n\r\n        COLORS = [\r\n            \"rgba( 178, 176, 204, 1 )\"\r\n            \"rgba( 183, 203, 131, 1 )\"\r\n            \"rgba( 210, 198, 139, 1 )\"\r\n            \"rgba( 214, 161, 212, 1 )\"\r\n            \"rgba( 247, 154, 154, 1 )\"\r\n        ]\r\n\r\n        @.logos = _.cartesianProduct(IMAGES, COLORS)\r\n\r\n    getDefault: (key) ->\r\n        idx = murmurhash3_32_gc(key, 42) %% @.logos.length\r\n        logo = @.logos[idx]\r\n\r\n        return { src: logo[0], color: logo[1] }\r\n\r\n    getUnnamed: () ->\r\n        return {\r\n            url: \"/#{window._version}/images/unnamed.png\"\r\n            username: ''\r\n        }\r\n\r\n    getAvatar: (user, type) ->\r\n        return @.getUnnamed() if !user\r\n\r\n        avatarParamName = 'photo'\r\n\r\n        if type == 'avatarBig'\r\n            avatarParamName = 'big_photo'\r\n\r\n        photo = null\r\n\r\n        if user instanceof Immutable.Map\r\n            gravatar = user.get('gravatar_id')\r\n            photo = user.get(avatarParamName)\r\n            username = \"@#{user.get('username')}\"\r\n        else\r\n            gravatar = user.gravatar_id\r\n            photo = user[avatarParamName]\r\n            username = \"@#{user.username}\"\r\n\r\n        return @.getUnnamed() if !gravatar\r\n\r\n        if photo\r\n            return {\r\n                url: photo,\r\n                username: username\r\n            }\r\n        else if location.host.indexOf('localhost') != -1 || !@config.get(\"gravatar\", true)\r\n            root = location.protocol + '//' + location.host\r\n            logo = @.getDefault(gravatar)\r\n\r\n            return {\r\n                url: root + logo.src,\r\n                bg: logo.color,\r\n                username: username\r\n            }\r\n        else\r\n            root = location.protocol + '//' + location.host\r\n            logo = @.getDefault(gravatar)\r\n\r\n            logoUrl = encodeURIComponent(root + logo.src)\r\n\r\n            return {\r\n                url: 'https://www.gravatar.com/avatar/' + gravatar + \"?s=200&d=\" + logoUrl,\r\n                bg: logo.color,\r\n                username: username\r\n            }\r\n\r\nangular.module(\"taigaCommon\").service(\"tgAvatarService\", [\"$tgConfig\", AvatarService])\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/check-permissions.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass CheckPermissionsService\r\n    @.$inject = [\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@projectService) ->\r\n\r\n    check: (permission) ->\r\n        return false if !@projectService.project\r\n\r\n        return @projectService.project.get('my_permissions').indexOf(permission) != -1\r\n\r\nangular.module(\"taigaCommon\").service(\"tgCheckPermissionsService\", CheckPermissionsService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/current-user.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass CurrentUserService\r\n    @.$inject = [\r\n        \"tgProjectsService\",\r\n        \"$tgStorage\",\r\n        \"tgResources\"\r\n    ]\r\n\r\n    constructor: (@projectsService, @storageService, @rs) ->\r\n        @._user = null\r\n        @._projects = Immutable.Map()\r\n        @._projectsById = Immutable.Map()\r\n        @._joyride = null\r\n\r\n        taiga.defineImmutableProperty @, \"projects\", () => return @._projects\r\n        taiga.defineImmutableProperty @, \"projectsById\", () => return @._projectsById\r\n\r\n    isAuthenticated: ->\r\n        if @.getUser() != null\r\n            return true\r\n        return false\r\n\r\n    getUser: () ->\r\n        if !@._user\r\n            userData = @storageService.get(\"userInfo\")\r\n\r\n            if userData\r\n                userData = Immutable.fromJS(userData)\r\n                @.setUser(userData)\r\n\r\n        return @._user\r\n\r\n    removeUser: () ->\r\n        @._user = null\r\n        @._projects = Immutable.Map()\r\n        @._projectsById = Immutable.Map()\r\n        @._joyride = null\r\n\r\n    setUser: (user) ->\r\n        @._user = user\r\n\r\n        return @._loadUserInfo()\r\n\r\n    bulkUpdateProjectsOrder: (sortData) ->\r\n        @projectsService.bulkUpdateProjectsOrder(sortData).then () =>\r\n            @.loadProjects()\r\n\r\n    loadProjects: () ->\r\n        return @projectsService.getProjectsByUserId(@._user.get(\"id\"))\r\n            .then (projects) => @.setProjects(projects)\r\n\r\n    disableJoyRide: (section) ->\r\n        if !@.isAuthenticated()\r\n            return\r\n\r\n        if section\r\n            @._joyride[section] = false\r\n        else\r\n            @._joyride = {\r\n                backlog: false,\r\n                kanban: false,\r\n                dashboard: false\r\n            }\r\n\r\n        @rs.user.setUserStorage('joyride', @._joyride)\r\n\r\n    loadJoyRideConfig: () ->\r\n        return new Promise (resolve) =>\r\n            if @._joyride != null\r\n                resolve(@._joyride)\r\n                return\r\n\r\n            @rs.user.getUserStorage('joyride')\r\n                .then (config) =>\r\n                    @._joyride = config\r\n                    resolve(@._joyride)\r\n                .catch () =>\r\n                    #joyride not defined\r\n                    @._joyride = {\r\n                        backlog: true,\r\n                        kanban: true,\r\n                        dashboard: true\r\n                    }\r\n\r\n                    @rs.user.createUserStorage('joyride', @._joyride)\r\n\r\n                    resolve(@._joyride)\r\n\r\n    _loadUserInfo: () ->\r\n        return Promise.all([\r\n            @.loadProjects()\r\n        ])\r\n\r\n    setProjects: (projects) ->\r\n        @._projects = @._projects.set(\"all\", projects)\r\n        @._projects = @._projects.set(\"recents\", projects.slice(0, 10))\r\n        @._projects = @._projects.set(\"unblocked\",\r\n                                      projects.filter((project) -> project.toJS().blocked_code == null))\r\n\r\n        @._projectsById = Immutable.fromJS(groupBy(projects.toJS(), (p) -> p.id))\r\n\r\n        return @.projects\r\n\r\n    canCreatePrivateProjects: () ->\r\n        user = @.getUser()\r\n        if user.get('max_private_projects') != null &&\r\n            user.get('total_private_projects') >= user.get('max_private_projects')\r\n                return {\r\n                    valid: false,\r\n                    reason: 'max_private_projects',\r\n                    type: 'private_project',\r\n                    current: user.get('total_private_projects'),\r\n                    max: user.get('max_private_projects')\r\n                }\r\n\r\n        return {valid: true}\r\n\r\n    canCreatePublicProjects: () ->\r\n        user = @.getUser()\r\n\r\n        if user.get('max_public_projects') != null &&\r\n            user.get('total_public_projects') >= user.get('max_public_projects')\r\n                return {\r\n                    valid: false,\r\n                    reason: 'max_public_projects',\r\n                    type: 'public_project',\r\n                    current: user.get('total_public_projects'),\r\n                    max: user.get('max_public_projects')\r\n                }\r\n\r\n        return {valid: true}\r\n\r\n    canAddMembersPublicProject: (totalMembers) ->\r\n        user = @.getUser()\r\n\r\n        if user.get('max_memberships_public_projects') != null &&\r\n            totalMembers > user.get('max_memberships_public_projects')\r\n                return {\r\n                    valid: false,\r\n                    reason: 'max_members_public_projects',\r\n                    type: 'public_project',\r\n                    current: totalMembers,\r\n                    max: user.get('max_memberships_public_projects')\r\n                }\r\n\r\n        return {valid: true}\r\n\r\n    canAddMembersPrivateProject: (totalMembers) ->\r\n        user = @.getUser()\r\n\r\n        if user.get('max_memberships_private_projects') != null &&\r\n            totalMembers > user.get('max_memberships_private_projects')\r\n                return {\r\n                    valid: false,\r\n                    reason: 'max_members_private_projects',\r\n                    type: 'private_project',\r\n                    current: totalMembers,\r\n                    max: user.get('max_memberships_private_projects')\r\n                }\r\n\r\n        return {valid: true}\r\n\r\n    canOwnProject: (project) ->\r\n        user = @.getUser()\r\n        if project.get('is_private')\r\n            result = @.canCreatePrivateProjects()\r\n            return result if !result.valid\r\n\r\n            membersResult = @.canAddMembersPrivateProject(project.get('total_memberships'))\r\n            return membersResult if !membersResult.valid\r\n        else\r\n            result = @.canCreatePublicProjects()\r\n            return result if !result.valid\r\n\r\n            membersResult = @.canAddMembersPublicProject(project.get('total_memberships'))\r\n            return membersResult if !membersResult.valid\r\n\r\n        return {valid: true}\r\n\r\nangular.module(\"taigaCommon\").service(\"tgCurrentUserService\", CurrentUserService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/error-handling.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass ErrorHandlingService\r\n    @.$inject = [\r\n        \"$rootScope\"\r\n    ]\r\n\r\n    constructor: (@rootScope) ->\r\n\r\n    init: () ->\r\n        @rootScope.errorHandling = {}\r\n\r\n    notfound: ->\r\n        @rootScope.errorHandling.showingError = true\r\n        @rootScope.errorHandling.notfound = true\r\n\r\n    error: ->\r\n        @rootScope.errorHandling.showingError = true\r\n        @rootScope.errorHandling.error = true\r\n\r\n    permissionDenied: ->\r\n        @rootScope.errorHandling.showingError = true\r\n        @rootScope.errorHandling.permissionDenied = true\r\n\r\n    block: ->\r\n        @rootScope.errorHandling.showingError = true\r\n        @rootScope.errorHandling.blocked = true\r\n\r\nangular.module(\"taigaCommon\").service(\"tgErrorHandlingService\", ErrorHandlingService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/lightbox-factory.service.coffee\r\n###\r\n\r\nclass LightboxFactory\r\n    @.$inject = [\"$rootScope\", \"$compile\"]\r\n    constructor: (@rootScope, @compile) ->\r\n\r\n    create: (name, attrs, scopeAttrs) ->\r\n        scope = @rootScope.$new()\r\n\r\n        scope = _.merge(scope, scopeAttrs)\r\n\r\n        elm = $(\"<div>\")\r\n            .attr(name, true)\r\n            .attr(\"tg-bind-scope\", true)\r\n\r\n        if attrs\r\n            elm.attr(attrs)\r\n\r\n        elm.addClass(\"remove-on-close\")\r\n\r\n        html = @compile(elm)(scope)\r\n\r\n        $(document.body).append(html)\r\n\r\n        return\r\n\r\nangular.module(\"taigaCommon\").service(\"tgLightboxFactory\", LightboxFactory)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/paginate-response.service.coffee\r\n###\r\n\r\nPaginateResponse = () ->\r\n    return (result) ->\r\n        paginateResponse = Immutable.Map({\r\n            \"data\": result.get(\"data\"),\r\n            \"next\": !!result.get(\"headers\")(\"x-pagination-next\"),\r\n            \"prev\": !!result.get(\"headers\")(\"x-pagination-prev\"),\r\n            \"current\": result.get(\"headers\")(\"x-pagination-current\"),\r\n            \"count\": result.get(\"headers\")(\"x-pagination-count\")\r\n        })\r\n\r\n        return paginateResponse\r\n\r\nangular.module(\"taigaCommon\").factory(\"tgPaginateResponseService\", PaginateResponse)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/project-logo.service.coffee\r\n###\r\n\r\nclass ProjectLogoService\r\n    constructor: () ->\r\n        IMAGES = [\r\n            \"/#{window._version}/images/project-logos/project-logo-01.png\"\r\n            \"/#{window._version}/images/project-logos/project-logo-02.png\"\r\n            \"/#{window._version}/images/project-logos/project-logo-03.png\"\r\n            \"/#{window._version}/images/project-logos/project-logo-04.png\"\r\n            \"/#{window._version}/images/project-logos/project-logo-05.png\"\r\n        ]\r\n\r\n        COLORS = [\r\n            \"rgba( 153,  214, 220, 1 )\"\r\n            \"rgba( 213,  156,  156, 1 )\"\r\n            \"rgba( 214, 161, 212,  1 )\"\r\n            \"rgba( 164, 162, 219, 1 )\"\r\n            \"rgba( 152, 224, 168,  1 )\"\r\n        ]\r\n\r\n        @.logos = _.cartesianProduct(IMAGES, COLORS)\r\n\r\n    getDefaultProjectLogo: (slug, id) ->\r\n        key = \"#{slug}-#{id}\"\r\n        idx = murmurhash3_32_gc(key, 42) %% @.logos.length\r\n        logo = @.logos[idx]\r\n\r\n        return { src: logo[0], color: logo[1] }\r\n\r\nangular.module(\"taigaCommon\").service(\"tgProjectLogoService\", ProjectLogoService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/project.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass ProjectService\r\n    @.$inject = [\r\n        \"$rootScope\",\r\n        \"tgProjectsService\",\r\n        \"tgXhrErrorService\",\r\n        \"tgUserActivityService\",\r\n        \"$interval\"\r\n    ]\r\n\r\n    constructor: (@rootScope,  @projectsService, @xhrError, @userActivityService, @interval) ->\r\n        @._project = null\r\n        @._section = null\r\n        @._sectionsBreadcrumb = Immutable.List()\r\n        @._activeMembers = Immutable.List()\r\n\r\n        taiga.defineImmutableProperty @, \"project\", () => return @._project\r\n        taiga.defineImmutableProperty @, \"section\", () => return @._section\r\n        taiga.defineImmutableProperty @, \"sectionsBreadcrumb\", () => return @._sectionsBreadcrumb\r\n        taiga.defineImmutableProperty @, \"activeMembers\", () => return @._activeMembers\r\n\r\n        @.autoRefresh() if !window.localStorage.e2e\r\n        @.watchSignals()\r\n\r\n    watchSignals: () ->\r\n        fetchRequiredSignals = [\r\n            \"admin:project-modules:updated\"\r\n            \"admin:project-roles:updated\"\r\n            \"admin:project-default-values:updated\"\r\n            \"admin:project-values:updated\"\r\n            \"admin:project-values:move\"\r\n            \"admin:project-custom-attributes:updated\"\r\n            \"sprintform:create:success\"\r\n            \"sprintform:edit:success\"\r\n            \"sprintform:remove:success\"\r\n            \"tags:updated\"\r\n        ]\r\n        for signal in fetchRequiredSignals\r\n            @rootScope.$on(signal, @.manageProjectSignal)\r\n\r\n    manageProjectSignal: (ctx) =>\r\n        @.fetchProject()\r\n\r\n    cleanProject: () ->\r\n        @._project = null\r\n        @._activeMembers = Immutable.List()\r\n        @._section = null\r\n        @._sectionsBreadcrumb = Immutable.List()\r\n\r\n    autoRefresh: () ->\r\n        intervalId = @interval () =>\r\n            @.fetchProject()\r\n        , 60 * 10 * 1000\r\n\r\n        @userActivityService.onInactive () => @interval.cancel(intervalId)\r\n        @userActivityService.onActive () =>\r\n            @.fetchProject()\r\n            @.autoRefresh()\r\n\r\n    setSection: (section) ->\r\n        @._section = section\r\n\r\n        if section\r\n            @._sectionsBreadcrumb = @._sectionsBreadcrumb.push(@._section)\r\n        else\r\n            @._sectionsBreadcrumb = Immutable.List()\r\n\r\n    setProject: (project) ->\r\n        @._project = project\r\n        @._activeMembers = @._project.get('members').filter (member) -> member.get('is_active')\r\n\r\n    setProjectBySlug: (pslug) ->\r\n        return new Promise (resolve, reject) =>\r\n            if !@.project || @.project.get('slug') != pslug\r\n                @projectsService\r\n                    .getProjectBySlug(pslug)\r\n                    .then (project) =>\r\n                        @.setProject(project)\r\n                        resolve()\r\n                    .catch (xhr) =>\r\n                        @xhrError.response(xhr)\r\n\r\n            else resolve()\r\n\r\n    fetchProject: () ->\r\n        return if !@.project\r\n\r\n        pslug = @.project.get('slug')\r\n\r\n        return @projectsService.getProjectBySlug(pslug).then (project) => @.setProject(project)\r\n\r\n    hasPermission: (permission) ->\r\n        return @._project.get('my_permissions').indexOf(permission) != -1\r\n\r\n    isEpicsDashboardEnabled: ->\r\n        return @._project.get(\"is_epics_activated\")\r\n\r\nangular.module(\"taigaCommon\").service(\"tgProjectService\", ProjectService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/theme.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\n\r\nclass ThemeService extends taiga.Service = ->\r\n    use: (themeName) ->\r\n        stylesheetEl = $(\"link[rel='stylesheet']:first\")\r\n\r\n        if stylesheetEl.length == 0\r\n            stylesheetEl = $(\"<link rel='stylesheet' href='' type='text/css'>\")\r\n            $(\"head\").append(stylesheetEl)\r\n\r\n        stylesheetEl.attr(\"href\", \"/#{window._version}/styles/theme-#{themeName}.css\")\r\n\r\n\r\nangular.module(\"taigaCommon\").service(\"tgThemeService\", ThemeService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/user-activity.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\ngroupBy = @.taiga.groupBy\r\n\r\nclass UserActivityService\r\n    @.$inject = ['$timeout']\r\n\r\n    idleTimeout: 60 * 5 * 1000\r\n\r\n    constructor: (@timeout) ->\r\n        return null if window.localStorage.e2e\r\n\r\n        window.addEventListener('mousemove', @.resetTimer.bind(this), false)\r\n        window.addEventListener('mousedown', @.resetTimer.bind(this), false)\r\n        window.addEventListener('keypress', @.resetTimer.bind(this), false)\r\n        window.addEventListener('mousewheel', @.resetTimer.bind(this), false)\r\n        window.addEventListener('touchmove', @.resetTimer.bind(this), false)\r\n\r\n        @.subscriptionsActive = []\r\n        @.subscriptionsInactive = []\r\n        @.isActive = true\r\n\r\n        @.startTimer()\r\n\r\n    startTimer: () ->\r\n        @.timerId = @timeout(@._fireInactive.bind(this), @.idleTimeout)\r\n\r\n    resetTimer: () ->\r\n        if !@.isActive\r\n            @._fireActive()\r\n\r\n        @timeout.cancel(@.timerId)\r\n        @.startTimer()\r\n\r\n        @.isActive = true\r\n\r\n    onActive: (cb) ->\r\n        @.subscriptionsActive.push(cb)\r\n\r\n        return @._unSubscriptionsActive.bind(this, cb)\r\n\r\n    onInactive: (cb) ->\r\n        @.subscriptionsInactive.push(cb)\r\n\r\n        return @._unSubscriptionsInactive.bind(this, cb)\r\n\r\n    _fireActive: () ->\r\n        @.subscriptionsActive.forEach (it) -> it()\r\n\r\n    _fireInactive: () ->\r\n        @.isActive = false\r\n        @.subscriptionsInactive.forEach (it) -> it()\r\n\r\n    _unSubscriptionsActive: (cb) ->\r\n        @.subscriptionsActive = @.subscriptionsActive.filter (fn) -> fn != cb\r\n\r\n    _unSubscriptionsInactive: (cb) ->\r\n        @.subscriptionsInactive = @.subscriptionsInactive.filter (fn) -> fn != cb\r\n\r\nangular.module(\"taigaCommon\").service(\"tgUserActivityService\", UserActivityService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/user-list.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nnormalizeString = @.taiga.normalizeString\r\n\r\nclass UserListService\r\n    @.$inject = [\r\n        \"tgCurrentUserService\"\r\n        \"tgProjectService\"\r\n    ]\r\n\r\n    constructor: (@currentUserService, @projectService) ->\r\n        @.currentUser = @currentUserService.getUser()?.toJS()\r\n\r\n    filterUsers: (text, user) ->\r\n        username = user.full_name_display.toUpperCase()\r\n        username = normalizeString(username)\r\n        text = text.toUpperCase()\r\n        text = normalizeString(text)\r\n        return _.includes(username, text)\r\n\r\n    searchUsers: (text, excludedUser) ->\r\n        users = _.clone(@projectService.activeMembers.toJS(), true)\r\n        users = _.reject(users, {\"id\": excludedUser.id}) if excludedUser\r\n        users = _.sortBy(users, (o) => if o.id is @.currentUser.id then 0 else o.id)\r\n        users = _.filter(users, _.partial(@.filterUsers, text)) if text?\r\n        return users\r\n\r\nangular.module(\"taigaCommon\").service(\"tgUserListService\", UserListService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/user.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\nbindMethods = taiga.bindMethods\r\n\r\n\r\nclass UserService extends taiga.Service\r\n    @.$inject = [\"tgResources\"]\r\n\r\n    constructor: (@rs) ->\r\n        bindMethods(@)\r\n\r\n    getUserByUserName: (username) ->\r\n        return @rs.users.getUserByUsername(username)\r\n\r\n    getContacts: (userId, excludeProjectId) ->\r\n        return @rs.users.getContacts(userId, excludeProjectId)\r\n\r\n    getLiked: (userId, pageNumber, objectType, textQuery) ->\r\n        return @rs.users.getLiked(userId, pageNumber, objectType, textQuery)\r\n\r\n    getVoted: (userId, pageNumber, objectType, textQuery) ->\r\n        return @rs.users.getVoted(userId, pageNumber, objectType, textQuery)\r\n\r\n    getWatched: (userId, pageNumber, objectType, textQuery) ->\r\n        return @rs.users.getWatched(userId, pageNumber, objectType, textQuery)\r\n\r\n    getStats: (userId) ->\r\n        return @rs.users.getStats(userId)\r\n\r\n    attachUserContactsToProjects: (userId, projects) ->\r\n        return @.getContacts(userId)\r\n            .then (contacts) ->\r\n                projects = projects.map (project) ->\r\n                    contactsFiltered = contacts.filter (contact) ->\r\n                        contactId = contact.get(\"id\")\r\n                        return project.get('members').indexOf(contactId) != -1\r\n\r\n                    project = project.set(\"contacts\", contactsFiltered)\r\n\r\n                    return project\r\n\r\n                return projects\r\n\r\nangular.module(\"taigaCommon\").service(\"tgUserService\", UserService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: services/xhrError.service.coffee\r\n###\r\n\r\nclass xhrError extends taiga.Service\r\n    @.$inject = [\r\n        \"$q\",\r\n        \"tgErrorHandlingService\"\r\n    ]\r\n\r\n    constructor: (@q, @errorHandlingService) ->\r\n\r\n    notFound: () ->\r\n        @errorHandlingService.notfound()\r\n\r\n    permissionDenied: () ->\r\n        @errorHandlingService.permissionDenied()\r\n\r\n    response: (xhr) ->\r\n        if xhr\r\n            if xhr.status == 404\r\n                @.notFound()\r\n\r\n            else if xhr.status == 403\r\n                @.permissionDenied()\r\n\r\n        return @q.reject(xhr)\r\n\r\nangular.module(\"taigaCommon\").service(\"tgXhrErrorService\", xhrError)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline-attachment/user-timeline-attachment.directive.coffee\r\n###\r\n\r\nUserTimelineAttachmentDirective = (template, $compile) ->\r\n    validFileExtensions = [\".jpg\", \".jpeg\", \".bmp\", \".gif\", \".png\"]\r\n\r\n    isImage = (url) ->\r\n        url = url.toLowerCase()\r\n\r\n        return _.some validFileExtensions, (extension) ->\r\n            return url.indexOf(extension, url - extension.length) != -1\r\n\r\n    link = (scope, el) ->\r\n        is_image = isImage(scope.attachment.get('url'))\r\n\r\n        if is_image\r\n            templateHtml = template.get(\"user-timeline/user-timeline-attachment/user-timeline-attachment-image.html\")\r\n        else\r\n            templateHtml = template.get(\"user-timeline/user-timeline-attachment/user-timeline-attachment.html\")\r\n\r\n        el.html(templateHtml)\r\n        $compile(el.contents())(scope)\r\n\r\n        el.find(\"img\").error () -> @.remove()\r\n\r\n    return {\r\n        link: link\r\n        scope: {\r\n            attachment: \"=tgUserTimelineAttachment\"\r\n        }\r\n    }\r\n\r\nUserTimelineAttachmentDirective.$inject = [\r\n    \"$tgTemplate\",\r\n    \"$compile\"\r\n]\r\n\r\nangular.module(\"taigaUserTimeline\")\r\n    .directive(\"tgUserTimelineAttachment\", UserTimelineAttachmentDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline-item/user-timeline-item-title.service.coffee\r\n###\r\n\r\nunslugify = @.taiga.unslugify\r\n\r\nclass UserTimelineItemTitle\r\n    @.$inject = [\r\n        \"$translate\",\r\n        \"$sce\"\r\n    ]\r\n\r\n    _fieldTranslationKey: {\r\n        'status': 'COMMON.FIELDS.STATUS',\r\n        'subject': 'COMMON.FIELDS.SUBJECT',\r\n        'description_diff': 'COMMON.FIELDS.DESCRIPTION',\r\n        'points': 'COMMON.FIELDS.POINTS',\r\n        'assigned_to': 'COMMON.FIELDS.ASSIGNED_TO',\r\n        'assigned_users': 'COMMON.FIELDS.ASSIGNED_USERS',\r\n        'severity': 'ISSUES.FIELDS.SEVERITY',\r\n        'priority': 'ISSUES.FIELDS.PRIORITY',\r\n        'type': 'ISSUES.FIELDS.TYPE',\r\n        'is_iocaine': 'TASK.FIELDS.IS_IOCAINE',\r\n        'is_blocked': 'COMMON.FIELDS.IS_BLOCKED',\r\n        'color': 'COMMON.FIELDS.COLOR',\r\n        'due_date': 'COMMON.FIELDS.DUE_DATE',\r\n        'due_date_reason': 'COMMON.FIELDS.DUE_DATE_REASON',\r\n        'milestone': 'COMMON.FIELDS.SPRINT',\r\n    }\r\n\r\n    _params: {\r\n        username: (timeline, event) ->\r\n            user = timeline.getIn(['data', 'user'])\r\n\r\n            if user.get('is_profile_visible')\r\n                title_attr = @translate.instant('COMMON.SEE_USER_PROFILE', {username: user.get('username')})\r\n                url = \"user-profile:username=timeline.getIn(['data', 'user', 'username'])\"\r\n\r\n                return @._getLink(url, user.get('name'), title_attr)\r\n            else\r\n                return @._getUsernameSpan(user.get('name'))\r\n\r\n        field_name: (timeline, event) ->\r\n            field_name = timeline.getIn(['data', 'value_diff', 'key'])\r\n\r\n            return @translate.instant(@._fieldTranslationKey[field_name])\r\n\r\n        project_name: (timeline, event) ->\r\n            url = \"project:project=timeline.getIn(['data', 'project', 'slug'])\"\r\n\r\n            return @._getLink(url, timeline.getIn([\"data\", \"project\", \"name\"]))\r\n\r\n        new_value: (timeline, event) ->\r\n            if _.isArray(timeline.getIn([\"data\", \"value_diff\", \"value\"]).toJS())\r\n                value = timeline.getIn([\"data\", \"value_diff\", \"value\"]).get(1)\r\n\r\n                # assigned to unasigned\r\n                if value == null && timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'assigned_to'\r\n                    value = @translate.instant('ACTIVITY.VALUES.UNASSIGNED')\r\n\r\n                # assigned_users to unasigned\r\n                if value == null && timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'assigned_users'\r\n                    value = @translate.instant('ACTIVITY.VALUES.UNASSIGNED')\r\n\r\n                # due date\r\n                else if timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'due_date'\r\n                    if value\r\n                        prettyDate = @translate.instant(\"COMMON.PICKERDATE.FORMAT\")\r\n                        value = moment(value, \"YYYY-MM-DD\").format(prettyDate)\r\n                    else\r\n                        value = @translate.instant('ACTIVITY.VALUES.NOT_SET')\r\n\r\n                new_value = value\r\n            else\r\n                new_value = timeline.getIn([\"data\", \"value_diff\", \"value\"]).first().get(1)\r\n\r\n            return $('<span>').attr('ng-non-bindable', true).text(new_value).prop('outerHTML')\r\n\r\n        sprint_name: (timeline, event) ->\r\n            url = \"project-taskboard:project=timeline.getIn(['data', 'project', 'slug']),sprint=timeline.getIn(['data', 'milestone', 'slug'])\"\r\n\r\n            return @._getLink(url, timeline.getIn(['data', 'milestone', 'name']))\r\n\r\n        us_name: (timeline, event) ->\r\n            obj = @._getTimelineObj(timeline, event).get('userstory')\r\n\r\n            event_us = {obj: 'parent_userstory'}\r\n            url = @._getDetailObjUrl(event_us)\r\n\r\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\r\n\r\n            return @._getLink(url, text)\r\n\r\n        related_us_name: (timeline, event) ->\r\n            obj = timeline.getIn([\"data\", \"userstory\"])\r\n            url = \"project-userstories-detail:project=timeline.getIn(['data', 'userstory', 'project', 'slug']),ref=timeline.getIn(['data', 'userstory', 'ref'])\"\r\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\r\n            return @._getLink(url, text)\r\n\r\n        epic_name: (timeline, event) ->\r\n            obj = timeline.getIn([\"data\", \"epic\"])\r\n            url = \"project-epics-detail:project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['data', 'epic', 'ref'])\"\r\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\r\n            return @._getLink(url, text)\r\n\r\n        obj_name: (timeline, event) ->\r\n            obj = @._getTimelineObj(timeline, event)\r\n            url = @._getDetailObjUrl(event)\r\n\r\n            if event.obj == 'wikipage'\r\n                text = unslugify(obj.get('slug'))\r\n            else if event.obj == 'milestone'\r\n                text = obj.get('name')\r\n            else\r\n                text = '#' + obj.get('ref') + ' ' + obj.get('subject')\r\n\r\n            return @._getLink(url, text)\r\n\r\n        role_name: (timeline, event) ->\r\n            return _.escape(timeline.getIn(['data', 'value_diff', 'value']).keySeq().first())\r\n    }\r\n\r\n    constructor: (@translate, @sce) ->\r\n\r\n\r\n    _translateTitleParams: (param, timeline, event) ->\r\n        return @._params[param].call(this, timeline, event)\r\n\r\n    _getTimelineObj: (timeline, event) ->\r\n        return timeline.getIn(['data', event.obj])\r\n\r\n    _getDetailObjUrl: (event) ->\r\n        url = {\r\n            \"issue\": [\"project-issues-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\r\n            \"wikipage\": [\"project-wiki-page\", \":project=timeline.getIn(['data', 'project', 'slug']),slug=timeline.getIn(['obj', 'slug'])\"],\r\n            \"task\": [\"project-tasks-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\r\n            \"userstory\": [\"project-userstories-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\r\n            \"parent_userstory\": [\"project-userstories-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'userstory', 'ref'])\"],\r\n            \"milestone\": [\"project-taskboard\", \":project=timeline.getIn(['data', 'project', 'slug']),sprint=timeline.getIn(['obj', 'slug'])\"],\r\n            \"epic\": [\"project-epics-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"]\r\n        }\r\n        return url[event.obj][0] + url[event.obj][1]\r\n\r\n    _getLink: (url, text, title) ->\r\n        title = title || text\r\n\r\n        span = $('<span>')\r\n            .attr('ng-non-bindable', true)\r\n            .text(text)\r\n\r\n        return $('<a>')\r\n            .attr('tg-nav', url)\r\n            .append(span)\r\n            .prop('outerHTML')\r\n\r\n    _getUsernameSpan: (text) ->\r\n        title = title || text\r\n\r\n        return $('<span>')\r\n            .addClass('username')\r\n            .text(text)\r\n            .prop('outerHTML')\r\n\r\n    _getParams: (timeline, event, timeline_type) ->\r\n        params = {}\r\n\r\n        timeline_type.translate_params.forEach (param) =>\r\n            params[param] = @._translateTitleParams(param, timeline, event)\r\n        return params\r\n\r\n    getTitle: (timeline, event, type) ->\r\n        params = @._getParams(timeline, event, type)\r\n\r\n        paramsKeys = {}\r\n        Object.keys(params).forEach (key) -> paramsKeys[key] = '{{' +key + '}}'\r\n\r\n        translation = @translate.instant(type.key, paramsKeys)\r\n\r\n        Object.keys(params).forEach (key) ->\r\n            find = '{{' +key + '}}'\r\n            translation = translation.replace(new RegExp(find, 'g'), params[key])\r\n\r\n        return translation\r\n\r\nangular.module(\"taigaUserTimeline\")\r\n    .service(\"tgUserTimelineItemTitle\", UserTimelineItemTitle)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline-item/user-timeline-item-type.service.coffee\r\n###\r\n\r\ntimelineType = (timeline, event) ->\r\n    types = [\r\n        { # NewMember\r\n            check: (timeline, event) ->\r\n                return event.obj == 'membership'\r\n            key: 'TIMELINE.NEW_MEMBER',\r\n            translate_params: ['project_name']\r\n            member: (timeline) ->\r\n                return Immutable.Map({\r\n                    user: timeline.getIn(['data', 'user']),\r\n                    role: timeline.getIn(['data', 'role'])\r\n                })\r\n        },\r\n        { # NewProject\r\n            check: (timeline, event) ->\r\n                return event.obj == 'project' && event.type == 'create'\r\n            key: 'TIMELINE.NEW_PROJECT',\r\n            translate_params: ['username', 'project_name'],\r\n            description: (timeline) ->\r\n                return timeline.getIn(['data', 'project', 'description'])\r\n        },\r\n        { # NewAttachment\r\n            check: (timeline, event) ->\r\n                return event.type == 'change' &&\r\n                     timeline.hasIn(['data', 'value_diff']) &&\r\n                     timeline.getIn(['data', 'value_diff', 'key']) == 'attachments'\r\n            key: 'TIMELINE.UPLOAD_ATTACHMENT',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # NewUs\r\n            check: (timeline, event) ->\r\n                return event.obj == 'userstory' && event.type == 'create'\r\n            key: 'TIMELINE.US_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewIssue\r\n            check: (timeline, event) ->\r\n                return event.obj == 'issue' && event.type == 'create'\r\n            key: 'TIMELINE.ISSUE_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewWiki\r\n            check: (timeline, event) ->\r\n                return event.obj == 'wikipage' && event.type == 'create'\r\n            key: 'TIMELINE.WIKI_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewTask\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' && event.type == 'create' && !timeline.getIn(['data', 'task', 'userstory'])\r\n            key: 'TIMELINE.TASK_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewTask with US\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' && event.type == 'create' && timeline.getIn(['data', 'task', 'userstory'])\r\n            key: 'TIMELINE.TASK_CREATED_WITH_US',\r\n            translate_params: ['username', 'project_name', 'obj_name', 'us_name']\r\n        },\r\n        { # NewMilestone\r\n            check: (timeline, event) ->\r\n                return event.obj == 'milestone' && event.type == 'create'\r\n            key: 'TIMELINE.MILESTONE_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewEpic\r\n            check: (timeline, event) ->\r\n                return event.obj == 'epic' && event.type == 'create'\r\n            key: 'TIMELINE.EPIC_CREATED',\r\n            translate_params: ['username', 'project_name', 'obj_name']\r\n        },\r\n        { # NewEpicRelatedUserstory\r\n            check: (timeline, event) ->\r\n                return event.obj == 'relateduserstory' && event.type == 'create'\r\n            key: 'TIMELINE.EPIC_RELATED_USERSTORY_CREATED',\r\n            translate_params: ['username', 'project_name', 'related_us_name', 'epic_name']\r\n        },\r\n        { # NewUsComment\r\n            check: (timeline, event) ->\r\n                return timeline.getIn(['data', 'comment']) && event.obj == 'userstory'\r\n            key: 'TIMELINE.NEW_COMMENT_US',\r\n            translate_params: ['username', 'obj_name'],\r\n            description: (timeline) ->\r\n                text = timeline.getIn(['data', 'comment_html'])\r\n                return $($.parseHTML(text)).text()\r\n        },\r\n        { # NewIssueComment\r\n            check: (timeline, event) ->\r\n                return timeline.getIn(['data', 'comment']) && event.obj == 'issue'\r\n            key: 'TIMELINE.NEW_COMMENT_ISSUE',\r\n            translate_params: ['username', 'obj_name'],\r\n            description: (timeline) ->\r\n                text = timeline.getIn(['data', 'comment_html'])\r\n                return $($.parseHTML(text)).text()\r\n        },\r\n        { # NewTaskComment\r\n            check: (timeline, event) ->\r\n                return timeline.getIn(['data', 'comment']) && event.obj == 'task'\r\n            key: 'TIMELINE.NEW_COMMENT_TASK'\r\n            translate_params: ['username', 'obj_name'],\r\n            description: (timeline) ->\r\n                text = timeline.getIn(['data', 'comment_html'])\r\n                return $($.parseHTML(text)).text()\r\n        },\r\n        { # NewEpicComment\r\n            check: (timeline, event) ->\r\n                return timeline.getIn(['data', 'comment']) && event.obj == 'epic'\r\n            key: 'TIMELINE.NEW_COMMENT_EPIC'\r\n            translate_params: ['username', 'obj_name'],\r\n            description: (timeline) ->\r\n                text = timeline.getIn(['data', 'comment_html'])\r\n                return $($.parseHTML(text)).text()\r\n        },\r\n        { # UsMove\r\n            check: (timeline, event) ->\r\n                return timeline.hasIn(['data', 'value_diff']) &&\r\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\r\n                      timeline.hasIn(['data', 'value_diff', 'value', 'backlog_order']) &&\r\n                      event.type == 'change'\r\n            key: 'TIMELINE.US_MOVED',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # UsToBacklog\r\n            check: (timeline, event) ->\r\n                if timeline.hasIn(['data', 'value_diff']) &&\r\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\r\n                      event.type == 'change' &&\r\n                      event.obj == 'userstory'\r\n\r\n                    return timeline.getIn(['data', 'value_diff', 'value', 'milestone']).get(1) == null\r\n\r\n                return false\r\n            key: 'TIMELINE.US_REMOVED_FROM_MILESTONE',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # UsToMilestone\r\n            check: (timeline, event) ->\r\n                return timeline.hasIn(['data', 'value_diff']) &&\r\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\r\n                      event.type == 'change' &&\r\n                      event.obj == 'userstory'\r\n\r\n            key: 'TIMELINE.US_ADDED_MILESTONE',\r\n            translate_params: ['username', 'obj_name', 'sprint_name']\r\n        },\r\n        { # Blocked\r\n            check: (timeline, event) ->\r\n                if timeline.hasIn(['data', 'value_diff']) &&\r\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'blocked' &&\r\n                      event.type == 'change'\r\n                    return timeline.getIn(['data', 'value_diff', 'value', 'is_blocked']).get(1) == true\r\n\r\n                return false\r\n            key: 'TIMELINE.BLOCKED',\r\n            translate_params: ['username', 'obj_name'],\r\n            description: (timeline) ->\r\n                if timeline.hasIn(['data', 'value_diff', 'value', 'blocked_note_html'])\r\n                    text = timeline.getIn(['data', 'value_diff', 'value', 'blocked_note_html']).get(1)\r\n                    return $($.parseHTML(text)).text()\r\n                else\r\n                    return false\r\n        },\r\n        { # UnBlocked\r\n            check: (timeline, event) ->\r\n                if timeline.hasIn(['data', 'value_diff']) &&\r\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'blocked' &&\r\n                      event.type == 'change'\r\n                    return timeline.getIn(['data', 'value_diff', 'value', 'is_blocked']).get(1) == false\r\n\r\n                return false\r\n            key: 'TIMELINE.UNBLOCKED',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # MilestoneUpdated\r\n            check: (timeline, event) ->\r\n                return event.obj == 'milestone' && event.type == 'change'\r\n            key: 'TIMELINE.MILESTONE_UPDATED',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # WikiUpdated\r\n            check: (timeline, event) ->\r\n                return event.obj == 'wikipage' && event.type == 'change'\r\n            key: 'TIMELINE.WIKI_UPDATED',\r\n            translate_params: ['username', 'obj_name']\r\n        },\r\n        { # UsUpdated points\r\n            check: (timeline, event) ->\r\n                return event.obj == 'userstory' &&\r\n                    event.type == 'change' &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'points'\r\n            key: 'TIMELINE.US_UPDATED_POINTS',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value', 'role_name']\r\n        },\r\n        { # UsUpdated description\r\n            check: (timeline, event) ->\r\n                return event.obj == 'userstory' &&\r\n                    event.type == 'change' &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\r\n            key: 'TIMELINE.US_UPDATED',\r\n            translate_params: ['username', 'field_name', 'obj_name']\r\n        },\r\n        { # UsUpdated general\r\n            check: (timeline, event) ->\r\n                return event.obj == 'userstory' &&\r\n                    event.type == 'change'\r\n            key: 'TIMELINE.US_UPDATED_WITH_NEW_VALUE',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\r\n        },\r\n        { # IssueUpdated description\r\n            check: (timeline, event) ->\r\n                return event.obj == 'issue' &&\r\n                    event.type == 'change' &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\r\n            key: 'TIMELINE.ISSUE_UPDATED',\r\n            translate_params: ['username', 'field_name', 'obj_name']\r\n        },\r\n        { # IssueUpdated general\r\n            check: (timeline, event) ->\r\n                return event.obj == 'issue' &&\r\n                    event.type == 'change'\r\n            key: 'TIMELINE.ISSUE_UPDATED_WITH_NEW_VALUE',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\r\n        },\r\n        { # TaskUpdated description\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' &&\r\n                    event.type == 'change' &&\r\n                    !timeline.getIn(['data', 'task', 'userstory']) &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\r\n            key: 'TIMELINE.TASK_UPDATED',\r\n            translate_params: ['username', 'field_name', 'obj_name']\r\n        },\r\n        { # TaskUpdated with US description\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' &&\r\n                    event.type == 'change' &&\r\n                    timeline.getIn(['data', 'task', 'userstory']) &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\r\n            key: 'TIMELINE.TASK_UPDATED_WITH_US',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'us_name']\r\n        },\r\n        { # TaskUpdated general\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' &&\r\n                    event.type == 'change' &&\r\n                    !timeline.getIn(['data', 'task', 'userstory'])\r\n            key: 'TIMELINE.TASK_UPDATED_WITH_NEW_VALUE',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\r\n        },\r\n        { # TaskUpdated with US\r\n            check: (timeline, event) ->\r\n                return event.obj == 'task' &&\r\n                    event.type == 'change' &&\r\n                    timeline.getIn(['data', 'task', 'userstory'])\r\n            key: 'TIMELINE.TASK_UPDATED_WITH_US_NEW_VALUE',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'us_name', 'new_value']\r\n        },\r\n        { # EpicUpdated description\r\n            check: (timeline, event) ->\r\n                return event.obj == 'epic' &&\r\n                    event.type == 'change' &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\r\n            key: 'TIMELINE.EPIC_UPDATED',\r\n            translate_params: ['username', 'field_name', 'obj_name']\r\n        },\r\n        { # EpicUpdated color\r\n            check: (timeline, event) ->\r\n                return event.obj == 'epic' &&\r\n                    event.type == 'change' &&\r\n                    timeline.hasIn(['data', 'value_diff']) &&\r\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'color'\r\n            key: 'TIMELINE.EPIC_UPDATED_WITH_NEW_COLOR',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\r\n        },\r\n        { # EpicUpdated general\r\n            check: (timeline, event) ->\r\n                return event.obj == 'epic' &&\r\n                    event.type == 'change'\r\n            key: 'TIMELINE.EPIC_UPDATED_WITH_NEW_VALUE',\r\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\r\n        },\r\n        { # New User\r\n            check: (timeline, event) ->\r\n                return event.obj == 'user' && event.type == 'create'\r\n            key: 'TIMELINE.NEW_USER',\r\n            translate_params: ['username']\r\n        }\r\n    ]\r\n\r\n    return _.find types, (obj) ->\r\n        return obj.check(timeline, event)\r\n\r\nclass UserTimelineType\r\n    getType: (timeline, event) -> timelineType(timeline, event)\r\n\r\nangular.module(\"taigaUserTimeline\")\r\n    .service(\"tgUserTimelineItemType\", UserTimelineType)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline-item/user-timeline-item.directive.coffee\r\n###\r\n\r\nUserTimelineItemDirective = () ->\r\n    return {\r\n        templateUrl: \"user-timeline/user-timeline-item/user-timeline-item.html\"\r\n        scope: {\r\n            timeline: \"=tgUserTimelineItem\"\r\n        }\r\n    }\r\n\r\nangular.module(\"taigaUserTimeline\")\r\n    .directive(\"tgUserTimelineItem\", UserTimelineItemDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline-pagination-sequence/user-timeline-pagination-sequence.service.coffee\r\n###\r\n\r\nUserTimelinePaginationSequence = () ->\r\n    obj = {}\r\n\r\n    obj.generate = (config) ->\r\n        page = 1\r\n        items = Immutable.List()\r\n\r\n        config.minItems = config.minItems || 20\r\n\r\n        next = () ->\r\n            items = Immutable.List()\r\n            return getContent()\r\n\r\n        getContent = () ->\r\n            config.fetch(page).then (response) ->\r\n                page++\r\n\r\n                data = response.get(\"data\")\r\n\r\n                if config.filter\r\n                    data = config.filter(data)\r\n\r\n                if config.map\r\n                    data = data.map(config.map)\r\n\r\n                items = items.concat(data)\r\n\r\n                if items.size < config.minItems && response.get(\"next\")\r\n                    return getContent()\r\n\r\n                pagination = Immutable.Map({\r\n                    items: items,\r\n                    total: response.get(\"total\"),\r\n                    next: response.get(\"next\")\r\n                })\r\n\r\n                return pagination\r\n\r\n        return {\r\n            next: () -> next()\r\n        }\r\n\r\n    return obj\r\n\r\nangular.module(\"taigaUserTimeline\").factory(\"tgUserTimelinePaginationSequenceService\", UserTimelinePaginationSequence)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline/user-timeline.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmixOf = @.taiga.mixOf\r\n\r\nclass UserTimelineController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\r\n    @.$inject = [\r\n        \"tgUserTimelineService\"\r\n    ]\r\n\r\n    constructor: (@userTimelineService) ->\r\n        @.timelineList = Immutable.List()\r\n        @.scrollDisabled = false\r\n\r\n        @.timeline = null\r\n\r\n        if @.projectId\r\n            @.timeline = @userTimelineService.getProjectTimeline(@.projectId)\r\n        else if @.currentUser\r\n            @.timeline = @userTimelineService.getProfileTimeline(@.user.get(\"id\"))\r\n        else\r\n            @.timeline = @userTimelineService.getUserTimeline(@.user.get(\"id\"))\r\n\r\n        @.loadTimeline()\r\n\r\n    loadTimeline: () ->\r\n        @.scrollDisabled = true\r\n\r\n        return @.timeline\r\n            .next()\r\n            .then (response) =>\r\n                @.timelineList = @.timelineList.concat(response.get(\"items\"))\r\n\r\n                if response.get(\"next\")\r\n                    @.scrollDisabled = false\r\n\r\n                return @.timelineList\r\n\r\nangular.module(\"taigaUserTimeline\")\r\n    .controller(\"UserTimeline\", UserTimelineController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline/user-timeline.directive.coffee\r\n###\r\n\r\nUserTimelineDirective = ->\r\n    return {\r\n        templateUrl: \"user-timeline/user-timeline/user-timeline.html\",\r\n        controller: \"UserTimeline\",\r\n        controllerAs: \"vm\",\r\n        scope: {\r\n            projectId: \"=projectid\",\r\n            user: \"=\",\r\n            currentUser: \"=\"\r\n        },\r\n        bindToController: true\r\n    }\r\n\r\nangular.module(\"taigaProfile\").directive(\"tgUserTimeline\", UserTimelineDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: user-timeline/user-timeline/user-timeline.service.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nclass UserTimelineService extends taiga.Service\r\n    @.$inject = [\r\n        \"tgResources\",\r\n        \"tgUserTimelinePaginationSequenceService\",\r\n        \"tgUserTimelineItemType\",\r\n        \"tgUserTimelineItemTitle\"\r\n    ]\r\n\r\n    constructor: (@rs, @userTimelinePaginationSequenceService, @userTimelineItemType, @userTimelineItemTitle) ->\r\n\r\n    _valid_fields: [\r\n        'status',\r\n        'subject',\r\n        'description_diff',\r\n        'assigned_users',\r\n        'assigned_to',\r\n        'points',\r\n        'severity',\r\n        'priority',\r\n        'type',\r\n        'attachments',\r\n        'is_iocaine',\r\n        'content_diff',\r\n        'name',\r\n        'estimated_finish',\r\n        'estimated_start',\r\n        # customs\r\n        'blocked',\r\n        'moveInBacklog',\r\n        'milestone',\r\n        'color',\r\n        'due_date',\r\n        'due_date_reason'\r\n    ]\r\n\r\n    _invalid: [\r\n        {# Items with only invalid fields\r\n            check: (timeline) ->\r\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\r\n\r\n                if value_diff\r\n                    fieldKey = value_diff.get('key')\r\n\r\n                    if @._valid_fields.indexOf(fieldKey) == -1\r\n                        return true\r\n                    else if fieldKey == 'attachments' &&\r\n                         value_diff.get('value').get('new').size == 0\r\n                        return true\r\n\r\n                return false\r\n        },\r\n        {# Empty change\r\n            check: (timeline) ->\r\n                event = timeline.get('event_type').split(\".\")\r\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\r\n                return event[2] == 'change' and value_diff == undefined\r\n        },\r\n        {# Deleted\r\n            check: (timeline) ->\r\n                event = timeline.get('event_type').split(\".\")\r\n                return event[2] == 'delete'\r\n        },\r\n        {# Project change\r\n            check: (timeline) ->\r\n                event = timeline.get('event_type').split(\".\")\r\n                return event[1] == 'project' && event[2] == 'change'\r\n        },\r\n        {# Comment deleted\r\n            check: (timeline) ->\r\n                return !!timeline.get(\"data\").get(\"comment_deleted\")\r\n        },\r\n        {# Task milestone\r\n            check: (timeline) ->\r\n                event = timeline.get('event_type').split(\".\")\r\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\r\n\r\n                if value_diff &&\r\n                     event[1] == \"task\" &&\r\n                     event[2] == \"change\" &&\r\n                     value_diff.get(\"key\") == \"milestone\"\r\n                    return timeline.get(\"data\").get(\"value_diff\").get(\"value\")\r\n\r\n                return false\r\n        }\r\n    ]\r\n\r\n    _isInValidTimeline: (timeline) ->\r\n        return _.some @._invalid, (invalid) =>\r\n            return invalid.check.call(this, timeline)\r\n\r\n    _parseEventType: (event_type) ->\r\n        event_type = event_type.split(\".\")\r\n\r\n        return {\r\n            section: event_type[0],\r\n            obj: event_type[1],\r\n            type: event_type[2]\r\n        }\r\n\r\n    _getTimelineObject: (timeline, event) ->\r\n        if timeline.get('data').get(event.obj)\r\n            return timeline.get('data').get(event.obj)\r\n\r\n    _attachExtraInfoToTimelineEntry: (timeline, event, type) ->\r\n        title = @userTimelineItemTitle.getTitle(timeline, event, type)\r\n\r\n        timeline = timeline.set('title_html', title)\r\n\r\n        timeline =  timeline.set('obj', @._getTimelineObject(timeline, event))\r\n\r\n        if type.description\r\n            timeline = timeline.set('description', type.description(timeline))\r\n\r\n        if type.member\r\n            timeline = timeline.set('member', type.member(timeline))\r\n\r\n        if timeline.getIn(['data', 'value_diff', 'key']) == 'attachments' &&\r\n          timeline.hasIn(['data', 'value_diff', 'value', 'new'])\r\n            timeline = timeline.set('attachments', timeline.getIn(['data', 'value_diff', 'value', 'new']))\r\n\r\n        return timeline\r\n\r\n    # - create a entry per every item in the values_diff\r\n    _parseTimeline: (response) ->\r\n        newdata = Immutable.List()\r\n\r\n        response.get('data').forEach (item) =>\r\n            event = @._parseEventType(item.get('event_type'))\r\n\r\n            data = item.get('data')\r\n            values_diff = data.get('values_diff')\r\n\r\n            if values_diff && values_diff.count()\r\n                # blocked/unblocked change must be a single change\r\n                if values_diff.has('is_blocked')\r\n                    values_diff = Immutable.Map({'blocked': values_diff})\r\n\r\n                if values_diff.has('milestone')\r\n                    if event.obj == 'userstory'\r\n                        values_diff = Immutable.Map({'moveInBacklog': values_diff})\r\n                    else\r\n                        values_diff = values_diff.deleteIn(['values_diff', 'milestone'])\r\n\r\n                else if event.obj == 'milestone'\r\n                     values_diff = Immutable.Map({'milestone': values_diff})\r\n\r\n                values_diff.forEach (value, key) =>\r\n                    obj = Immutable.Map({\r\n                        key: key,\r\n                        value: value\r\n                    })\r\n\r\n                    newItem = item.setIn(['data', 'value_diff'], obj)\r\n                    newItem = newItem.deleteIn(['data', 'values_diff'])\r\n                    newdata = newdata.push(newItem)\r\n            else\r\n                newItem = item.deleteIn(['data', 'values_diff'])\r\n                newdata = newdata.push(newItem)\r\n\r\n        return response.set('data', newdata)\r\n\r\n    _addEntyAttributes: (item) ->\r\n        event = @._parseEventType(item.get('event_type'))\r\n        type = @userTimelineItemType.getType(item, event)\r\n\r\n        return @._attachExtraInfoToTimelineEntry(item, event, type)\r\n\r\n    getProfileTimeline: (userId) ->\r\n        config = {}\r\n\r\n        config.fetch = (page) =>\r\n            return @rs.users.getProfileTimeline(userId, page)\r\n                .then (response) =>\r\n                    return @._parseTimeline(response)\r\n\r\n        config.map = (obj) => @._addEntyAttributes(obj)\r\n\r\n        config.filter = (items) =>\r\n            return items.filterNot (item) => @._isInValidTimeline(item)\r\n\r\n        return @userTimelinePaginationSequenceService.generate(config)\r\n\r\n    getUserTimeline: (userId) ->\r\n        config = {}\r\n\r\n        config.fetch = (page) =>\r\n            return @rs.users.getUserTimeline(userId, page)\r\n                .then (response) =>\r\n                    return @._parseTimeline(response)\r\n\r\n        config.map = (obj) => @._addEntyAttributes(obj)\r\n\r\n        config.filter = (items) =>\r\n            return items.filterNot (item) => @._isInValidTimeline(item)\r\n\r\n        return @userTimelinePaginationSequenceService.generate(config)\r\n\r\n    getProjectTimeline: (projectId) ->\r\n        config = {}\r\n\r\n        config.fetch = (page) =>\r\n            return @rs.projects.getTimeline(projectId, page)\r\n                .then (response) => return @._parseTimeline(response)\r\n\r\n        config.map = (obj) => @._addEntyAttributes(obj)\r\n\r\n        config.filter = (items) =>\r\n            return items.filterNot (item) => @._isInValidTimeline(item)\r\n\r\n        return @userTimelinePaginationSequenceService.generate(config)\r\n\r\nangular.module(\"taigaUserTimeline\").service(\"tgUserTimelineService\", UserTimelineService)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: utils/isolate-click.directive.coffee\r\n###\r\n\r\nIsolateClickDirective = () ->\r\n    link = (scope, el, attrs) ->\r\n        el.on 'click', (e) =>\r\n            e.stopPropagation()\r\n\r\n    return {link: link}\r\n\r\nangular.module(\"taigaUtils\").directive(\"tgIsolateClick\", IsolateClickDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: wiki/history/wiki-history-diff.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaWikiHistory')\r\n\r\nWikiHistoryDiffDirective = () ->\r\n    return {\r\n        templateUrl:\"wiki/history/wiki-history-diff.html\",\r\n        scope: {\r\n            key: \"<\",\r\n            diff: \"<\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgWikiHistoryDiff\", WikiHistoryDiffDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: wiki/history/wiki-history-entry.directive.coffee\r\n###\r\n\r\nmodule = angular.module('taigaWikiHistory')\r\n\r\nWikiHistoryEntryDirective = () ->\r\n    link = (scope, el, attr) ->\r\n        scope.singleHistoryEntry = scope.historyEntry.toJS()\r\n\r\n    return {\r\n        link: link,\r\n        templateUrl:\"wiki/history/wiki-history-entry.html\",\r\n        scope: {\r\n            historyEntry: \"<\"\r\n        }\r\n    }\r\n\r\nmodule.directive(\"tgWikiHistoryEntry\", WikiHistoryEntryDirective)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: wiki/history/wiki-history.controller.coffee\r\n###\r\n\r\ntaiga = @.taiga\r\n\r\nmodule = angular.module(\"taigaWikiHistory\")\r\n\r\nclass WikiHistoryController\r\n    @.$inject = [\r\n        \"tgActivityService\"\r\n    ]\r\n\r\n    constructor: (@activityService) ->\r\n        taiga.defineImmutableProperty @, 'historyEntries', () =>\r\n            return @activityService.entries\r\n        taiga.defineImmutableProperty @, 'disablePagination', () =>\r\n            return @activityService.disablePagination\r\n        @.toggle = false\r\n\r\n    initializeHistory: (wikiId) ->\r\n        if wikiId\r\n            @activityService.init('wiki', wikiId)\r\n        @.loadHistory()\r\n\r\n    loadHistory: ()->\r\n        @activityService.fetchEntries()\r\n\r\n    nextPage: () ->\r\n        @activityService.nextPage()\r\n\r\nmodule.controller(\"WikiHistoryCtrl\", WikiHistoryController)\r\n","###\r\n# Copyright (C) 2014-2018 Taiga Agile LLC\r\n#\r\n# This program is free software: you can redistribute it and/or modify\r\n# it under the terms of the GNU Affero General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n# GNU Affero General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Affero General Public License\r\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n# File: wiki/history/wiki-history.directive.coffee\r\n###\r\n\r\nbindOnce = @.taiga.bindOnce\r\n\r\nmodule = angular.module('taigaWikiHistory')\r\n\r\n\r\nWikiHistoryDirective = () ->\r\n    link = (scope, el, attrs, ctrl) ->\r\n        bindOnce scope, 'vm.wikiId', (value) ->\r\n            ctrl.initializeHistory(value)\r\n\r\n    return {\r\n        scope: {},\r\n        bindToController: {\r\n            wikiId: \"<\"\r\n        }\r\n        controller: \"WikiHistoryCtrl\",\r\n        controllerAs: \"vm\",\r\n        templateUrl:\"wiki/history/wiki-history.html\",\r\n        link: link\r\n    }\r\n\r\nmodule.directive(\"tgWikiHistory\", WikiHistoryDirective)\r\n"]}